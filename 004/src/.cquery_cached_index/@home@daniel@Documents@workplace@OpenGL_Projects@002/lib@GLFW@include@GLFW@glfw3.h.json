16
{"last_modification_time":1579473811,"language":1,"import_file":"/home/daniel/Documents/workplace/OpenGL_Projects/002/lib/GLFW/src/null_joystick.c","args_hash":13775633268010116346,"includes":[{"line":102,"resolved_path":"/home/daniel/Software/cquery/build/release/lib/clang/7.0.0/include/stddef.h"},{"line":107,"resolved_path":"/home/daniel/Software/cquery/build/release/lib/clang/7.0.0/include/stdint.h"}],"dependencies":["/home/daniel/Documents/workplace/OpenGL_Projects/002/lib/GLFW/src/null_joystick.c","/home/daniel/Documents/workplace/OpenGL_Projects/002/lib/GLFW/src/internal.h","/home/daniel/Software/cquery/build/release/lib/clang/7.0.0/include/stddef.h","/home/daniel/Software/cquery/build/release/lib/clang/7.0.0/include/stdint.h","/usr/include/stdint.h","/usr/include/x86_64-linux-gnu/bits/libc-header-start.h","/usr/include/features.h","/usr/include/x86_64-linux-gnu/sys/cdefs.h","/usr/include/x86_64-linux-gnu/gnu/stubs.h","/usr/include/x86_64-linux-gnu/bits/types.h","/usr/include/x86_64-linux-gnu/bits/stdint-intn.h","/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h","/home/daniel/Software/cquery/build/release/lib/clang/7.0.0/include/__stddef_max_align_t.h","/usr/include/stdc-predef.h","/usr/include/x86_64-linux-gnu/bits/wordsize.h","/usr/include/x86_64-linux-gnu/gnu/stubs-64.h","/usr/include/x86_64-linux-gnu/bits/typesizes.h","/usr/include/x86_64-linux-gnu/bits/wchar.h"],"skipped_by_preprocessor":["32:1-34:7","95:1-97:7","110:1-112:7","122:2-124:7","132:1-135:7","139:1-142:7","146:1-220:7","222:1-228:7","233:1-242:6","5699:1-5840:7","5849:1-5852:7","5854:1-5857:7","5869:1-5871:7"],"types":[{"id":0,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":1,"usr":14816023555101636783,"detailed_name":"GLFWglproc","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef void (*GLFWglproc)(void)","comments":"@brief Client API function pointer type.\n\nGeneric function pointer used for returning client API function pointers\nwithout forcing a cast from a regular pointer.\n\n@sa @ref context_glext\n@sa @ref glfwGetProcAddress\n\n@since Added in version 3.0.\n\n@ingroup context","declarations":[],"spell":"1119:16-1119:26|-1|1|2","extent":"1119:1-1119:33|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1119:16-1119:26|-1|1|4","5621:9-5621:19|-1|1|4"]},{"id":2,"usr":8229241397148052128,"detailed_name":"GLFWvkproc","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef void (*GLFWvkproc)(void)","comments":"@brief Vulkan API function pointer type.\n\nGeneric function pointer used for returning Vulkan API function pointers\nwithout forcing a cast from a regular pointer.\n\n@sa @ref vulkan_proc\n@sa @ref glfwGetInstanceProcAddress\n\n@since Added in version 3.2.\n\n@ingroup vulkan","declarations":[],"spell":"1133:16-1133:26|-1|1|2","extent":"1133:1-1133:33|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1133:16-1133:26|-1|1|4"]},{"id":3,"usr":9726964407430708013,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1145:16-1145:27|-1|1|4"]},{"id":4,"usr":18435954907899771856,"detailed_name":"GLFWmonitor","short_name_offset":0,"short_name_size":11,"kind":252,"hover":"typedef struct GLFWmonitor GLFWmonitor","comments":"@brief Opaque monitor object.\n\nOpaque monitor object.\n\n@see @ref monitor_object\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[],"spell":"1145:28-1145:39|-1|1|2","extent":"1145:1-1145:39|-1|1|0","alias_of":3,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1145:28-1145:39|-1|1|4","1593:33-1593:44|-1|1|4","1993:9-1993:20|-1|1|4","2017:9-2017:20|-1|1|4","2042:32-2042:43|-1|1|4","2073:37-2073:48|-1|1|4","2107:41-2107:52|-1|1|4","2139:41-2139:52|-1|1|4","2165:40-2165:51|-1|1|4","2191:40-2191:51|-1|1|4","2215:41-2215:52|-1|1|4","2278:46-2278:57|-1|1|4","2306:45-2306:56|-1|1|4","2339:27-2339:38|-1|1|4","2369:47-2369:58|-1|1|4","2410:31-2410:42|-1|1|4","2656:80-2656:91|-1|1|4","3398:9-3398:20|-1|1|4","3457:55-3457:66|-1|1|4"]},{"id":5,"usr":14343316451134704734,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1157:16-1157:26|-1|1|4"]},{"id":6,"usr":15180144941792678718,"detailed_name":"GLFWwindow","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef struct GLFWwindow GLFWwindow","comments":"@brief Opaque window object.\n\nOpaque window object.\n\n@see @ref window_object\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[],"spell":"1157:27-1157:37|-1|1|2","extent":"1157:1-1157:37|-1|1|0","alias_of":5,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1157:27-1157:37|-1|1|4","1216:35-1216:45|-1|1|4","1238:36-1238:46|-1|1|4","1258:37-1258:47|-1|1|4","1278:39-1278:49|-1|1|4","1299:37-1299:47|-1|1|4","1320:39-1320:49|-1|1|4","1341:40-1341:50|-1|1|4","1362:41-1362:51|-1|1|4","1383:44-1383:54|-1|1|4","1409:37-1409:47|-1|1|4","1432:35-1432:45|-1|1|4","1453:37-1453:47|-1|1|4","1474:32-1474:42|-1|1|4","1500:29-1500:39|-1|1|4","1521:30-1521:40|-1|1|4","1548:34-1548:44|-1|1|4","1572:30-1572:40|-1|1|4","2656:9-2656:19|-1|1|4","2656:102-2656:112|-1|1|4","2685:32-2685:42|-1|1|4","2705:35-2705:45|-1|1|4","2727:39-2727:49|-1|1|4","2752:33-2752:43|-1|1|4","2799:32-2799:42|-1|1|4","2831:31-2831:41|-1|1|4","2866:31-2866:41|-1|1|4","2896:32-2896:42|-1|1|4","2939:38-2939:48|-1|1|4","2982:39-2982:49|-1|1|4","3023:32-3023:42|-1|1|4","3052:37-3052:47|-1|1|4","3089:37-3089:47|-1|1|4","3122:40-3122:50|-1|1|4","3149:36-3149:46|-1|1|4","3178:35-3178:45|-1|1|4","3209:32-3209:42|-1|1|4","3236:32-3236:42|-1|1|4","3261:33-3261:43|-1|1|4","3288:29-3288:39|-1|1|4","3310:29-3310:39|-1|1|4","3349:30-3349:40|-1|1|4","3376:41-3376:51|-1|1|4","3398:43-3398:53|-1|1|4","3457:35-3457:45|-1|1|4","3491:33-3491:43|-1|1|4","3528:34-3528:44|-1|1|4","3551:39-3551:49|-1|1|4","3572:40-3572:50|-1|1|4","3607:51-3607:61|-1|1|4","3639:53-3639:63|-1|1|4","3679:55-3679:65|-1|1|4","3715:59-3715:69|-1|1|4","3750:55-3750:65|-1|1|4","3783:59-3783:69|-1|1|4","3813:61-3813:71|-1|1|4","3843:63-3843:73|-1|1|4","3874:69-3874:79|-1|1|4","4051:30-4051:40|-1|1|4","4113:31-4113:41|-1|1|4","4274:24-4274:34|-1|1|4","4303:32-4303:42|-1|1|4","4341:31-4341:41|-1|1|4","4381:31-4381:41|-1|1|4","4496:28-4496:38|-1|1|4","4546:39-4546:49|-1|1|4","4589:41-4589:51|-1|1|4","4631:49-4631:59|-1|1|4","4668:55-4668:65|-1|1|4","4700:51-4700:61|-1|1|4","4731:55-4731:65|-1|1|4","4765:45-4765:55|-1|1|4","4802:41-4802:51|-1|1|4","5270:37-5270:47|-1|1|4","5300:44-5300:54|-1|1|4","5440:37-5440:47|-1|1|4","5461:9-5461:19|-1|1|4","5495:30-5495:40|-1|1|4"]},{"id":7,"usr":12385513578459848221,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1169:16-1169:26|-1|1|4"]},{"id":8,"usr":15178641608229180514,"detailed_name":"GLFWcursor","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef struct GLFWcursor GLFWcursor","comments":"@brief Opaque cursor object.\n\nOpaque cursor object.\n\n@see @ref cursor_object\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[],"spell":"1169:27-1169:37|-1|1|2","extent":"1169:1-1169:37|-1|1|0","alias_of":7,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1169:27-1169:37|-1|1|4","4419:9-4419:19|-1|1|4","4442:9-4442:19|-1|1|4","4469:32-4469:42|-1|1|4","4496:48-4496:58|-1|1|4"]},{"id":9,"usr":5422838537546251542,"detailed_name":"GLFWerrorfun","short_name_offset":0,"short_name_size":12,"kind":252,"hover":"typedef void (* GLFWerrorfun)(int,const char*)","comments":"@brief The function pointer type for error callbacks.\n\nThis is the function pointer type for error callbacks.  An error callback\nfunction has the following signature:\n@code\nvoid callback_name(int error_code, const char* description)\n@endcode\n\n@param[in] error_code An [error code](@ref errors).  Future releases may add\nmore error codes.\n@param[in] description A UTF-8 encoded string describing the error.\n\n@pointer_lifetime The error description string is valid until the callback\nfunction returns.\n\n@sa @ref error_handling\n@sa @ref glfwSetErrorCallback\n\n@since Added in version 3.0.\n\n@ingroup init","declarations":[],"spell":"1193:17-1193:29|-1|1|2","extent":"1193:1-1193:47|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1193:17-1193:29|-1|1|4","1964:9-1964:21|-1|1|4","1964:43-1964:55|-1|1|4"]},{"id":10,"usr":11962547375336749650,"detailed_name":"GLFWwindowposfun","short_name_offset":0,"short_name_size":16,"kind":252,"hover":"typedef void (* GLFWwindowposfun)(GLFWwindow*,int,int)","comments":"@brief The function pointer type for window position callbacks.\n\nThis is the function pointer type for window position callbacks.  A window\nposition callback function has the following signature:\n@code\nvoid callback_name(GLFWwindow* window, int xpos, int ypos)\n@endcode\n\n@param[in] window The window that was moved.\n@param[in] xpos The new x-coordinate, in screen coordinates, of the\nupper-left corner of the content area of the window.\n@param[in] ypos The new y-coordinate, in screen coordinates, of the\nupper-left corner of the content area of the window.\n\n@sa @ref window_pos\n@sa @ref glfwSetWindowPosCallback\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[],"spell":"1216:17-1216:33|-1|1|2","extent":"1216:1-1216:55|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1216:17-1216:33|-1|1|4","3607:9-3607:25|-1|1|4","3607:71-3607:87|-1|1|4"]},{"id":11,"usr":12413963047037634897,"detailed_name":"GLFWwindowsizefun","short_name_offset":0,"short_name_size":17,"kind":252,"hover":"typedef void (* GLFWwindowsizefun)(GLFWwindow*,int,int)","comments":"@brief The function pointer type for window size callbacks.\n\nThis is the function pointer type for window size callbacks.  A window size\ncallback function has the following signature:\n@code\nvoid callback_name(GLFWwindow* window, int width, int height)\n@endcode\n\n@param[in] window The window that was resized.\n@param[in] width The new width, in screen coordinates, of the window.\n@param[in] height The new height, in screen coordinates, of the window.\n\n@sa @ref window_size\n@sa @ref glfwSetWindowSizeCallback\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[],"spell":"1238:17-1238:34|-1|1|2","extent":"1238:1-1238:56|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1238:17-1238:34|-1|1|4","3639:9-3639:26|-1|1|4","3639:73-3639:90|-1|1|4"]},{"id":12,"usr":7437512656830711190,"detailed_name":"GLFWwindowclosefun","short_name_offset":0,"short_name_size":18,"kind":252,"hover":"typedef void (* GLFWwindowclosefun)(GLFWwindow*)","comments":"@brief The function pointer type for window close callbacks.\n\nThis is the function pointer type for window close callbacks.  A window\nclose callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window)\n@endcode\n\n@param[in] window The window that the user attempted to close.\n\n@sa @ref window_close\n@sa @ref glfwSetWindowCloseCallback\n\n@since Added in version 2.5.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[],"spell":"1258:17-1258:35|-1|1|2","extent":"1258:1-1258:49|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1258:17-1258:35|-1|1|4","3679:9-3679:27|-1|1|4","3679:75-3679:93|-1|1|4"]},{"id":13,"usr":5028025609581204288,"detailed_name":"GLFWwindowrefreshfun","short_name_offset":0,"short_name_size":20,"kind":252,"hover":"typedef void (* GLFWwindowrefreshfun)(GLFWwindow*)","comments":"@brief The function pointer type for window content refresh callbacks.\n\nThis is the function pointer type for window content refresh callbacks.\nA window content refresh callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window);\n@endcode\n\n@param[in] window The window whose content needs to be refreshed.\n\n@sa @ref window_refresh\n@sa @ref glfwSetWindowRefreshCallback\n\n@since Added in version 2.5.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[],"spell":"1278:17-1278:37|-1|1|2","extent":"1278:1-1278:51|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1278:17-1278:37|-1|1|4","3715:9-3715:29|-1|1|4","3715:79-3715:99|-1|1|4"]},{"id":14,"usr":4607932406728941770,"detailed_name":"GLFWwindowfocusfun","short_name_offset":0,"short_name_size":18,"kind":252,"hover":"typedef void (* GLFWwindowfocusfun)(GLFWwindow*,int)","comments":"@brief The function pointer type for window focus callbacks.\n\nThis is the function pointer type for window focus callbacks.  A window\nfocus callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, int focused)\n@endcode\n\n@param[in] window The window that gained or lost input focus.\n@param[in] focused `GLFW_TRUE` if the window was given input focus, or\n`GLFW_FALSE` if it lost it.\n\n@sa @ref window_focus\n@sa @ref glfwSetWindowFocusCallback\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[],"spell":"1299:17-1299:35|-1|1|2","extent":"1299:1-1299:53|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1299:17-1299:35|-1|1|4","3750:9-3750:27|-1|1|4","3750:75-3750:93|-1|1|4"]},{"id":15,"usr":4244363446018358646,"detailed_name":"GLFWwindowiconifyfun","short_name_offset":0,"short_name_size":20,"kind":252,"hover":"typedef void (* GLFWwindowiconifyfun)(GLFWwindow*,int)","comments":"@brief The function pointer type for window iconify callbacks.\n\nThis is the function pointer type for window iconify callbacks.  A window\niconify callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, int iconified)\n@endcode\n\n@param[in] window The window that was iconified or restored.\n@param[in] iconified `GLFW_TRUE` if the window was iconified, or\n`GLFW_FALSE` if it was restored.\n\n@sa @ref window_iconify\n@sa @ref glfwSetWindowIconifyCallback\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[],"spell":"1320:17-1320:37|-1|1|2","extent":"1320:1-1320:55|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1320:17-1320:37|-1|1|4","3783:9-3783:29|-1|1|4","3783:79-3783:99|-1|1|4"]},{"id":16,"usr":3950352342911293389,"detailed_name":"GLFWwindowmaximizefun","short_name_offset":0,"short_name_size":21,"kind":252,"hover":"typedef void (* GLFWwindowmaximizefun)(GLFWwindow*,int)","comments":"@brief The function pointer type for window maximize callbacks.\n\nThis is the function pointer type for window maximize callbacks.  A window\nmaximize callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, int maximized)\n@endcode\n\n@param[in] window The window that was maximized or restored.\n@param[in] iconified `GLFW_TRUE` if the window was maximized, or\n`GLFW_FALSE` if it was restored.\n\n@sa @ref window_maximize\n@sa glfwSetWindowMaximizeCallback\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[],"spell":"1341:17-1341:38|-1|1|2","extent":"1341:1-1341:56|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1341:17-1341:38|-1|1|4","3813:9-3813:30|-1|1|4","3813:81-3813:102|-1|1|4"]},{"id":17,"usr":15374126344898412354,"detailed_name":"GLFWframebuffersizefun","short_name_offset":0,"short_name_size":22,"kind":252,"hover":"typedef void (* GLFWframebuffersizefun)(GLFWwindow*,int,int)","comments":"@brief The function pointer type for framebuffer size callbacks.\n\nThis is the function pointer type for framebuffer size callbacks.\nA framebuffer size callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, int width, int height)\n@endcode\n\n@param[in] window The window whose framebuffer was resized.\n@param[in] width The new width, in pixels, of the framebuffer.\n@param[in] height The new height, in pixels, of the framebuffer.\n\n@sa @ref window_fbsize\n@sa @ref glfwSetFramebufferSizeCallback\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[],"spell":"1362:17-1362:39|-1|1|2","extent":"1362:1-1362:61|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1362:17-1362:39|-1|1|4","3843:9-3843:31|-1|1|4","3843:83-3843:105|-1|1|4"]},{"id":18,"usr":13431980261016896303,"detailed_name":"GLFWwindowcontentscalefun","short_name_offset":0,"short_name_size":25,"kind":252,"hover":"typedef void (* GLFWwindowcontentscalefun)(GLFWwindow*,float,float)","comments":"@brief The function pointer type for window content scale callbacks.\n\nThis is the function pointer type for window content scale callbacks.\nA window content scale callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, float xscale, float yscale)\n@endcode\n\n@param[in] window The window whose content scale changed.\n@param[in] xscale The new x-axis content scale of the window.\n@param[in] yscale The new y-axis content scale of the window.\n\n@sa @ref window_scale\n@sa @ref glfwSetWindowContentScaleCallback\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[],"spell":"1383:17-1383:42|-1|1|2","extent":"1383:1-1383:68|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1383:17-1383:42|-1|1|4","3874:9-3874:34|-1|1|4","3874:89-3874:114|-1|1|4"]},{"id":19,"usr":17694260343885676167,"detailed_name":"GLFWmousebuttonfun","short_name_offset":0,"short_name_size":18,"kind":252,"hover":"typedef void (* GLFWmousebuttonfun)(GLFWwindow*,int,int,int)","comments":"@brief The function pointer type for mouse button callbacks.\n\nThis is the function pointer type for mouse button callback functions.\nA mouse button callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, int button, int action, int mods)\n@endcode\n\n@param[in] window The window that received the event.\n@param[in] button The [mouse button](@ref buttons) that was pressed or\nreleased.\n@param[in] action One of `GLFW_PRESS` or `GLFW_RELEASE`.  Future releases\nmay add more actions.\n@param[in] mods Bit field describing which [modifier keys](@ref mods) were\nheld down.\n\n@sa @ref input_mouse_button\n@sa @ref glfwSetMouseButtonCallback\n\n@since Added in version 1.0.\n@glfw3 Added window handle and modifier mask parameters.\n\n@ingroup input","declarations":[],"spell":"1409:17-1409:35|-1|1|2","extent":"1409:1-1409:61|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1409:17-1409:35|-1|1|4","4668:9-4668:27|-1|1|4","4668:75-4668:93|-1|1|4"]},{"id":20,"usr":16792216032012613306,"detailed_name":"GLFWcursorposfun","short_name_offset":0,"short_name_size":16,"kind":252,"hover":"typedef void (* GLFWcursorposfun)(GLFWwindow*,double,double)","comments":"@brief The function pointer type for cursor position callbacks.\n\nThis is the function pointer type for cursor position callbacks.  A cursor\nposition callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, double xpos, double ypos);\n@endcode\n\n@param[in] window The window that received the event.\n@param[in] xpos The new cursor x-coordinate, relative to the left edge of\nthe content area.\n@param[in] ypos The new cursor y-coordinate, relative to the top edge of the\ncontent area.\n\n@sa @ref cursor_pos\n@sa @ref glfwSetCursorPosCallback\n\n@since Added in version 3.0.  Replaces `GLFWmouseposfun`.\n\n@ingroup input","declarations":[],"spell":"1432:17-1432:33|-1|1|2","extent":"1432:1-1432:61|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1432:17-1432:33|-1|1|4","4700:9-4700:25|-1|1|4","4700:71-4700:87|-1|1|4"]},{"id":21,"usr":4485263876336876976,"detailed_name":"GLFWcursorenterfun","short_name_offset":0,"short_name_size":18,"kind":252,"hover":"typedef void (* GLFWcursorenterfun)(GLFWwindow*,int)","comments":"@brief The function pointer type for cursor enter/leave callbacks.\n\nThis is the function pointer type for cursor enter/leave callbacks.\nA cursor enter/leave callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, int entered)\n@endcode\n\n@param[in] window The window that received the event.\n@param[in] entered `GLFW_TRUE` if the cursor entered the window's content\narea, or `GLFW_FALSE` if it left it.\n\n@sa @ref cursor_enter\n@sa @ref glfwSetCursorEnterCallback\n\n@since Added in version 3.0.\n\n@ingroup input","declarations":[],"spell":"1453:17-1453:35|-1|1|2","extent":"1453:1-1453:53|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1453:17-1453:35|-1|1|4","4731:9-4731:27|-1|1|4","4731:75-4731:93|-1|1|4"]},{"id":22,"usr":10352040467416038318,"detailed_name":"GLFWscrollfun","short_name_offset":0,"short_name_size":13,"kind":252,"hover":"typedef void (* GLFWscrollfun)(GLFWwindow*,double,double)","comments":"@brief The function pointer type for scroll callbacks.\n\nThis is the function pointer type for scroll callbacks.  A scroll callback\nfunction has the following signature:\n@code\nvoid function_name(GLFWwindow* window, double xoffset, double yoffset)\n@endcode\n\n@param[in] window The window that received the event.\n@param[in] xoffset The scroll offset along the x-axis.\n@param[in] yoffset The scroll offset along the y-axis.\n\n@sa @ref scrolling\n@sa @ref glfwSetScrollCallback\n\n@since Added in version 3.0.  Replaces `GLFWmousewheelfun`.\n\n@ingroup input","declarations":[],"spell":"1474:17-1474:30|-1|1|2","extent":"1474:1-1474:58|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1474:17-1474:30|-1|1|4","4765:9-4765:22|-1|1|4","4765:65-4765:78|-1|1|4"]},{"id":23,"usr":5998142565632431728,"detailed_name":"GLFWkeyfun","short_name_offset":0,"short_name_size":10,"kind":252,"hover":"typedef void (* GLFWkeyfun)(GLFWwindow*,int,int,int,int)","comments":"@brief The function pointer type for keyboard key callbacks.\n\nThis is the function pointer type for keyboard key callbacks.  A keyboard\nkey callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, int key, int scancode, int action, int mods)\n@endcode\n\n@param[in] window The window that received the event.\n@param[in] key The [keyboard key](@ref keys) that was pressed or released.\n@param[in] scancode The system-specific scancode of the key.\n@param[in] action `GLFW_PRESS`, `GLFW_RELEASE` or `GLFW_REPEAT`.  Future\nreleases may add more actions.\n@param[in] mods Bit field describing which [modifier keys](@ref mods) were\nheld down.\n\n@sa @ref input_key\n@sa @ref glfwSetKeyCallback\n\n@since Added in version 1.0.\n@glfw3 Added window handle, scancode and modifier mask parameters.\n\n@ingroup input","declarations":[],"spell":"1500:17-1500:27|-1|1|2","extent":"1500:1-1500:57|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1500:17-1500:27|-1|1|4","4546:9-4546:19|-1|1|4","4546:59-4546:69|-1|1|4"]},{"id":24,"usr":10760367481493758526,"detailed_name":"GLFWcharfun","short_name_offset":0,"short_name_size":11,"kind":252,"hover":"typedef void (* GLFWcharfun)(GLFWwindow*,unsigned int)","comments":"@brief The function pointer type for Unicode character callbacks.\n\nThis is the function pointer type for Unicode character callbacks.\nA Unicode character callback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, unsigned int codepoint)\n@endcode\n\n@param[in] window The window that received the event.\n@param[in] codepoint The Unicode code point of the character.\n\n@sa @ref input_char\n@sa @ref glfwSetCharCallback\n\n@since Added in version 2.4.\n@glfw3 Added window handle parameter.\n\n@ingroup input","declarations":[],"spell":"1521:17-1521:28|-1|1|2","extent":"1521:1-1521:55|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1521:17-1521:28|-1|1|4","4589:9-4589:20|-1|1|4","4589:61-4589:72|-1|1|4"]},{"id":25,"usr":3436413681268098090,"detailed_name":"GLFWcharmodsfun","short_name_offset":0,"short_name_size":15,"kind":252,"hover":"typedef void (* GLFWcharmodsfun)(GLFWwindow*,unsigned int,int)","comments":"@brief The function pointer type for Unicode character with modifiers\ncallbacks.\n\nThis is the function pointer type for Unicode character with modifiers\ncallbacks.  It is called for each input character, regardless of what\nmodifier keys are held down.  A Unicode character with modifiers callback\nfunction has the following signature:\n@code\nvoid function_name(GLFWwindow* window, unsigned int codepoint, int mods)\n@endcode\n\n@param[in] window The window that received the event.\n@param[in] codepoint The Unicode code point of the character.\n@param[in] mods Bit field describing which [modifier keys](@ref mods) were\nheld down.\n\n@sa @ref input_char\n@sa @ref glfwSetCharModsCallback\n\n@deprecated Scheduled for removal in version 4.0.\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[],"spell":"1548:17-1548:32|-1|1|2","extent":"1548:1-1548:63|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1548:17-1548:32|-1|1|4","4631:9-4631:24|-1|1|4","4631:69-4631:84|-1|1|4"]},{"id":26,"usr":12529336137514904074,"detailed_name":"GLFWdropfun","short_name_offset":0,"short_name_size":11,"kind":252,"hover":"typedef void (* GLFWdropfun)(GLFWwindow*,int,const char*[])","comments":"@brief The function pointer type for path drop callbacks.\n\nThis is the function pointer type for path drop callbacks.  A path drop\ncallback function has the following signature:\n@code\nvoid function_name(GLFWwindow* window, int path_count, const char* paths[])\n@endcode\n\n@param[in] window The window that received the event.\n@param[in] path_count The number of dropped paths.\n@param[in] paths The UTF-8 encoded file and/or directory path names.\n\n@pointer_lifetime The path array and its strings are valid until the\ncallback function returns.\n\n@sa @ref path_drop\n@sa @ref glfwSetDropCallback\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[],"spell":"1572:17-1572:28|-1|1|2","extent":"1572:1-1572:60|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1572:17-1572:28|-1|1|4","4802:9-4802:20|-1|1|4","4802:61-4802:72|-1|1|4"]},{"id":27,"usr":16781973874588229720,"detailed_name":"GLFWmonitorfun","short_name_offset":0,"short_name_size":14,"kind":252,"hover":"typedef void (* GLFWmonitorfun)(GLFWmonitor*,int)","comments":"@brief The function pointer type for monitor configuration callbacks.\n\nThis is the function pointer type for monitor configuration callbacks.\nA monitor callback function has the following signature:\n@code\nvoid function_name(GLFWmonitor* monitor, int event)\n@endcode\n\n@param[in] monitor The monitor that was connected or disconnected.\n@param[in] event One of `GLFW_CONNECTED` or `GLFW_DISCONNECTED`.  Future\nreleases may add more events.\n\n@sa @ref monitor_event\n@sa @ref glfwSetMonitorCallback\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[],"spell":"1593:17-1593:31|-1|1|2","extent":"1593:1-1593:50|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1593:17-1593:31|-1|1|4","2245:9-2245:23|-1|1|4","2245:47-2245:61|-1|1|4"]},{"id":28,"usr":10616936550387751327,"detailed_name":"GLFWjoystickfun","short_name_offset":0,"short_name_size":15,"kind":252,"hover":"typedef void (* GLFWjoystickfun)(int,int)","comments":"@brief The function pointer type for joystick configuration callbacks.\n\nThis is the function pointer type for joystick configuration callbacks.\nA joystick configuration callback function has the following signature:\n@code\nvoid function_name(int jid, int event)\n@endcode\n\n@param[in] jid The joystick that was connected or disconnected.\n@param[in] event One of `GLFW_CONNECTED` or `GLFW_DISCONNECTED`.  Future\nreleases may add more events.\n\n@sa @ref joystick_event\n@sa @ref glfwSetJoystickCallback\n\n@since Added in version 3.2.\n\n@ingroup input","declarations":[],"spell":"1614:17-1614:32|-1|1|2","extent":"1614:1-1614:42|-1|1|0","alias_of":0,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1614:17-1614:32|-1|1|4","5143:9-5143:24|-1|1|4","5143:49-5143:64|-1|1|4"]},{"id":29,"usr":7397273371041484044,"detailed_name":"GLFWvidmode","short_name_offset":0,"short_name_size":11,"kind":23,"hover":"","comments":"@brief Video mode type.\n\nThis describes a single video mode.\n\n@sa @ref monitor_modes\n@sa @ref glfwGetVideoMode\n@sa @ref glfwGetVideoModes\n\n@since Added in version 1.0.\n@glfw3 Added refresh rate member.\n\n@ingroup monitor","declarations":[],"spell":"1629:16-1629:27|-1|1|2","extent":"1629:9-1649:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[0,1,2,3,4,5],"instances":[],"uses":[]},{"id":30,"usr":12545752428729161474,"detailed_name":"GLFWvidmode","short_name_offset":0,"short_name_size":11,"kind":252,"hover":"","comments":"","declarations":[],"spell":"1649:3-1649:14|-1|1|2","extent":"1629:1-1649:14|-1|1|0","alias_of":29,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1649:3-1649:14|-1|1|4","2278:15-2278:26|-1|1|4","2306:15-2306:26|-1|1|4"]},{"id":31,"usr":17,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[0,1,2,3,4,5,10,11],"uses":[]},{"id":32,"usr":738966359696274554,"detailed_name":"GLFWgammaramp","short_name_offset":0,"short_name_size":13,"kind":23,"hover":"","comments":"@brief Gamma ramp.\n\nThis describes the gamma ramp for a monitor.\n\n@sa @ref monitor_gamma\n@sa @ref glfwGetGammaRamp\n@sa @ref glfwSetGammaRamp\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[],"spell":"1663:16-1663:29|-1|1|2","extent":"1663:9-1677:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[6,7,8,9],"instances":[],"uses":[]},{"id":33,"usr":3918477565727369715,"detailed_name":"GLFWgammaramp","short_name_offset":0,"short_name_size":13,"kind":252,"hover":"","comments":"","declarations":[],"spell":"1677:3-1677:16|-1|1|2","extent":"1663:1-1677:16|-1|1|0","alias_of":32,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1677:3-1677:16|-1|1|4","2369:15-2369:28|-1|1|4","2410:59-2410:72|-1|1|4"]},{"id":34,"usr":8,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6,7,8],"uses":[]},{"id":35,"usr":9,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[9],"uses":[]},{"id":36,"usr":6293645444090960141,"detailed_name":"GLFWimage","short_name_offset":0,"short_name_size":9,"kind":23,"hover":"","comments":"@brief Image data.\n\nThis describes a single 2D image.  See the documentation for each related\nfunction what the expected pixel format is.\n\n@sa @ref cursor_custom\n@sa @ref window_icon\n\n@since Added in version 2.1.\n@glfw3 Removed format and bytes-per-pixel members.\n\n@ingroup window","declarations":[],"spell":"1692:16-1692:25|-1|1|2","extent":"1692:9-1703:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[10,11,12],"instances":[],"uses":[]},{"id":37,"usr":592312647804403410,"detailed_name":"GLFWimage","short_name_offset":0,"short_name_size":9,"kind":252,"hover":"","comments":"","declarations":[],"spell":"1703:3-1703:12|-1|1|2","extent":"1692:1-1703:12|-1|1|0","alias_of":36,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1703:3-1703:12|-1|1|4","2799:69-2799:78|-1|1|4","4419:44-4419:53|-1|1|4"]},{"id":38,"usr":5,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[12,13],"uses":[]},{"id":39,"usr":18373182320498955429,"detailed_name":"GLFWgamepadstate","short_name_offset":0,"short_name_size":16,"kind":23,"hover":"","comments":"@brief Gamepad input state\n\nThis describes the input state of a gamepad.\n\n@sa @ref gamepad\n@sa @ref glfwGetGamepadState\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[],"spell":"1716:16-1716:32|-1|1|2","extent":"1716:9-1726:2|-1|1|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[13,14],"instances":[],"uses":[]},{"id":40,"usr":828512298792218091,"detailed_name":"GLFWgamepadstate","short_name_offset":0,"short_name_size":16,"kind":252,"hover":"","comments":"","declarations":[],"spell":"1726:3-1726:19|-1|1|2","extent":"1716:1-1726:19|-1|1|0","alias_of":39,"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["1726:3-1726:19|-1|1|4","5245:42-5245:58|-1|1|4"]},{"id":41,"usr":21,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[14],"uses":[]},{"id":42,"usr":7879307647860853359,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["5382:9-5382:17|-1|1|4","5402:9-5402:17|-1|1|4"]},{"id":43,"usr":16199156163178427820,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["5697:56-5697:64|-1|1|4"]}],"funcs":[{"id":0,"usr":1829064684965516452,"detailed_name":"int glfwInit()","short_name_offset":4,"short_name_size":8,"kind":12,"storage":1,"hover":"","comments":"@brief Initializes the GLFW library.\n\nThis function initializes the GLFW library.  Before most GLFW functions can\nbe used, GLFW must be initialized, and before an application terminates GLFW\nshould be terminated in order to free any resources allocated during or\nafter initialization.\n\nIf this function fails, it calls @ref glfwTerminate before returning.  If it\nsucceeds, you should call @ref glfwTerminate before the application exits.\n\nAdditional calls to this function after successful initialization but before\ntermination will return `GLFW_TRUE` immediately.\n\n@return `GLFW_TRUE` if successful, or `GLFW_FALSE` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_PLATFORM_ERROR.\n\n@remark @macos This function will change the current directory of the\napplication to the `Contents/Resources` subdirectory of the application's\nbundle, if present.  This can be disabled with the @ref\nGLFW_COCOA_CHDIR_RESOURCES init hint.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref intro_init\n@sa @ref glfwTerminate\n\n@since Added in version 1.0.\n\n@ingroup init","declarations":[{"spell":"1765:13-1765:21|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":7067069805633184113,"detailed_name":"void glfwTerminate()","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"@brief Terminates the GLFW library.\n\nThis function destroys all remaining windows and cursors, restores any\nmodified gamma ramps and frees any other allocated resources.  Once this\nfunction is called, you must again call @ref glfwInit successfully before\nyou will be able to use most GLFW functions.\n\nIf GLFW has been successfully initialized, this function should be called\nbefore the application exits.  If initialization fails, there is no need to\ncall this function, as it is called by @ref glfwInit before it returns\nfailure.\n\n@errors Possible errors include @ref GLFW_PLATFORM_ERROR.\n\n@remark This function may be called before @ref glfwInit.\n\n@warning The contexts of any remaining windows must not be current on any\nother thread when this function is called.\n\n@reentrancy This function must not be called from a callback.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref intro_init\n@sa @ref glfwInit\n\n@since Added in version 1.0.\n\n@ingroup init","declarations":[{"spell":"1797:14-1797:27|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":2,"usr":1816897669110602916,"detailed_name":"void glfwInitHint(int hint, int value)","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the specified init hint to the desired value.\n\nThis function sets hints for the next initialization of GLFW.\n\nThe values you set hints to are never reset by GLFW, but they only take\neffect during initialization.  Once GLFW has been initialized, any values\nyou set will be ignored until the library is terminated and initialized\nagain.\n\nSome hints are platform specific.  These may be set on any platform but they\nwill only affect their specific platform.  Other platforms will ignore them.\nSetting these hints requires no platform specific headers or functions.\n\n@param[in] hint The [init hint](@ref init_hints) to set.\n@param[in] value The new value of the init hint.\n\n@errors Possible errors include @ref GLFW_INVALID_ENUM and @ref\nGLFW_INVALID_VALUE.\n\n@remarks This function may be called before @ref glfwInit.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa init_hints\n@sa glfwInit\n\n@since Added in version 3.3.\n\n@ingroup init","declarations":[{"spell":"1829:14-1829:26|-1|1|1","param_spellings":["1829:31-1829:35","1829:41-1829:46"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":3,"usr":225036052300531443,"detailed_name":"void glfwGetVersion(int *major, int *minor, int *rev)","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the version of the GLFW library.\n\nThis function retrieves the major, minor and revision numbers of the GLFW\nlibrary.  It is intended for when you are using GLFW as a shared library and\nwant to ensure that you are using the minimum required version.\n\nAny or all of the version arguments may be `NULL`.\n\n@param[out] major Where to store the major version number, or `NULL`.\n@param[out] minor Where to store the minor version number, or `NULL`.\n@param[out] rev Where to store the revision number, or `NULL`.\n\n@errors None.\n\n@remark This function may be called before @ref glfwInit.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref intro_version\n@sa @ref glfwGetVersionString\n\n@since Added in version 1.0.\n\n@ingroup init","declarations":[{"spell":"1856:14-1856:28|-1|1|1","param_spellings":["1856:34-1856:39","1856:46-1856:51","1856:58-1856:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":4,"usr":8140332856660425075,"detailed_name":"const char *glfwGetVersionString()","short_name_offset":12,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"@brief Returns a string describing the compile-time configuration.\n\nThis function returns the compile-time generated\n[version string](@ref intro_version_string) of the GLFW library binary.  It\ndescribes the version, platform, compiler and any platform-specific\ncompile-time options.  It should not be confused with the OpenGL or OpenGL\nES version string, queried with `glGetString`.\n\n__Do not use the version string__ to parse the GLFW library version.  The\n@ref glfwGetVersion function provides the version of the running library\nbinary in numerical format.\n\n@return The ASCII encoded GLFW version string.\n\n@errors None.\n\n@remark This function may be called before @ref glfwInit.\n\n@pointer_lifetime The returned string is static and compile-time generated.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref intro_version\n@sa @ref glfwGetVersion\n\n@since Added in version 3.0.\n\n@ingroup init","declarations":[{"spell":"1887:21-1887:41|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":9078352756780514075,"detailed_name":"int glfwGetError(const char **description)","short_name_offset":4,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"@brief Returns and clears the last error for the calling thread.\n\nThis function returns and clears the [error code](@ref errors) of the last\nerror that occurred on the calling thread, and optionally a UTF-8 encoded\nhuman-readable description of it.  If no error has occurred since the last\ncall, it returns @ref GLFW_NO_ERROR (zero) and the description pointer is\nset to `NULL`.\n\n@param[in] description Where to store the error description pointer, or `NULL`.\n@return The last error code for the calling thread, or @ref GLFW_NO_ERROR\n(zero).\n\n@errors None.\n\n@pointer_lifetime The returned string is allocated and freed by GLFW.  You\nshould not free it yourself.  It is guaranteed to be valid only until the\nnext error occurs or the library is terminated.\n\n@remark This function may be called before @ref glfwInit.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref error_handling\n@sa @ref glfwSetErrorCallback\n\n@since Added in version 3.3.\n\n@ingroup init","declarations":[{"spell":"1918:13-1918:25|-1|1|1","param_spellings":["1918:39-1918:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":15659867372003932762,"detailed_name":"GLFWerrorfun glfwSetErrorCallback(GLFWerrorfun callback)","short_name_offset":13,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the error callback.\n\nThis function sets the error callback, which is called with an error code\nand a human-readable description each time a GLFW error occurs.\n\nThe error code is set before the callback is called.  Calling @ref\nglfwGetError from the error callback will return the same value as the error\ncode argument.\n\nThe error callback is called on the thread where the error occurred.  If you\nare using GLFW from multiple threads, your error callback needs to be\nwritten accordingly.\n\nBecause the description string may have been generated specifically for that\nerror, it is not guaranteed to be valid after the callback has returned.  If\nyou wish to use it after the callback returns, you need to make a copy.\n\nOnce set, the error callback remains set even after the library has been\nterminated.\n\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set.\n\n@callback_signature\n@code\nvoid callback_name(int error_code, const char* description)\n@endcode\nFor more information about the callback parameters, see the\n[callback pointer type](@ref GLFWerrorfun).\n\n@errors None.\n\n@remark This function may be called before @ref glfwInit.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref error_handling\n@sa @ref glfwGetError\n\n@since Added in version 3.0.\n\n@ingroup init","declarations":[{"spell":"1964:22-1964:42|-1|1|1","param_spellings":["1964:56-1964:64"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":10162010258950447999,"detailed_name":"GLFWmonitor **glfwGetMonitors(int *count)","short_name_offset":14,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the currently connected monitors.\n\nThis function returns an array of handles for all currently connected\nmonitors.  The primary monitor is always first in the returned array.  If no\nmonitors were found, this function returns `NULL`.\n\n@param[out] count Where to store the number of monitors in the returned\narray.  This is set to zero if an error occurred.\n@return An array of monitor handles, or `NULL` if no monitors were found or\nif an [error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@pointer_lifetime The returned array is allocated and freed by GLFW.  You\nshould not free it yourself.  It is guaranteed to be valid only until the\nmonitor configuration changes or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_monitors\n@sa @ref monitor_event\n@sa @ref glfwGetPrimaryMonitor\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"1993:23-1993:38|-1|1|1","param_spellings":["1993:44-1993:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":14189272701457663394,"detailed_name":"GLFWmonitor *glfwGetPrimaryMonitor()","short_name_offset":13,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the primary monitor.\n\nThis function returns the primary monitor.  This is usually the monitor\nwhere elements like the task bar or global menu bar are located.\n\n@return The primary monitor, or `NULL` if no monitors were found or if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@remark The primary monitor is always first in the array returned by @ref\nglfwGetMonitors.\n\n@sa @ref monitor_monitors\n@sa @ref glfwGetMonitors\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"2017:22-2017:43|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":9,"usr":2074349184112461037,"detailed_name":"void glfwGetMonitorPos(GLFWmonitor *monitor, int *xpos, int *ypos)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the position of the monitor's viewport on the virtual screen.\n\nThis function returns the position, in screen coordinates, of the upper-left\ncorner of the specified monitor.\n\nAny or all of the position arguments may be `NULL`.  If an error occurs, all\nnon-`NULL` position arguments will be set to zero.\n\n@param[in] monitor The monitor to query.\n@param[out] xpos Where to store the monitor x-coordinate, or `NULL`.\n@param[out] ypos Where to store the monitor y-coordinate, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_properties\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"2042:14-2042:31|-1|1|1","param_spellings":["2042:45-2042:52","2042:59-2042:63","2042:70-2042:74"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":15326383694160891488,"detailed_name":"void glfwGetMonitorWorkarea(GLFWmonitor *monitor, int *xpos, int *ypos, int *width, int *height)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the work area of the monitor.\n\nThis function returns the position, in screen coordinates, of the upper-left\ncorner of the work area of the specified monitor along with the work area\nsize in screen coordinates. The work area is defined as the area of the\nmonitor not occluded by the operating system task bar where present. If no\ntask bar exists then the work area is the monitor resolution in screen\ncoordinates.\n\nAny or all of the position and size arguments may be `NULL`.  If an error\noccurs, all non-`NULL` position and size arguments will be set to zero.\n\n@param[in] monitor The monitor to query.\n@param[out] xpos Where to store the monitor x-coordinate, or `NULL`.\n@param[out] ypos Where to store the monitor y-coordinate, or `NULL`.\n@param[out] width Where to store the monitor width, or `NULL`.\n@param[out] height Where to store the monitor height, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_workarea\n\n@since Added in version 3.3.\n\n@ingroup monitor","declarations":[{"spell":"2073:14-2073:36|-1|1|1","param_spellings":["2073:50-2073:57","2073:64-2073:68","2073:75-2073:79","2073:86-2073:91","2073:98-2073:104"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":17112376013926017733,"detailed_name":"void glfwGetMonitorPhysicalSize(GLFWmonitor *monitor, int *widthMM, int *heightMM)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the physical size of the monitor.\n\nThis function returns the size, in millimetres, of the display area of the\nspecified monitor.\n\nSome systems do not provide accurate monitor size information, either\nbecause the monitor\n[EDID](https://en.wikipedia.org/wiki/Extended_display_identification_data)\ndata is incorrect or because the driver does not report it accurately.\n\nAny or all of the size arguments may be `NULL`.  If an error occurs, all\nnon-`NULL` size arguments will be set to zero.\n\n@param[in] monitor The monitor to query.\n@param[out] widthMM Where to store the width, in millimetres, of the\nmonitor's display area, or `NULL`.\n@param[out] heightMM Where to store the height, in millimetres, of the\nmonitor's display area, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@remark @win32 calculates the returned physical size from the\ncurrent resolution and system DPI instead of querying the monitor EDID data.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_properties\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"2107:14-2107:40|-1|1|1","param_spellings":["2107:54-2107:61","2107:68-2107:75","2107:82-2107:90"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":8510562982239307010,"detailed_name":"void glfwGetMonitorContentScale(GLFWmonitor *monitor, float *xscale, float *yscale)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the content scale for the specified monitor.\n\nThis function retrieves the content scale for the specified monitor.  The\ncontent scale is the ratio between the current DPI and the platform's\ndefault DPI.  This is especially important for text and any UI elements.  If\nthe pixel dimensions of your UI scaled by this look appropriate on your\nmachine then it should appear at a reasonable size on other machines\nregardless of their DPI and scaling settings.  This relies on the system DPI\nand scaling settings being somewhat correct.\n\nThe content scale may depend on both the monitor resolution and pixel\ndensity and on user settings.  It may be very different from the raw DPI\ncalculated from the physical size and current resolution.\n\n@param[in] monitor The monitor to query.\n@param[out] xscale Where to store the x-axis content scale, or `NULL`.\n@param[out] yscale Where to store the y-axis content scale, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_scale\n@sa @ref glfwGetWindowContentScale\n\n@since Added in version 3.3.\n\n@ingroup monitor","declarations":[{"spell":"2139:14-2139:40|-1|1|1","param_spellings":["2139:54-2139:61","2139:70-2139:76","2139:85-2139:91"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":6953843925989903473,"detailed_name":"const char *glfwGetMonitorName(GLFWmonitor *monitor)","short_name_offset":12,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the name of the specified monitor.\n\nThis function returns a human-readable name, encoded as UTF-8, of the\nspecified monitor.  The name typically reflects the make and model of the\nmonitor and is not guaranteed to be unique among the connected monitors.\n\n@param[in] monitor The monitor to query.\n@return The UTF-8 encoded name of the monitor, or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@pointer_lifetime The returned string is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified monitor is\ndisconnected or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_properties\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"2165:21-2165:39|-1|1|1","param_spellings":["2165:53-2165:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":15991178445379204143,"detailed_name":"void glfwSetMonitorUserPointer(GLFWmonitor *monitor, void *pointer)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the user pointer of the specified monitor.\n\nThis function sets the user-defined pointer of the specified monitor.  The\ncurrent value is retained until the monitor is disconnected.  The initial\nvalue is `NULL`.\n\nThis function may be called from the monitor callback, even for a monitor\nthat is being disconnected.\n\n@param[in] monitor The monitor whose pointer to set.\n@param[in] pointer The new value.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Access is not\nsynchronized.\n\n@sa @ref monitor_userptr\n@sa @ref glfwGetMonitorUserPointer\n\n@since Added in version 3.3.\n\n@ingroup monitor","declarations":[{"spell":"2191:14-2191:39|-1|1|1","param_spellings":["2191:53-2191:60","2191:68-2191:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":15,"usr":4455418014817179876,"detailed_name":"void *glfwGetMonitorUserPointer(GLFWmonitor *monitor)","short_name_offset":6,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the user pointer of the specified monitor.\n\nThis function returns the current value of the user-defined pointer of the\nspecified monitor.  The initial value is `NULL`.\n\nThis function may be called from the monitor callback, even for a monitor\nthat is being disconnected.\n\n@param[in] monitor The monitor whose pointer to return.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Access is not\nsynchronized.\n\n@sa @ref monitor_userptr\n@sa @ref glfwSetMonitorUserPointer\n\n@since Added in version 3.3.\n\n@ingroup monitor","declarations":[{"spell":"2215:15-2215:40|-1|1|1","param_spellings":["2215:54-2215:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":5345782053774976363,"detailed_name":"GLFWmonitorfun glfwSetMonitorCallback(GLFWmonitorfun callback)","short_name_offset":15,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the monitor configuration callback.\n\nThis function sets the monitor configuration callback, or removes the\ncurrently set callback.  This is called when a monitor is connected to or\ndisconnected from the system.\n\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWmonitor* monitor, int event)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWmonitorfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_event\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"2245:24-2245:46|-1|1|1","param_spellings":["2245:62-2245:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":7725479228182446638,"detailed_name":"const GLFWvidmode *glfwGetVideoModes(GLFWmonitor *monitor, int *count)","short_name_offset":19,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the available video modes for the specified monitor.\n\nThis function returns an array of all video modes supported by the specified\nmonitor.  The returned array is sorted in ascending order, first by color\nbit depth (the sum of all channel depths) and then by resolution area (the\nproduct of width and height).\n\n@param[in] monitor The monitor to query.\n@param[out] count Where to store the number of video modes in the returned\narray.  This is set to zero if an error occurred.\n@return An array of video modes, or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The returned array is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified monitor is\ndisconnected, this function is called again for that monitor or the library\nis terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_modes\n@sa @ref glfwGetVideoMode\n\n@since Added in version 1.0.\n@glfw3 Changed to return an array of modes for a specific monitor.\n\n@ingroup monitor","declarations":[{"spell":"2278:28-2278:45|-1|1|1","param_spellings":["2278:59-2278:66","2278:73-2278:78"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":18,"usr":6965356927120506106,"detailed_name":"const GLFWvidmode *glfwGetVideoMode(GLFWmonitor *monitor)","short_name_offset":19,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the current mode of the specified monitor.\n\nThis function returns the current video mode of the specified monitor.  If\nyou have created a full screen window for that monitor, the return value\nwill depend on whether that window is iconified.\n\n@param[in] monitor The monitor to query.\n@return The current mode of the monitor, or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The returned array is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified monitor is\ndisconnected or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_modes\n@sa @ref glfwGetVideoModes\n\n@since Added in version 3.0.  Replaces `glfwGetDesktopMode`.\n\n@ingroup monitor","declarations":[{"spell":"2306:28-2306:44|-1|1|1","param_spellings":["2306:58-2306:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":11374823874517269837,"detailed_name":"void glfwSetGamma(GLFWmonitor *monitor, float gamma)","short_name_offset":5,"short_name_size":12,"kind":12,"storage":1,"hover":"","comments":"@brief Generates a gamma ramp and sets it for the specified monitor.\n\nThis function generates an appropriately sized gamma ramp from the specified\nexponent and then calls @ref glfwSetGammaRamp with it.  The value must be\na finite number greater than zero.\n\nThe software controlled gamma ramp is applied _in addition_ to the hardware\ngamma correction, which today is usually an approximation of sRGB gamma.\nThis means that setting a perfectly linear ramp, or gamma 1.0, will produce\nthe default (usually sRGB-like) behavior.\n\nFor gamma correct rendering with OpenGL or OpenGL ES, see the @ref\nGLFW_SRGB_CAPABLE hint.\n\n@param[in] monitor The monitor whose gamma ramp to set.\n@param[in] gamma The desired exponent.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_VALUE and @ref GLFW_PLATFORM_ERROR.\n\n@remark @wayland Gamma handling is a privileged protocol, this function\nwill thus never be implemented and emits @ref GLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_gamma\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"2339:14-2339:26|-1|1|1","param_spellings":["2339:40-2339:47","2339:55-2339:60"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":20,"usr":14913916640774921910,"detailed_name":"const GLFWgammaramp *glfwGetGammaRamp(GLFWmonitor *monitor)","short_name_offset":21,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the current gamma ramp for the specified monitor.\n\nThis function returns the current gamma ramp of the specified monitor.\n\n@param[in] monitor The monitor to query.\n@return The current gamma ramp, or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @wayland Gamma handling is a privileged protocol, this function\nwill thus never be implemented and emits @ref GLFW_PLATFORM_ERROR while\nreturning `NULL`.\n\n@pointer_lifetime The returned structure and its arrays are allocated and\nfreed by GLFW.  You should not free them yourself.  They are valid until the\nspecified monitor is disconnected, this function is called again for that\nmonitor or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_gamma\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"2369:30-2369:46|-1|1|1","param_spellings":["2369:60-2369:67"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":21,"usr":15509472793387022704,"detailed_name":"void glfwSetGammaRamp(GLFWmonitor *monitor, const GLFWgammaramp *ramp)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the current gamma ramp for the specified monitor.\n\nThis function sets the current gamma ramp for the specified monitor.  The\noriginal gamma ramp for that monitor is saved by GLFW the first time this\nfunction is called and is restored by @ref glfwTerminate.\n\nThe software controlled gamma ramp is applied _in addition_ to the hardware\ngamma correction, which today is usually an approximation of sRGB gamma.\nThis means that setting a perfectly linear ramp, or gamma 1.0, will produce\nthe default (usually sRGB-like) behavior.\n\nFor gamma correct rendering with OpenGL or OpenGL ES, see the @ref\nGLFW_SRGB_CAPABLE hint.\n\n@param[in] monitor The monitor whose gamma ramp to set.\n@param[in] ramp The gamma ramp to use.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark The size of the specified gamma ramp should match the size of the\ncurrent ramp for that monitor.\n\n@remark @win32 The gamma ramp size must be 256.\n\n@remark @wayland Gamma handling is a privileged protocol, this function\nwill thus never be implemented and emits @ref GLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The specified gamma ramp is copied before this function\nreturns.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref monitor_gamma\n\n@since Added in version 3.0.\n\n@ingroup monitor","declarations":[{"spell":"2410:14-2410:30|-1|1|1","param_spellings":["2410:44-2410:51","2410:74-2410:78"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":8715622833643471041,"detailed_name":"void glfwDefaultWindowHints()","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Resets all window hints to their default values.\n\nThis function resets all window hints to their\n[default values](@ref window_hints_values).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_hints\n@sa @ref glfwWindowHint\n@sa @ref glfwWindowHintString\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"2429:14-2429:36|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":15057659947699292954,"detailed_name":"void glfwWindowHint(int hint, int value)","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the specified window hint to the desired value.\n\nThis function sets hints for the next call to @ref glfwCreateWindow.  The\nhints, once set, retain their values until changed by a call to this\nfunction or @ref glfwDefaultWindowHints, or until the library is terminated.\n\nOnly integer value hints can be set with this function.  String value hints\nare set with @ref glfwWindowHintString.\n\nThis function does not check whether the specified hint values are valid.\nIf you set hints to invalid values this will instead be reported by the next\ncall to @ref glfwCreateWindow.\n\nSome hints are platform specific.  These may be set on any platform but they\nwill only affect their specific platform.  Other platforms will ignore them.\nSetting these hints requires no platform specific headers or functions.\n\n@param[in] hint The [window hint](@ref window_hints) to set.\n@param[in] value The new value of the window hint.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_ENUM.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_hints\n@sa @ref glfwWindowHintString\n@sa @ref glfwDefaultWindowHints\n\n@since Added in version 3.0.  Replaces `glfwOpenWindowHint`.\n\n@ingroup window","declarations":[{"spell":"2464:14-2464:28|-1|1|1","param_spellings":["2464:33-2464:37","2464:43-2464:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":6116753138196306853,"detailed_name":"void glfwWindowHintString(int hint, const char *value)","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the specified window hint to the desired value.\n\nThis function sets hints for the next call to @ref glfwCreateWindow.  The\nhints, once set, retain their values until changed by a call to this\nfunction or @ref glfwDefaultWindowHints, or until the library is terminated.\n\nOnly string type hints can be set with this function.  Integer value hints\nare set with @ref glfwWindowHint.\n\nThis function does not check whether the specified hint values are valid.\nIf you set hints to invalid values this will instead be reported by the next\ncall to @ref glfwCreateWindow.\n\nSome hints are platform specific.  These may be set on any platform but they\nwill only affect their specific platform.  Other platforms will ignore them.\nSetting these hints requires no platform specific headers or functions.\n\n@param[in] hint The [window hint](@ref window_hints) to set.\n@param[in] value The new value of the window hint.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_ENUM.\n\n@pointer_lifetime The specified string is copied before this function\nreturns.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_hints\n@sa @ref glfwWindowHint\n@sa @ref glfwDefaultWindowHints\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[{"spell":"2502:14-2502:34|-1|1|1","param_spellings":["2502:39-2502:43","2502:57-2502:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":13859573255131509241,"detailed_name":"GLFWwindow *glfwCreateWindow(int width, int height, const char *title, GLFWmonitor *monitor, GLFWwindow *share)","short_name_offset":12,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Creates a window and its associated context.\n\nThis function creates a window and its associated OpenGL or OpenGL ES\ncontext.  Most of the options controlling how the window and its context\nshould be created are specified with [window hints](@ref window_hints).\n\nSuccessful creation does not change which context is current.  Before you\ncan use the newly created context, you need to\n[make it current](@ref context_current).  For information about the `share`\nparameter, see @ref context_sharing.\n\nThe created window, framebuffer and context may differ from what you\nrequested, as not all parameters and hints are\n[hard constraints](@ref window_hints_hard).  This includes the size of the\nwindow, especially for full screen windows.  To query the actual attributes\nof the created window, framebuffer and context, see @ref\nglfwGetWindowAttrib, @ref glfwGetWindowSize and @ref glfwGetFramebufferSize.\n\nTo create a full screen window, you need to specify the monitor the window\nwill cover.  If no monitor is specified, the window will be windowed mode.\nUnless you have a way for the user to choose a specific monitor, it is\nrecommended that you pick the primary monitor.  For more information on how\nto query connected monitors, see @ref monitor_monitors.\n\nFor full screen windows, the specified size becomes the resolution of the\nwindow's _desired video mode_.  As long as a full screen window is not\niconified, the supported video mode most closely matching the desired video\nmode is set for the specified monitor.  For more information about full\nscreen windows, including the creation of so called _windowed full screen_\nor _borderless full screen_ windows, see @ref window_windowed_full_screen.\n\nOnce you have created the window, you can switch it between windowed and\nfull screen mode with @ref glfwSetWindowMonitor.  This will not affect its\nOpenGL or OpenGL ES context.\n\nBy default, newly created windows use the placement recommended by the\nwindow system.  To create the window at a specific position, make it\ninitially invisible using the [GLFW_VISIBLE](@ref GLFW_VISIBLE_hint) window\nhint, set its [position](@ref window_pos) and then [show](@ref window_hide)\nit.\n\nAs long as at least one full screen window is not iconified, the screensaver\nis prohibited from starting.\n\nWindow systems put limits on window sizes.  Very large or very small window\ndimensions may be overridden by the window system on creation.  Check the\nactual [size](@ref window_size) after creation.\n\nThe [swap interval](@ref buffer_swap) is not set during window creation and\nthe initial value may vary depending on driver settings and defaults.\n\n@param[in] width The desired width, in screen coordinates, of the window.\nThis must be greater than zero.\n@param[in] height The desired height, in screen coordinates, of the window.\nThis must be greater than zero.\n@param[in] title The initial, UTF-8 encoded window title.\n@param[in] monitor The monitor to use for full screen mode, or `NULL` for\nwindowed mode.\n@param[in] share The window whose context to share resources with, or `NULL`\nto not share resources.\n@return The handle of the created window, or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM, @ref GLFW_INVALID_VALUE, @ref GLFW_API_UNAVAILABLE, @ref\nGLFW_VERSION_UNAVAILABLE, @ref GLFW_FORMAT_UNAVAILABLE and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @win32 Window creation will fail if the Microsoft GDI software\nOpenGL implementation is the only one available.\n\n@remark @win32 If the executable has an icon resource named `GLFW_ICON,` it\nwill be set as the initial icon for the window.  If no such icon is present,\nthe `IDI_APPLICATION` icon will be used instead.  To set a different icon,\nsee @ref glfwSetWindowIcon.\n\n@remark @win32 The context to share resources with must not be current on\nany other thread.\n\n@remark @macos The OS only supports forward-compatible core profile contexts\nfor OpenGL versions 3.2 and later.  Before creating an OpenGL context of\nversion 3.2 or later you must set the\n[GLFW_OPENGL_FORWARD_COMPAT](@ref GLFW_OPENGL_FORWARD_COMPAT_hint) and\n[GLFW_OPENGL_PROFILE](@ref GLFW_OPENGL_PROFILE_hint) hints accordingly.\nOpenGL 3.0 and 3.1 contexts are not supported at all on macOS.\n\n@remark @macos The GLFW window has no icon, as it is not a document\nwindow, but the dock icon will be the same as the application bundle's icon.\nFor more information on bundles, see the\n[Bundle Programming Guide](https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/)\nin the Mac Developer Library.\n\n@remark @macos The first time a window is created the menu bar is created.\nIf GLFW finds a `MainMenu.nib` it is loaded and assumed to contain a menu\nbar.  Otherwise a minimal menu bar is created manually with common commands\nlike Hide, Quit and About.  The About entry opens a minimal about dialog\nwith information from the application's bundle.  Menu bar creation can be\ndisabled entirely with the @ref GLFW_COCOA_MENUBAR init hint.\n\n@remark @macos On OS X 10.10 and later the window frame will not be rendered\nat full resolution on Retina displays unless the\n[GLFW_COCOA_RETINA_FRAMEBUFFER](@ref GLFW_COCOA_RETINA_FRAMEBUFFER_hint)\nhint is `GLFW_TRUE` and the `NSHighResolutionCapable` key is enabled in the\napplication bundle's `Info.plist`.  For more information, see\n[High Resolution Guidelines for OS X](https://developer.apple.com/library/mac/documentation/GraphicsAnimation/Conceptual/HighResolutionOSX/Explained/Explained.html)\nin the Mac Developer Library.  The GLFW test and example programs use\na custom `Info.plist` template for this, which can be found as\n`CMake/MacOSXBundleInfo.plist.in` in the source tree.\n\n@remark @macos When activating frame autosaving with\n[GLFW_COCOA_FRAME_NAME](@ref GLFW_COCOA_FRAME_NAME_hint), the specified\nwindow size and position may be overridden by previously saved values.\n\n@remark @x11 Some window managers will not respect the placement of\ninitially hidden windows.\n\n@remark @x11 Due to the asynchronous nature of X11, it may take a moment for\na window to reach its requested state.  This means you may not be able to\nquery the final size, position or other attributes directly after window\ncreation.\n\n@remark @x11 The class part of the `WM_CLASS` window property will by\ndefault be set to the window title passed to this function.  The instance\npart will use the contents of the `RESOURCE_NAME` environment variable, if\npresent and not empty, or fall back to the window title.  Set the\n[GLFW_X11_CLASS_NAME](@ref GLFW_X11_CLASS_NAME_hint) and\n[GLFW_X11_INSTANCE_NAME](@ref GLFW_X11_INSTANCE_NAME_hint) window hints to\noverride this.\n\n@remark @wayland Compositors should implement the xdg-decoration protocol\nfor GLFW to decorate the window properly.  If this protocol isn't\nsupported, or if the compositor prefers client-side decorations, a very\nsimple fallback frame will be drawn using the wp_viewporter protocol.  A\ncompositor can still emit close, maximize or fullscreen events, using for\ninstance a keybind mechanism.  If neither of these protocols is supported,\nthe window won't be decorated.\n\n@remark @wayland A full screen window will not attempt to change the mode,\nno matter what the requested size or refresh rate.\n\n@remark @wayland Screensaver inhibition requires the idle-inhibit protocol\nto be implemented in the user's compositor.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_creation\n@sa @ref glfwDestroyWindow\n\n@since Added in version 3.0.  Replaces `glfwOpenWindow`.\n\n@ingroup window","declarations":[{"spell":"2656:21-2656:37|-1|1|1","param_spellings":["2656:42-2656:47","2656:53-2656:59","2656:73-2656:78","2656:93-2656:100","2656:114-2656:119"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":26,"usr":7090300906893327517,"detailed_name":"void glfwDestroyWindow(GLFWwindow *window)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Destroys the specified window and its context.\n\nThis function destroys the specified window and its context.  On calling\nthis function, no further callbacks will be called for that window.\n\nIf the context of the specified window is current on the main thread, it is\ndetached before being destroyed.\n\n@param[in] window The window to destroy.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@note The context of the specified window must not be current on any other\nthread when this function is called.\n\n@reentrancy This function must not be called from a callback.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_creation\n@sa @ref glfwCreateWindow\n\n@since Added in version 3.0.  Replaces `glfwCloseWindow`.\n\n@ingroup window","declarations":[{"spell":"2685:14-2685:31|-1|1|1","param_spellings":["2685:44-2685:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":27,"usr":11612077625358878776,"detailed_name":"int glfwWindowShouldClose(GLFWwindow *window)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"@brief Checks the close flag of the specified window.\n\nThis function returns the value of the close flag of the specified window.\n\n@param[in] window The window to query.\n@return The value of the close flag.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Access is not\nsynchronized.\n\n@sa @ref window_close\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"2705:13-2705:34|-1|1|1","param_spellings":["2705:47-2705:53"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":28,"usr":15032746998927027963,"detailed_name":"void glfwSetWindowShouldClose(GLFWwindow *window, int value)","short_name_offset":5,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the close flag of the specified window.\n\nThis function sets the value of the close flag of the specified window.\nThis can be used to override the user's attempt to close the window, or\nto signal that it should be closed.\n\n@param[in] window The window whose flag to change.\n@param[in] value The new value.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Access is not\nsynchronized.\n\n@sa @ref window_close\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"2727:14-2727:38|-1|1|1","param_spellings":["2727:51-2727:57","2727:63-2727:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":29,"usr":2082970028145981616,"detailed_name":"void glfwSetWindowTitle(GLFWwindow *window, const char *title)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the title of the specified window.\n\nThis function sets the window title, encoded as UTF-8, of the specified\nwindow.\n\n@param[in] window The window whose title to change.\n@param[in] title The UTF-8 encoded window title.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @macos The window title will not be updated until the next time you\nprocess events.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_title\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[{"spell":"2752:14-2752:32|-1|1|1","param_spellings":["2752:45-2752:51","2752:65-2752:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":12162995243846890884,"detailed_name":"void glfwSetWindowIcon(GLFWwindow *window, int count, const GLFWimage *images)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the icon for the specified window.\n\nThis function sets the icon of the specified window.  If passed an array of\ncandidate images, those of or closest to the sizes desired by the system are\nselected.  If no images are specified, the window reverts to its default\nicon.\n\nThe pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight\nbits per channel with the red channel first.  They are arranged canonically\nas packed sequential rows, starting from the top-left corner.\n\nThe desired image sizes varies depending on platform and system settings.\nThe selected images will be rescaled as needed.  Good sizes include 16x16,\n32x32 and 48x48.\n\n@param[in] window The window whose icon to set.\n@param[in] count The number of images in the specified array, or zero to\nrevert to the default window icon.\n@param[in] images The images to create the icon from.  This is ignored if\ncount is zero.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The specified image data is copied before this function\nreturns.\n\n@remark @macos The GLFW window has no icon, as it is not a document\nwindow, so this function does nothing.  The dock icon will be the same as\nthe application bundle's icon.  For more information on bundles, see the\n[Bundle Programming Guide](https://developer.apple.com/library/mac/documentation/CoreFoundation/Conceptual/CFBundles/)\nin the Mac Developer Library.\n\n@remark @wayland There is no existing protocol to change an icon, the\nwindow will thus inherit the one defined in the application's desktop file.\nThis function always emits @ref GLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_icon\n\n@since Added in version 3.2.\n\n@ingroup window","declarations":[{"spell":"2799:14-2799:31|-1|1|1","param_spellings":["2799:44-2799:50","2799:56-2799:61","2799:80-2799:86"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":15065576860340064749,"detailed_name":"void glfwGetWindowPos(GLFWwindow *window, int *xpos, int *ypos)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the position of the content area of the specified window.\n\nThis function retrieves the position, in screen coordinates, of the\nupper-left corner of the content area of the specified window.\n\nAny or all of the position arguments may be `NULL`.  If an error occurs, all\nnon-`NULL` position arguments will be set to zero.\n\n@param[in] window The window to query.\n@param[out] xpos Where to store the x-coordinate of the upper-left corner of\nthe content area, or `NULL`.\n@param[out] ypos Where to store the y-coordinate of the upper-left corner of\nthe content area, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @wayland There is no way for an application to retrieve the global\nposition of its windows, this function will always emit @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_pos\n@sa @ref glfwSetWindowPos\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"2831:14-2831:30|-1|1|1","param_spellings":["2831:43-2831:49","2831:56-2831:60","2831:67-2831:71"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":3672342650205449784,"detailed_name":"void glfwSetWindowPos(GLFWwindow *window, int xpos, int ypos)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the position of the content area of the specified window.\n\nThis function sets the position, in screen coordinates, of the upper-left\ncorner of the content area of the specified windowed mode window.  If the\nwindow is a full screen window, this function does nothing.\n\n__Do not use this function__ to move an already visible window unless you\nhave very good reasons for doing so, as it will confuse and annoy the user.\n\nThe window manager may put limits on what positions are allowed.  GLFW\ncannot and should not override these limits.\n\n@param[in] window The window to query.\n@param[in] xpos The x-coordinate of the upper-left corner of the content area.\n@param[in] ypos The y-coordinate of the upper-left corner of the content area.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @wayland There is no way for an application to set the global\nposition of its windows, this function will always emit @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_pos\n@sa @ref glfwGetWindowPos\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[{"spell":"2866:14-2866:30|-1|1|1","param_spellings":["2866:43-2866:49","2866:55-2866:59","2866:65-2866:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":15554384029209022631,"detailed_name":"void glfwGetWindowSize(GLFWwindow *window, int *width, int *height)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the size of the content area of the specified window.\n\nThis function retrieves the size, in screen coordinates, of the content area\nof the specified window.  If you wish to retrieve the size of the\nframebuffer of the window in pixels, see @ref glfwGetFramebufferSize.\n\nAny or all of the size arguments may be `NULL`.  If an error occurs, all\nnon-`NULL` size arguments will be set to zero.\n\n@param[in] window The window whose size to retrieve.\n@param[out] width Where to store the width, in screen coordinates, of the\ncontent area, or `NULL`.\n@param[out] height Where to store the height, in screen coordinates, of the\ncontent area, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_size\n@sa @ref glfwSetWindowSize\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[{"spell":"2896:14-2896:31|-1|1|1","param_spellings":["2896:44-2896:50","2896:57-2896:62","2896:69-2896:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":647667468556295986,"detailed_name":"void glfwSetWindowSizeLimits(GLFWwindow *window, int minwidth, int minheight, int maxwidth, int maxheight)","short_name_offset":5,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the size limits of the specified window.\n\nThis function sets the size limits of the content area of the specified\nwindow.  If the window is full screen, the size limits only take effect\nonce it is made windowed.  If the window is not resizable, this function\ndoes nothing.\n\nThe size limits are applied immediately to a windowed mode window and may\ncause it to be resized.\n\nThe maximum dimensions must be greater than or equal to the minimum\ndimensions and all must be greater than or equal to zero.\n\n@param[in] window The window to set limits for.\n@param[in] minwidth The minimum width, in screen coordinates, of the content\narea, or `GLFW_DONT_CARE`.\n@param[in] minheight The minimum height, in screen coordinates, of the\ncontent area, or `GLFW_DONT_CARE`.\n@param[in] maxwidth The maximum width, in screen coordinates, of the content\narea, or `GLFW_DONT_CARE`.\n@param[in] maxheight The maximum height, in screen coordinates, of the\ncontent area, or `GLFW_DONT_CARE`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_VALUE and @ref GLFW_PLATFORM_ERROR.\n\n@remark If you set size limits and an aspect ratio that conflict, the\nresults are undefined.\n\n@remark @wayland The size limits will not be applied until the window is\nactually resized, either by the user or by the compositor.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_sizelimits\n@sa @ref glfwSetWindowAspectRatio\n\n@since Added in version 3.2.\n\n@ingroup window","declarations":[{"spell":"2939:14-2939:37|-1|1|1","param_spellings":["2939:50-2939:56","2939:62-2939:70","2939:76-2939:85","2939:91-2939:99","2939:105-2939:114"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":35,"usr":12063791085712440835,"detailed_name":"void glfwSetWindowAspectRatio(GLFWwindow *window, int numer, int denom)","short_name_offset":5,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the aspect ratio of the specified window.\n\nThis function sets the required aspect ratio of the content area of the\nspecified window.  If the window is full screen, the aspect ratio only takes\neffect once it is made windowed.  If the window is not resizable, this\nfunction does nothing.\n\nThe aspect ratio is specified as a numerator and a denominator and both\nvalues must be greater than zero.  For example, the common 16:9 aspect ratio\nis specified as 16 and 9, respectively.\n\nIf the numerator and denominator is set to `GLFW_DONT_CARE` then the aspect\nratio limit is disabled.\n\nThe aspect ratio is applied immediately to a windowed mode window and may\ncause it to be resized.\n\n@param[in] window The window to set limits for.\n@param[in] numer The numerator of the desired aspect ratio, or\n`GLFW_DONT_CARE`.\n@param[in] denom The denominator of the desired aspect ratio, or\n`GLFW_DONT_CARE`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_VALUE and @ref GLFW_PLATFORM_ERROR.\n\n@remark If you set size limits and an aspect ratio that conflict, the\nresults are undefined.\n\n@remark @wayland The aspect ratio will not be applied until the window is\nactually resized, either by the user or by the compositor.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_sizelimits\n@sa @ref glfwSetWindowSizeLimits\n\n@since Added in version 3.2.\n\n@ingroup window","declarations":[{"spell":"2982:14-2982:38|-1|1|1","param_spellings":["2982:51-2982:57","2982:63-2982:68","2982:74-2982:79"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":3684544736844336336,"detailed_name":"void glfwSetWindowSize(GLFWwindow *window, int width, int height)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the size of the content area of the specified window.\n\nThis function sets the size, in screen coordinates, of the content area of\nthe specified window.\n\nFor full screen windows, this function updates the resolution of its desired\nvideo mode and switches to the video mode closest to it, without affecting\nthe window's context.  As the context is unaffected, the bit depths of the\nframebuffer remain unchanged.\n\nIf you wish to update the refresh rate of the desired video mode in addition\nto its resolution, see @ref glfwSetWindowMonitor.\n\nThe window manager may put limits on what sizes are allowed.  GLFW cannot\nand should not override these limits.\n\n@param[in] window The window to resize.\n@param[in] width The desired width, in screen coordinates, of the window\ncontent area.\n@param[in] height The desired height, in screen coordinates, of the window\ncontent area.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @wayland A full screen window will not attempt to change the mode,\nno matter what the requested size.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_size\n@sa @ref glfwGetWindowSize\n@sa @ref glfwSetWindowMonitor\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[{"spell":"3023:14-3023:31|-1|1|1","param_spellings":["3023:44-3023:50","3023:56-3023:61","3023:67-3023:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":2426104069703172754,"detailed_name":"void glfwGetFramebufferSize(GLFWwindow *window, int *width, int *height)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the size of the framebuffer of the specified window.\n\nThis function retrieves the size, in pixels, of the framebuffer of the\nspecified window.  If you wish to retrieve the size of the window in screen\ncoordinates, see @ref glfwGetWindowSize.\n\nAny or all of the size arguments may be `NULL`.  If an error occurs, all\nnon-`NULL` size arguments will be set to zero.\n\n@param[in] window The window whose framebuffer to query.\n@param[out] width Where to store the width, in pixels, of the framebuffer,\nor `NULL`.\n@param[out] height Where to store the height, in pixels, of the framebuffer,\nor `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_fbsize\n@sa @ref glfwSetFramebufferSizeCallback\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3052:14-3052:36|-1|1|1","param_spellings":["3052:49-3052:55","3052:62-3052:67","3052:74-3052:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":16573436214172854622,"detailed_name":"void glfwGetWindowFrameSize(GLFWwindow *window, int *left, int *top, int *right, int *bottom)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the size of the frame of the window.\n\nThis function retrieves the size, in screen coordinates, of each edge of the\nframe of the specified window.  This size includes the title bar, if the\nwindow has one.  The size of the frame may vary depending on the\n[window-related hints](@ref window_hints_wnd) used to create it.\n\nBecause this function retrieves the size of each window frame edge and not\nthe offset along a particular coordinate axis, the retrieved values will\nalways be zero or positive.\n\nAny or all of the size arguments may be `NULL`.  If an error occurs, all\nnon-`NULL` size arguments will be set to zero.\n\n@param[in] window The window whose frame size to query.\n@param[out] left Where to store the size, in screen coordinates, of the left\nedge of the window frame, or `NULL`.\n@param[out] top Where to store the size, in screen coordinates, of the top\nedge of the window frame, or `NULL`.\n@param[out] right Where to store the size, in screen coordinates, of the\nright edge of the window frame, or `NULL`.\n@param[out] bottom Where to store the size, in screen coordinates, of the\nbottom edge of the window frame, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_size\n\n@since Added in version 3.1.\n\n@ingroup window","declarations":[{"spell":"3089:14-3089:36|-1|1|1","param_spellings":["3089:49-3089:55","3089:62-3089:66","3089:73-3089:76","3089:83-3089:88","3089:95-3089:101"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":11698969030880196044,"detailed_name":"void glfwGetWindowContentScale(GLFWwindow *window, float *xscale, float *yscale)","short_name_offset":5,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the content scale for the specified window.\n\nThis function retrieves the content scale for the specified window.  The\ncontent scale is the ratio between the current DPI and the platform's\ndefault DPI.  This is especially important for text and any UI elements.  If\nthe pixel dimensions of your UI scaled by this look appropriate on your\nmachine then it should appear at a reasonable size on other machines\nregardless of their DPI and scaling settings.  This relies on the system DPI\nand scaling settings being somewhat correct.\n\nOn systems where each monitors can have its own content scale, the window\ncontent scale will depend on which monitor the system considers the window\nto be on.\n\n@param[in] window The window to query.\n@param[out] xscale Where to store the x-axis content scale, or `NULL`.\n@param[out] yscale Where to store the y-axis content scale, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_scale\n@sa @ref glfwSetWindowContentScaleCallback\n@sa @ref glfwGetMonitorContentScale\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[{"spell":"3122:14-3122:39|-1|1|1","param_spellings":["3122:52-3122:58","3122:67-3122:73","3122:82-3122:88"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":3756285739669573769,"detailed_name":"float glfwGetWindowOpacity(GLFWwindow *window)","short_name_offset":6,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the opacity of the whole window.\n\nThis function returns the opacity of the window, including any decorations.\n\nThe opacity (or alpha) value is a positive finite number between zero and\none, where zero is fully transparent and one is fully opaque.  If the system\ndoes not support whole window transparency, this function always returns one.\n\nThe initial opacity value for newly created windows is one.\n\n@param[in] window The window to query.\n@return The opacity value of the specified window.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_transparency\n@sa @ref glfwSetWindowOpacity\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[{"spell":"3149:15-3149:35|-1|1|1","param_spellings":["3149:48-3149:54"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":5873950324387023456,"detailed_name":"void glfwSetWindowOpacity(GLFWwindow *window, float opacity)","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the opacity of the whole window.\n\nThis function sets the opacity of the window, including any decorations.\n\nThe opacity (or alpha) value is a positive finite number between zero and\none, where zero is fully transparent and one is fully opaque.\n\nThe initial opacity value for newly created windows is one.\n\nA window created with framebuffer transparency may not use whole window\ntransparency.  The results of doing this are undefined.\n\n@param[in] window The window to set the opacity for.\n@param[in] opacity The desired opacity of the specified window.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_transparency\n@sa @ref glfwGetWindowOpacity\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[{"spell":"3178:14-3178:34|-1|1|1","param_spellings":["3178:47-3178:53","3178:61-3178:68"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":42,"usr":15746036757712260048,"detailed_name":"void glfwIconifyWindow(GLFWwindow *window)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Iconifies the specified window.\n\nThis function iconifies (minimizes) the specified window if it was\npreviously restored.  If the window is already iconified, this function does\nnothing.\n\nIf the specified window is a full screen window, the original monitor\nresolution is restored until the window is restored.\n\n@param[in] window The window to iconify.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @wayland There is no concept of iconification in wl_shell, this\nfunction will emit @ref GLFW_PLATFORM_ERROR when using this deprecated\nprotocol.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_iconify\n@sa @ref glfwRestoreWindow\n@sa @ref glfwMaximizeWindow\n\n@since Added in version 2.1.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[{"spell":"3209:14-3209:31|-1|1|1","param_spellings":["3209:44-3209:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":43,"usr":910746263256415455,"detailed_name":"void glfwRestoreWindow(GLFWwindow *window)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Restores the specified window.\n\nThis function restores the specified window if it was previously iconified\n(minimized) or maximized.  If the window is already restored, this function\ndoes nothing.\n\nIf the specified window is a full screen window, the resolution chosen for\nthe window is restored on the selected monitor.\n\n@param[in] window The window to restore.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_iconify\n@sa @ref glfwIconifyWindow\n@sa @ref glfwMaximizeWindow\n\n@since Added in version 2.1.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[{"spell":"3236:14-3236:31|-1|1|1","param_spellings":["3236:44-3236:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":44,"usr":879306004944177261,"detailed_name":"void glfwMaximizeWindow(GLFWwindow *window)","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Maximizes the specified window.\n\nThis function maximizes the specified window if it was previously not\nmaximized.  If the window is already maximized, this function does nothing.\n\nIf the specified window is a full screen window, this function does nothing.\n\n@param[in] window The window to maximize.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@par Thread Safety\nThis function may only be called from the main thread.\n\n@sa @ref window_iconify\n@sa @ref glfwIconifyWindow\n@sa @ref glfwRestoreWindow\n\n@since Added in GLFW 3.2.\n\n@ingroup window","declarations":[{"spell":"3261:14-3261:32|-1|1|1","param_spellings":["3261:45-3261:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":2609389695147590520,"detailed_name":"void glfwShowWindow(GLFWwindow *window)","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"@brief Makes the specified window visible.\n\nThis function makes the specified window visible if it was previously\nhidden.  If the window is already visible or is in full screen mode, this\nfunction does nothing.\n\nBy default, windowed mode windows are focused when shown\nSet the [GLFW_FOCUS_ON_SHOW](@ref GLFW_FOCUS_ON_SHOW_hint) window hint\nto change this behavior for all newly created windows, or change the\nbehavior for an existing window with @ref glfwSetWindowAttrib.\n\n@param[in] window The window to make visible.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_hide\n@sa @ref glfwHideWindow\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3288:14-3288:28|-1|1|1","param_spellings":["3288:41-3288:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":46,"usr":7456484638216570544,"detailed_name":"void glfwHideWindow(GLFWwindow *window)","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"@brief Hides the specified window.\n\nThis function hides the specified window if it was previously visible.  If\nthe window is already hidden or is in full screen mode, this function does\nnothing.\n\n@param[in] window The window to hide.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_hide\n@sa @ref glfwShowWindow\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3310:14-3310:28|-1|1|1","param_spellings":["3310:41-3310:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":4456269019599349441,"detailed_name":"void glfwFocusWindow(GLFWwindow *window)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"@brief Brings the specified window to front and sets input focus.\n\nThis function brings the specified window to front and sets input focus.\nThe window should already be visible and not iconified.\n\nBy default, both windowed and full screen mode windows are focused when\ninitially created.  Set the [GLFW_FOCUSED](@ref GLFW_FOCUSED_hint) to\ndisable this behavior.\n\nAlso by default, windowed mode windows are focused when shown\nwith @ref glfwShowWindow. Set the\n[GLFW_FOCUS_ON_SHOW](@ref GLFW_FOCUS_ON_SHOW_hint) to disable this behavior.\n\n__Do not use this function__ to steal focus from other applications unless\nyou are certain that is what the user wants.  Focus stealing can be\nextremely disruptive.\n\nFor a less disruptive way of getting the user's attention, see\n[attention requests](@ref window_attention).\n\n@param[in] window The window to give input focus.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @wayland It is not possible for an application to bring its windows\nto front, this function will always emit @ref GLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_focus\n@sa @ref window_attention\n\n@since Added in version 3.2.\n\n@ingroup window","declarations":[{"spell":"3349:14-3349:29|-1|1|1","param_spellings":["3349:42-3349:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":48,"usr":15472559441059904207,"detailed_name":"void glfwRequestWindowAttention(GLFWwindow *window)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Requests user attention to the specified window.\n\nThis function requests user attention to the specified window.  On\nplatforms where this is not supported, attention is requested to the\napplication as a whole.\n\nOnce the user has given attention, usually by focusing the window or\napplication, the system will end the request automatically.\n\n@param[in] window The window to request attention to.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @macos Attention is requested to the application as a whole, not the\nspecific window.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_attention\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[{"spell":"3376:14-3376:40|-1|1|1","param_spellings":["3376:53-3376:59"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":1892397689019954795,"detailed_name":"GLFWmonitor *glfwGetWindowMonitor(GLFWwindow *window)","short_name_offset":13,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the monitor that the window uses for full screen mode.\n\nThis function returns the handle of the monitor that the specified window is\nin full screen on.\n\n@param[in] window The window to query.\n@return The monitor, or `NULL` if the window is in windowed mode or an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_monitor\n@sa @ref glfwSetWindowMonitor\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3398:22-3398:42|-1|1|1","param_spellings":["3398:55-3398:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":50,"usr":9468121532593556779,"detailed_name":"void glfwSetWindowMonitor(GLFWwindow *window, GLFWmonitor *monitor, int xpos, int ypos, int width, int height, int refreshRate)","short_name_offset":5,"short_name_size":20,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the mode, monitor, video mode and placement of a window.\n\nThis function sets the monitor that the window uses for full screen mode or,\nif the monitor is `NULL`, makes it windowed mode.\n\nWhen setting a monitor, this function updates the width, height and refresh\nrate of the desired video mode and switches to the video mode closest to it.\nThe window position is ignored when setting a monitor.\n\nWhen the monitor is `NULL`, the position, width and height are used to\nplace the window content area.  The refresh rate is ignored when no monitor\nis specified.\n\nIf you only wish to update the resolution of a full screen window or the\nsize of a windowed mode window, see @ref glfwSetWindowSize.\n\nWhen a window transitions from full screen to windowed mode, this function\nrestores any previous window settings such as whether it is decorated,\nfloating, resizable, has size or aspect ratio limits, etc.\n\n@param[in] window The window whose monitor, size or video mode to set.\n@param[in] monitor The desired monitor, or `NULL` to set windowed mode.\n@param[in] xpos The desired x-coordinate of the upper-left corner of the\ncontent area.\n@param[in] ypos The desired y-coordinate of the upper-left corner of the\ncontent area.\n@param[in] width The desired with, in screen coordinates, of the content\narea or video mode.\n@param[in] height The desired height, in screen coordinates, of the content\narea or video mode.\n@param[in] refreshRate The desired refresh rate, in Hz, of the video mode,\nor `GLFW_DONT_CARE`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark The OpenGL or OpenGL ES context will not be destroyed or otherwise\naffected by any resizing or mode switching, although you may need to update\nyour viewport if the framebuffer size has changed.\n\n@remark @wayland The desired window position is ignored, as there is no way\nfor an application to set this property.\n\n@remark @wayland Setting the window to full screen will not attempt to\nchange the mode, no matter what the requested size or refresh rate.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_monitor\n@sa @ref window_full_screen\n@sa @ref glfwGetWindowMonitor\n@sa @ref glfwSetWindowSize\n\n@since Added in version 3.2.\n\n@ingroup window","declarations":[{"spell":"3457:14-3457:34|-1|1|1","param_spellings":["3457:47-3457:53","3457:68-3457:75","3457:81-3457:85","3457:91-3457:95","3457:101-3457:106","3457:112-3457:118","3457:124-3457:135"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":51,"usr":9746198455694679694,"detailed_name":"int glfwGetWindowAttrib(GLFWwindow *window, int attrib)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Returns an attribute of the specified window.\n\nThis function returns the value of an attribute of the specified window or\nits OpenGL or OpenGL ES context.\n\n@param[in] window The window to query.\n@param[in] attrib The [window attribute](@ref window_attribs) whose value to\nreturn.\n@return The value of the attribute, or zero if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@remark Framebuffer related hints are not window attributes.  See @ref\nwindow_attribs_fb for more information.\n\n@remark Zero is a valid value for many window and context related\nattributes so you cannot use a return value of zero as an indication of\nerrors.  However, this function should not fail as long as it is passed\nvalid arguments and the library has been [initialized](@ref intro_init).\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_attribs\n@sa @ref glfwSetWindowAttrib\n\n@since Added in version 3.0.  Replaces `glfwGetWindowParam` and\n`glfwGetGLVersion`.\n\n@ingroup window","declarations":[{"spell":"3491:13-3491:32|-1|1|1","param_spellings":["3491:45-3491:51","3491:57-3491:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":52,"usr":8885828247648874944,"detailed_name":"void glfwSetWindowAttrib(GLFWwindow *window, int attrib, int value)","short_name_offset":5,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Sets an attribute of the specified window.\n\nThis function sets the value of an attribute of the specified window.\n\nThe supported attributes are [GLFW_DECORATED](@ref GLFW_DECORATED_attrib),\n[GLFW_RESIZABLE](@ref GLFW_RESIZABLE_attrib),\n[GLFW_FLOATING](@ref GLFW_FLOATING_attrib),\n[GLFW_AUTO_ICONIFY](@ref GLFW_AUTO_ICONIFY_attrib) and\n[GLFW_FOCUS_ON_SHOW](@ref GLFW_FOCUS_ON_SHOW_attrib).\n\nSome of these attributes are ignored for full screen windows.  The new\nvalue will take effect if the window is later made windowed.\n\nSome of these attributes are ignored for windowed mode windows.  The new\nvalue will take effect if the window is later made full screen.\n\n@param[in] window The window to set the attribute for.\n@param[in] attrib A supported window attribute.\n@param[in] value `GLFW_TRUE` or `GLFW_FALSE`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM, @ref GLFW_INVALID_VALUE and @ref GLFW_PLATFORM_ERROR.\n\n@remark Calling @ref glfwGetWindowAttrib will always return the latest\nvalue, even if that value is ignored by the current mode of the window.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_attribs\n@sa @ref glfwGetWindowAttrib\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[{"spell":"3528:14-3528:33|-1|1|1","param_spellings":["3528:46-3528:52","3528:58-3528:64","3528:70-3528:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":13112067443623433741,"detailed_name":"void glfwSetWindowUserPointer(GLFWwindow *window, void *pointer)","short_name_offset":5,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the user pointer of the specified window.\n\nThis function sets the user-defined pointer of the specified window.  The\ncurrent value is retained until the window is destroyed.  The initial value\nis `NULL`.\n\n@param[in] window The window whose pointer to set.\n@param[in] pointer The new value.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Access is not\nsynchronized.\n\n@sa @ref window_userptr\n@sa @ref glfwGetWindowUserPointer\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3551:14-3551:38|-1|1|1","param_spellings":["3551:51-3551:57","3551:65-3551:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":54,"usr":1724721491383499970,"detailed_name":"void *glfwGetWindowUserPointer(GLFWwindow *window)","short_name_offset":6,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the user pointer of the specified window.\n\nThis function returns the current value of the user-defined pointer of the\nspecified window.  The initial value is `NULL`.\n\n@param[in] window The window whose pointer to return.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Access is not\nsynchronized.\n\n@sa @ref window_userptr\n@sa @ref glfwSetWindowUserPointer\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3572:15-3572:39|-1|1|1","param_spellings":["3572:52-3572:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":55,"usr":6343525017801620209,"detailed_name":"GLFWwindowposfun glfwSetWindowPosCallback(GLFWwindow *window, GLFWwindowposfun callback)","short_name_offset":17,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the position callback for the specified window.\n\nThis function sets the position callback of the specified window, which is\ncalled when the window is moved.  The callback is provided with the\nposition, in screen coordinates, of the upper-left corner of the content\narea of the window.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int xpos, int ypos)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWwindowposfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@remark @wayland This callback will never be called, as there is no way for\nan application to know its global position.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_pos\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3607:26-3607:50|-1|1|1","param_spellings":["3607:63-3607:69","3607:88-3607:96"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":56,"usr":2909231796697929161,"detailed_name":"GLFWwindowsizefun glfwSetWindowSizeCallback(GLFWwindow *window, GLFWwindowsizefun callback)","short_name_offset":18,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the size callback for the specified window.\n\nThis function sets the size callback of the specified window, which is\ncalled when the window is resized.  The callback is provided with the size,\nin screen coordinates, of the content area of the window.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int width, int height)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWwindowsizefun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_size\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter and return value.\n\n@ingroup window","declarations":[{"spell":"3639:27-3639:52|-1|1|1","param_spellings":["3639:65-3639:71","3639:91-3639:99"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":57,"usr":16653743838621318264,"detailed_name":"GLFWwindowclosefun glfwSetWindowCloseCallback(GLFWwindow *window, GLFWwindowclosefun callback)","short_name_offset":19,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the close callback for the specified window.\n\nThis function sets the close callback of the specified window, which is\ncalled when the user attempts to close the window, for example by clicking\nthe close widget in the title bar.\n\nThe close flag is set before this callback is called, but you can modify it\nat any time with @ref glfwSetWindowShouldClose.\n\nThe close callback is not triggered by @ref glfwDestroyWindow.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWwindowclosefun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@remark @macos Selecting Quit from the application menu will trigger the\nclose callback for all windows.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_close\n\n@since Added in version 2.5.\n@glfw3 Added window handle parameter and return value.\n\n@ingroup window","declarations":[{"spell":"3679:28-3679:54|-1|1|1","param_spellings":["3679:67-3679:73","3679:94-3679:102"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":15837896050815860957,"detailed_name":"GLFWwindowrefreshfun glfwSetWindowRefreshCallback(GLFWwindow *window, GLFWwindowrefreshfun callback)","short_name_offset":21,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the refresh callback for the specified window.\n\nThis function sets the refresh callback of the specified window, which is\ncalled when the content area of the window needs to be redrawn, for example\nif the window has been exposed after having been covered by another window.\n\nOn compositing window systems such as Aero, Compiz, Aqua or Wayland, where\nthe window contents are saved off-screen, this callback may be called only\nvery infrequently or never at all.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window);\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWwindowrefreshfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_refresh\n\n@since Added in version 2.5.\n@glfw3 Added window handle parameter and return value.\n\n@ingroup window","declarations":[{"spell":"3715:30-3715:58|-1|1|1","param_spellings":["3715:71-3715:77","3715:100-3715:108"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":9958329213492237131,"detailed_name":"GLFWwindowfocusfun glfwSetWindowFocusCallback(GLFWwindow *window, GLFWwindowfocusfun callback)","short_name_offset":19,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the focus callback for the specified window.\n\nThis function sets the focus callback of the specified window, which is\ncalled when the window gains or loses input focus.\n\nAfter the focus callback is called for a window that lost input focus,\nsynthetic key and mouse button release events will be generated for all such\nthat had been pressed.  For more information, see @ref glfwSetKeyCallback\nand @ref glfwSetMouseButtonCallback.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int focused)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWwindowfocusfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_focus\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3750:28-3750:54|-1|1|1","param_spellings":["3750:67-3750:73","3750:94-3750:102"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":3668428655037833053,"detailed_name":"GLFWwindowiconifyfun glfwSetWindowIconifyCallback(GLFWwindow *window, GLFWwindowiconifyfun callback)","short_name_offset":21,"short_name_size":28,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the iconify callback for the specified window.\n\nThis function sets the iconification callback of the specified window, which\nis called when the window is iconified or restored.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int iconified)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWwindowiconifyfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@remark @wayland The wl_shell protocol has no concept of iconification,\nthis callback will never be called when using this deprecated protocol.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_iconify\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3783:30-3783:58|-1|1|1","param_spellings":["3783:71-3783:77","3783:100-3783:108"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":10066803378635062909,"detailed_name":"GLFWwindowmaximizefun glfwSetWindowMaximizeCallback(GLFWwindow *window, GLFWwindowmaximizefun callback)","short_name_offset":22,"short_name_size":29,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the maximize callback for the specified window.\n\nThis function sets the maximization callback of the specified window, which\nis called when the window is maximized or restored.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int maximized)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWwindowmaximizefun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_maximize\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[{"spell":"3813:31-3813:60|-1|1|1","param_spellings":["3813:73-3813:79","3813:103-3813:111"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":16051982991761562235,"detailed_name":"GLFWframebuffersizefun glfwSetFramebufferSizeCallback(GLFWwindow *window, GLFWframebuffersizefun callback)","short_name_offset":23,"short_name_size":30,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the framebuffer resize callback for the specified window.\n\nThis function sets the framebuffer resize callback of the specified window,\nwhich is called when the framebuffer of the specified window is resized.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int width, int height)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWframebuffersizefun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_fbsize\n\n@since Added in version 3.0.\n\n@ingroup window","declarations":[{"spell":"3843:32-3843:62|-1|1|1","param_spellings":["3843:75-3843:81","3843:106-3843:114"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":18363989721389724092,"detailed_name":"GLFWwindowcontentscalefun glfwSetWindowContentScaleCallback(GLFWwindow *window, GLFWwindowcontentscalefun callback)","short_name_offset":26,"short_name_size":33,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the window content scale callback for the specified window.\n\nThis function sets the window content scale callback of the specified window,\nwhich is called when the content scale of the specified window changes.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, float xscale, float yscale)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWwindowcontentscalefun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref window_scale\n@sa @ref glfwGetWindowContentScale\n\n@since Added in version 3.3.\n\n@ingroup window","declarations":[{"spell":"3874:35-3874:68|-1|1|1","param_spellings":["3874:81-3874:87","3874:115-3874:123"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":4512648386439706739,"detailed_name":"void glfwPollEvents()","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"@brief Processes all pending events.\n\nThis function processes only those events that are already in the event\nqueue and then returns immediately.  Processing events will cause the window\nand input callbacks associated with those events to be called.\n\nOn some platforms, a window move, resize or menu operation will cause event\nprocessing to block.  This is due to how event processing is designed on\nthose platforms.  You can use the\n[window refresh callback](@ref window_refresh) to redraw the contents of\nyour window when necessary during such operations.\n\nDo not assume that callbacks you set will _only_ be called in response to\nevent processing functions like this one.  While it is necessary to poll for\nevents, window systems that require GLFW to register callbacks of its own\ncan pass events to GLFW in response to many window system function calls.\nGLFW will pass those events on to the application callbacks before\nreturning.\n\nEvent processing is not required for joystick input to work.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@reentrancy This function must not be called from a callback.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref events\n@sa @ref glfwWaitEvents\n@sa @ref glfwWaitEventsTimeout\n\n@since Added in version 1.0.\n\n@ingroup window","declarations":[{"spell":"3912:14-3912:28|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":13207269505269869391,"detailed_name":"void glfwWaitEvents()","short_name_offset":5,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"@brief Waits until events are queued and processes them.\n\nThis function puts the calling thread to sleep until at least one event is\navailable in the event queue.  Once one or more events are available,\nit behaves exactly like @ref glfwPollEvents, i.e. the events in the queue\nare processed and the function then returns immediately.  Processing events\nwill cause the window and input callbacks associated with those events to be\ncalled.\n\nSince not all events are associated with callbacks, this function may return\nwithout a callback having been called even if you are monitoring all\ncallbacks.\n\nOn some platforms, a window move, resize or menu operation will cause event\nprocessing to block.  This is due to how event processing is designed on\nthose platforms.  You can use the\n[window refresh callback](@ref window_refresh) to redraw the contents of\nyour window when necessary during such operations.\n\nDo not assume that callbacks you set will _only_ be called in response to\nevent processing functions like this one.  While it is necessary to poll for\nevents, window systems that require GLFW to register callbacks of its own\ncan pass events to GLFW in response to many window system function calls.\nGLFW will pass those events on to the application callbacks before\nreturning.\n\nEvent processing is not required for joystick input to work.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@reentrancy This function must not be called from a callback.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref events\n@sa @ref glfwPollEvents\n@sa @ref glfwWaitEventsTimeout\n\n@since Added in version 2.5.\n\n@ingroup window","declarations":[{"spell":"3957:14-3957:28|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":66,"usr":7093751810751456924,"detailed_name":"void glfwWaitEventsTimeout(double timeout)","short_name_offset":5,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"@brief Waits with timeout until events are queued and processes them.\n\nThis function puts the calling thread to sleep until at least one event is\navailable in the event queue, or until the specified timeout is reached.  If\none or more events are available, it behaves exactly like @ref\nglfwPollEvents, i.e. the events in the queue are processed and the function\nthen returns immediately.  Processing events will cause the window and input\ncallbacks associated with those events to be called.\n\nThe timeout value must be a positive finite number.\n\nSince not all events are associated with callbacks, this function may return\nwithout a callback having been called even if you are monitoring all\ncallbacks.\n\nOn some platforms, a window move, resize or menu operation will cause event\nprocessing to block.  This is due to how event processing is designed on\nthose platforms.  You can use the\n[window refresh callback](@ref window_refresh) to redraw the contents of\nyour window when necessary during such operations.\n\nDo not assume that callbacks you set will _only_ be called in response to\nevent processing functions like this one.  While it is necessary to poll for\nevents, window systems that require GLFW to register callbacks of its own\ncan pass events to GLFW in response to many window system function calls.\nGLFW will pass those events on to the application callbacks before\nreturning.\n\nEvent processing is not required for joystick input to work.\n\n@param[in] timeout The maximum amount of time, in seconds, to wait.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_VALUE and @ref GLFW_PLATFORM_ERROR.\n\n@reentrancy This function must not be called from a callback.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref events\n@sa @ref glfwPollEvents\n@sa @ref glfwWaitEvents\n\n@since Added in version 3.2.\n\n@ingroup window","declarations":[{"spell":"4006:14-4006:35|-1|1|1","param_spellings":["4006:43-4006:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":67,"usr":16864176419637925956,"detailed_name":"void glfwPostEmptyEvent()","short_name_offset":5,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Posts an empty event to the event queue.\n\nThis function posts an empty event from the current thread to the event\nqueue, causing @ref glfwWaitEvents or @ref glfwWaitEventsTimeout to return.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref events\n@sa @ref glfwWaitEvents\n@sa @ref glfwWaitEventsTimeout\n\n@since Added in version 3.1.\n\n@ingroup window","declarations":[{"spell":"4026:14-4026:32|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":68,"usr":17755677127528853141,"detailed_name":"int glfwGetInputMode(GLFWwindow *window, int mode)","short_name_offset":4,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the value of an input option for the specified window.\n\nThis function returns the value of an input option for the specified window.\nThe mode must be one of @ref GLFW_CURSOR, @ref GLFW_STICKY_KEYS,\n@ref GLFW_STICKY_MOUSE_BUTTONS, @ref GLFW_LOCK_KEY_MODS or\n@ref GLFW_RAW_MOUSE_MOTION.\n\n@param[in] window The window to query.\n@param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS`,\n`GLFW_STICKY_MOUSE_BUTTONS`, `GLFW_LOCK_KEY_MODS` or\n`GLFW_RAW_MOUSE_MOTION`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_ENUM.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref glfwSetInputMode\n\n@since Added in version 3.0.\n\n@ingroup input","declarations":[{"spell":"4051:13-4051:29|-1|1|1","param_spellings":["4051:42-4051:48","4051:54-4051:58"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":69,"usr":12126814856844257305,"detailed_name":"void glfwSetInputMode(GLFWwindow *window, int mode, int value)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Sets an input option for the specified window.\n\nThis function sets an input mode option for the specified window.  The mode\nmust be one of @ref GLFW_CURSOR, @ref GLFW_STICKY_KEYS,\n@ref GLFW_STICKY_MOUSE_BUTTONS, @ref GLFW_LOCK_KEY_MODS or\n@ref GLFW_RAW_MOUSE_MOTION.\n\nIf the mode is `GLFW_CURSOR`, the value must be one of the following cursor\nmodes:\n- `GLFW_CURSOR_NORMAL` makes the cursor visible and behaving normally.\n- `GLFW_CURSOR_HIDDEN` makes the cursor invisible when it is over the\n  content area of the window but does not restrict the cursor from leaving.\n- `GLFW_CURSOR_DISABLED` hides and grabs the cursor, providing virtual\n  and unlimited cursor movement.  This is useful for implementing for\n  example 3D camera controls.\n\nIf the mode is `GLFW_STICKY_KEYS`, the value must be either `GLFW_TRUE` to\nenable sticky keys, or `GLFW_FALSE` to disable it.  If sticky keys are\nenabled, a key press will ensure that @ref glfwGetKey returns `GLFW_PRESS`\nthe next time it is called even if the key had been released before the\ncall.  This is useful when you are only interested in whether keys have been\npressed but not when or in which order.\n\nIf the mode is `GLFW_STICKY_MOUSE_BUTTONS`, the value must be either\n`GLFW_TRUE` to enable sticky mouse buttons, or `GLFW_FALSE` to disable it.\nIf sticky mouse buttons are enabled, a mouse button press will ensure that\n@ref glfwGetMouseButton returns `GLFW_PRESS` the next time it is called even\nif the mouse button had been released before the call.  This is useful when\nyou are only interested in whether mouse buttons have been pressed but not\nwhen or in which order.\n\nIf the mode is `GLFW_LOCK_KEY_MODS`, the value must be either `GLFW_TRUE` to\nenable lock key modifier bits, or `GLFW_FALSE` to disable them.  If enabled,\ncallbacks that receive modifier bits will also have the @ref\nGLFW_MOD_CAPS_LOCK bit set when the event was generated with Caps Lock on,\nand the @ref GLFW_MOD_NUM_LOCK bit when Num Lock was on.\n\nIf the mode is `GLFW_RAW_MOUSE_MOTION`, the value must be either `GLFW_TRUE`\nto enable raw (unscaled and unaccelerated) mouse motion when the cursor is\ndisabled, or `GLFW_FALSE` to disable it.  If raw motion is not supported,\nattempting to set this will emit @ref GLFW_PLATFORM_ERROR.  Call @ref\nglfwRawMouseMotionSupported to check for support.\n\n@param[in] window The window whose input mode to set.\n@param[in] mode One of `GLFW_CURSOR`, `GLFW_STICKY_KEYS`,\n`GLFW_STICKY_MOUSE_BUTTONS`, `GLFW_LOCK_KEY_MODS` or\n`GLFW_RAW_MOUSE_MOTION`.\n@param[in] value The new value of the specified input mode.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref glfwGetInputMode\n\n@since Added in version 3.0.  Replaces `glfwEnable` and `glfwDisable`.\n\n@ingroup input","declarations":[{"spell":"4113:14-4113:30|-1|1|1","param_spellings":["4113:43-4113:49","4113:55-4113:59","4113:65-4113:70"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":70,"usr":7797599141316096445,"detailed_name":"int glfwRawMouseMotionSupported()","short_name_offset":4,"short_name_size":27,"kind":12,"storage":1,"hover":"","comments":"@brief Returns whether raw mouse motion is supported.\n\nThis function returns whether raw mouse motion is supported on the current\nsystem.  This status does not change after GLFW has been initialized so you\nonly need to check this once.  If you attempt to enable raw motion on\na system that does not support it, @ref GLFW_PLATFORM_ERROR will be emitted.\n\nRaw mouse motion is closer to the actual motion of the mouse across\na surface.  It is not affected by the scaling and acceleration applied to\nthe motion of the desktop cursor.  That processing is suitable for a cursor\nwhile raw motion is better for controlling for example a 3D camera.  Because\nof this, raw mouse motion is only provided when the cursor is disabled.\n\n@return `GLFW_TRUE` if raw mouse motion is supported on the current machine,\nor `GLFW_FALSE` otherwise.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref raw_mouse_motion\n@sa @ref glfwSetInputMode\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"4142:13-4142:40|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":71,"usr":14574172101870740782,"detailed_name":"const char *glfwGetKeyName(int key, int scancode)","short_name_offset":12,"short_name_size":14,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the layout-specific name of the specified printable key.\n\nThis function returns the name of the specified printable key, encoded as\nUTF-8.  This is typically the character that key would produce without any\nmodifier keys, intended for displaying key bindings to the user.  For dead\nkeys, it is typically the diacritic it would add to a character.\n\n__Do not use this function__ for [text input](@ref input_char).  You will\nbreak text input for many languages even if it happens to work for yours.\n\nIf the key is `GLFW_KEY_UNKNOWN`, the scancode is used to identify the key,\notherwise the scancode is ignored.  If you specify a non-printable key, or\n`GLFW_KEY_UNKNOWN` and a scancode that maps to a non-printable key, this\nfunction returns `NULL` but does not emit an error.\n\nThis behavior allows you to always pass in the arguments in the\n[key callback](@ref input_key) without modification.\n\nThe printable keys are:\n- `GLFW_KEY_APOSTROPHE`\n- `GLFW_KEY_COMMA`\n- `GLFW_KEY_MINUS`\n- `GLFW_KEY_PERIOD`\n- `GLFW_KEY_SLASH`\n- `GLFW_KEY_SEMICOLON`\n- `GLFW_KEY_EQUAL`\n- `GLFW_KEY_LEFT_BRACKET`\n- `GLFW_KEY_RIGHT_BRACKET`\n- `GLFW_KEY_BACKSLASH`\n- `GLFW_KEY_WORLD_1`\n- `GLFW_KEY_WORLD_2`\n- `GLFW_KEY_0` to `GLFW_KEY_9`\n- `GLFW_KEY_A` to `GLFW_KEY_Z`\n- `GLFW_KEY_KP_0` to `GLFW_KEY_KP_9`\n- `GLFW_KEY_KP_DECIMAL`\n- `GLFW_KEY_KP_DIVIDE`\n- `GLFW_KEY_KP_MULTIPLY`\n- `GLFW_KEY_KP_SUBTRACT`\n- `GLFW_KEY_KP_ADD`\n- `GLFW_KEY_KP_EQUAL`\n\nNames for printable keys depend on keyboard layout, while names for\nnon-printable keys are the same across layouts but depend on the application\nlanguage and should be localized along with other user interface text.\n\n@param[in] key The key to query, or `GLFW_KEY_UNKNOWN`.\n@param[in] scancode The scancode of the key to query.\n@return The UTF-8 encoded, layout-specific name of the key, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark The contents of the returned string may change when a keyboard\nlayout change event is received.\n\n@pointer_lifetime The returned string is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref input_key_name\n\n@since Added in version 3.2.\n\n@ingroup input","declarations":[{"spell":"4210:21-4210:35|-1|1|1","param_spellings":["4210:40-4210:43","4210:49-4210:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":72,"usr":2955309050696891282,"detailed_name":"int glfwGetKeyScancode(int key)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the platform-specific scancode of the specified key.\n\nThis function returns the platform-specific scancode of the specified key.\n\nIf the key is `GLFW_KEY_UNKNOWN` or does not exist on the keyboard this\nmethod will return `-1`.\n\n@param[in] key Any [named key](@ref keys).\n@return The platform-specific scancode for the key, or `-1` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref input_key\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"4234:13-4234:31|-1|1|1","param_spellings":["4234:36-4234:39"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":73,"usr":15839783730752355058,"detailed_name":"int glfwGetKey(GLFWwindow *window, int key)","short_name_offset":4,"short_name_size":10,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the last reported state of a keyboard key for the specified\nwindow.\n\nThis function returns the last state reported for the specified key to the\nspecified window.  The returned state is one of `GLFW_PRESS` or\n`GLFW_RELEASE`.  The higher-level action `GLFW_REPEAT` is only reported to\nthe key callback.\n\nIf the @ref GLFW_STICKY_KEYS input mode is enabled, this function returns\n`GLFW_PRESS` the first time you call it for a key that was pressed, even if\nthat key has already been released.\n\nThe key functions deal with physical keys, with [key tokens](@ref keys)\nnamed after their use on the standard US keyboard layout.  If you want to\ninput text, use the Unicode character callback instead.\n\nThe [modifier key bit masks](@ref mods) are not key tokens and cannot be\nused with this function.\n\n__Do not use this function__ to implement [text input](@ref input_char).\n\n@param[in] window The desired window.\n@param[in] key The desired [keyboard key](@ref keys).  `GLFW_KEY_UNKNOWN` is\nnot a valid key for this function.\n@return One of `GLFW_PRESS` or `GLFW_RELEASE`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_ENUM.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref input_key\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter.\n\n@ingroup input","declarations":[{"spell":"4274:13-4274:23|-1|1|1","param_spellings":["4274:36-4274:42","4274:48-4274:51"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":74,"usr":12540279982890112242,"detailed_name":"int glfwGetMouseButton(GLFWwindow *window, int button)","short_name_offset":4,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the last reported state of a mouse button for the specified\nwindow.\n\nThis function returns the last state reported for the specified mouse button\nto the specified window.  The returned state is one of `GLFW_PRESS` or\n`GLFW_RELEASE`.\n\nIf the @ref GLFW_STICKY_MOUSE_BUTTONS input mode is enabled, this function\nreturns `GLFW_PRESS` the first time you call it for a mouse button that was\npressed, even if that mouse button has already been released.\n\n@param[in] window The desired window.\n@param[in] button The desired [mouse button](@ref buttons).\n@return One of `GLFW_PRESS` or `GLFW_RELEASE`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_ENUM.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref input_mouse_button\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter.\n\n@ingroup input","declarations":[{"spell":"4303:13-4303:31|-1|1|1","param_spellings":["4303:44-4303:50","4303:56-4303:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":75,"usr":14726870375753501340,"detailed_name":"void glfwGetCursorPos(GLFWwindow *window, double *xpos, double *ypos)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the position of the cursor relative to the content area of\nthe window.\n\nThis function returns the position of the cursor, in screen coordinates,\nrelative to the upper-left corner of the content area of the specified\nwindow.\n\nIf the cursor is disabled (with `GLFW_CURSOR_DISABLED`) then the cursor\nposition is unbounded and limited only by the minimum and maximum values of\na `double`.\n\nThe coordinate can be converted to their integer equivalents with the\n`floor` function.  Casting directly to an integer type works for positive\ncoordinates, but fails for negative ones.\n\nAny or all of the position arguments may be `NULL`.  If an error occurs, all\nnon-`NULL` position arguments will be set to zero.\n\n@param[in] window The desired window.\n@param[out] xpos Where to store the cursor x-coordinate, relative to the\nleft edge of the content area, or `NULL`.\n@param[out] ypos Where to store the cursor y-coordinate, relative to the to\ntop edge of the content area, or `NULL`.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref cursor_pos\n@sa @ref glfwSetCursorPos\n\n@since Added in version 3.0.  Replaces `glfwGetMousePos`.\n\n@ingroup input","declarations":[{"spell":"4341:14-4341:30|-1|1|1","param_spellings":["4341:43-4341:49","4341:59-4341:63","4341:73-4341:77"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":76,"usr":4834677798317973599,"detailed_name":"void glfwSetCursorPos(GLFWwindow *window, double xpos, double ypos)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the position of the cursor, relative to the content area of the\nwindow.\n\nThis function sets the position, in screen coordinates, of the cursor\nrelative to the upper-left corner of the content area of the specified\nwindow.  The window must have input focus.  If the window does not have\ninput focus when this function is called, it fails silently.\n\n__Do not use this function__ to implement things like camera controls.  GLFW\nalready provides the `GLFW_CURSOR_DISABLED` cursor mode that hides the\ncursor, transparently re-centers it and provides unconstrained cursor\nmotion.  See @ref glfwSetInputMode for more information.\n\nIf the cursor mode is `GLFW_CURSOR_DISABLED` then the cursor position is\nunconstrained and limited only by the minimum and maximum values of\na `double`.\n\n@param[in] window The desired window.\n@param[in] xpos The desired x-coordinate, relative to the left edge of the\ncontent area.\n@param[in] ypos The desired y-coordinate, relative to the top edge of the\ncontent area.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@remark @wayland This function will only work when the cursor mode is\n`GLFW_CURSOR_DISABLED`, otherwise it will do nothing.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref cursor_pos\n@sa @ref glfwGetCursorPos\n\n@since Added in version 3.0.  Replaces `glfwSetMousePos`.\n\n@ingroup input","declarations":[{"spell":"4381:14-4381:30|-1|1|1","param_spellings":["4381:43-4381:49","4381:58-4381:62","4381:71-4381:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":77,"usr":471165867093762049,"detailed_name":"GLFWcursor *glfwCreateCursor(const GLFWimage *image, int xhot, int yhot)","short_name_offset":12,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Creates a custom cursor.\n\nCreates a new custom cursor image that can be set for a window with @ref\nglfwSetCursor.  The cursor can be destroyed with @ref glfwDestroyCursor.\nAny remaining cursors are destroyed by @ref glfwTerminate.\n\nThe pixels are 32-bit, little-endian, non-premultiplied RGBA, i.e. eight\nbits per channel with the red channel first.  They are arranged canonically\nas packed sequential rows, starting from the top-left corner.\n\nThe cursor hotspot is specified in pixels, relative to the upper-left corner\nof the cursor image.  Like all other coordinate systems in GLFW, the X-axis\npoints to the right and the Y-axis points down.\n\n@param[in] image The desired cursor image.\n@param[in] xhot The desired x-coordinate, in pixels, of the cursor hotspot.\n@param[in] yhot The desired y-coordinate, in pixels, of the cursor hotspot.\n@return The handle of the created cursor, or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The specified image data is copied before this function\nreturns.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref cursor_object\n@sa @ref glfwDestroyCursor\n@sa @ref glfwCreateStandardCursor\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[{"spell":"4419:21-4419:37|-1|1|1","param_spellings":["4419:55-4419:60","4419:66-4419:70","4419:76-4419:80"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":78,"usr":4391807412245456894,"detailed_name":"GLFWcursor *glfwCreateStandardCursor(int shape)","short_name_offset":12,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"@brief Creates a cursor with a standard shape.\n\nReturns a cursor with a [standard shape](@ref shapes), that can be set for\na window with @ref glfwSetCursor.\n\n@param[in] shape One of the [standard shapes](@ref shapes).\n@return A new cursor ready to use or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref cursor_object\n@sa @ref glfwCreateCursor\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[{"spell":"4442:21-4442:45|-1|1|1","param_spellings":["4442:50-4442:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":79,"usr":6463662881044749216,"detailed_name":"void glfwDestroyCursor(GLFWcursor *cursor)","short_name_offset":5,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Destroys a cursor.\n\nThis function destroys a cursor previously created with @ref\nglfwCreateCursor.  Any remaining cursors will be destroyed by @ref\nglfwTerminate.\n\nIf the specified cursor is current for any window, that window will be\nreverted to the default cursor.  This does not affect the cursor mode.\n\n@param[in] cursor The cursor object to destroy.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@reentrancy This function must not be called from a callback.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref cursor_object\n@sa @ref glfwCreateCursor\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[{"spell":"4469:14-4469:31|-1|1|1","param_spellings":["4469:44-4469:50"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":80,"usr":14509124525838293650,"detailed_name":"void glfwSetCursor(GLFWwindow *window, GLFWcursor *cursor)","short_name_offset":5,"short_name_size":13,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the cursor for the window.\n\nThis function sets the cursor image to be used when the cursor is over the\ncontent area of the specified window.  The set cursor will only be visible\nwhen the [cursor mode](@ref cursor_mode) of the window is\n`GLFW_CURSOR_NORMAL`.\n\nOn some platforms, the set cursor may not be visible unless the window also\nhas input focus.\n\n@param[in] window The window to set the cursor for.\n@param[in] cursor The cursor to set, or `NULL` to switch back to the default\narrow cursor.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref cursor_object\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[{"spell":"4496:14-4496:27|-1|1|1","param_spellings":["4496:40-4496:46","4496:60-4496:66"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":81,"usr":11113512710655060930,"detailed_name":"GLFWkeyfun glfwSetKeyCallback(GLFWwindow *window, GLFWkeyfun callback)","short_name_offset":11,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the key callback.\n\nThis function sets the key callback of the specified window, which is called\nwhen a key is pressed, repeated or released.\n\nThe key functions deal with physical keys, with layout independent\n[key tokens](@ref keys) named after their values in the standard US keyboard\nlayout.  If you want to input text, use the\n[character callback](@ref glfwSetCharCallback) instead.\n\nWhen a window loses input focus, it will generate synthetic key release\nevents for all pressed keys.  You can tell these events from user-generated\nevents by the fact that the synthetic ones are generated after the focus\nloss event has been processed, i.e. after the\n[window focus callback](@ref glfwSetWindowFocusCallback) has been called.\n\nThe scancode of a key is specific to that platform or sometimes even to that\nmachine.  Scancodes are intended to allow users to bind keys that don't have\na GLFW key token.  Such keys have `key` set to `GLFW_KEY_UNKNOWN`, their\nstate is not saved and so it cannot be queried with @ref glfwGetKey.\n\nSometimes GLFW needs to generate synthetic key events, in which case the\nscancode may be zero.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new key callback, or `NULL` to remove the currently\nset callback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int key, int scancode, int action, int mods)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWkeyfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref input_key\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter and return value.\n\n@ingroup input","declarations":[{"spell":"4546:20-4546:38|-1|1|1","param_spellings":["4546:51-4546:57","4546:70-4546:78"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":82,"usr":8760534764134760144,"detailed_name":"GLFWcharfun glfwSetCharCallback(GLFWwindow *window, GLFWcharfun callback)","short_name_offset":12,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the Unicode character callback.\n\nThis function sets the character callback of the specified window, which is\ncalled when a Unicode character is input.\n\nThe character callback is intended for Unicode text input.  As it deals with\ncharacters, it is keyboard layout dependent, whereas the\n[key callback](@ref glfwSetKeyCallback) is not.  Characters do not map 1:1\nto physical keys, as a key may produce zero, one or more characters.  If you\nwant to know whether a specific physical key was pressed or released, see\nthe key callback instead.\n\nThe character callback behaves as system text input normally does and will\nnot be called if modifier keys are held down that would prevent normal text\ninput on that platform, for example a Super (Command) key on macOS or Alt key\non Windows.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, unsigned int codepoint)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWcharfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref input_char\n\n@since Added in version 2.4.\n@glfw3 Added window handle parameter and return value.\n\n@ingroup input","declarations":[{"spell":"4589:21-4589:40|-1|1|1","param_spellings":["4589:53-4589:59","4589:73-4589:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":83,"usr":2796436119766838685,"detailed_name":"GLFWcharmodsfun glfwSetCharModsCallback(GLFWwindow *window, GLFWcharmodsfun callback)","short_name_offset":16,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the Unicode character with modifiers callback.\n\nThis function sets the character with modifiers callback of the specified\nwindow, which is called when a Unicode character is input regardless of what\nmodifier keys are used.\n\nThe character with modifiers callback is intended for implementing custom\nUnicode character input.  For regular Unicode text input, see the\n[character callback](@ref glfwSetCharCallback).  Like the character\ncallback, the character with modifiers callback deals with characters and is\nkeyboard layout dependent.  Characters do not map 1:1 to physical keys, as\na key may produce zero, one or more characters.  If you want to know whether\na specific physical key was pressed or released, see the\n[key callback](@ref glfwSetKeyCallback) instead.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or an\n[error](@ref error_handling) occurred.\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, unsigned int codepoint, int mods)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWcharmodsfun).\n\n@deprecated Scheduled for removal in version 4.0.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref input_char\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[{"spell":"4631:25-4631:48|-1|1|1","param_spellings":["4631:61-4631:67","4631:85-4631:93"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":84,"usr":9366774038132850198,"detailed_name":"GLFWmousebuttonfun glfwSetMouseButtonCallback(GLFWwindow *window, GLFWmousebuttonfun callback)","short_name_offset":19,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the mouse button callback.\n\nThis function sets the mouse button callback of the specified window, which\nis called when a mouse button is pressed or released.\n\nWhen a window loses input focus, it will generate synthetic mouse button\nrelease events for all pressed mouse buttons.  You can tell these events\nfrom user-generated events by the fact that the synthetic ones are generated\nafter the focus loss event has been processed, i.e. after the\n[window focus callback](@ref glfwSetWindowFocusCallback) has been called.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int button, int action, int mods)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWmousebuttonfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref input_mouse_button\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter and return value.\n\n@ingroup input","declarations":[{"spell":"4668:28-4668:54|-1|1|1","param_spellings":["4668:67-4668:73","4668:94-4668:102"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":85,"usr":17034937657591682675,"detailed_name":"GLFWcursorposfun glfwSetCursorPosCallback(GLFWwindow *window, GLFWcursorposfun callback)","short_name_offset":17,"short_name_size":24,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the cursor position callback.\n\nThis function sets the cursor position callback of the specified window,\nwhich is called when the cursor is moved.  The callback is provided with the\nposition, in screen coordinates, relative to the upper-left corner of the\ncontent area of the window.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, double xpos, double ypos);\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWcursorposfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref cursor_pos\n\n@since Added in version 3.0.  Replaces `glfwSetMousePosCallback`.\n\n@ingroup input","declarations":[{"spell":"4700:26-4700:50|-1|1|1","param_spellings":["4700:63-4700:69","4700:88-4700:96"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":86,"usr":10280983982117940818,"detailed_name":"GLFWcursorenterfun glfwSetCursorEnterCallback(GLFWwindow *window, GLFWcursorenterfun callback)","short_name_offset":19,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the cursor enter/leave callback.\n\nThis function sets the cursor boundary crossing callback of the specified\nwindow, which is called when the cursor enters or leaves the content area of\nthe window.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int entered)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWcursorenterfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref cursor_enter\n\n@since Added in version 3.0.\n\n@ingroup input","declarations":[{"spell":"4731:28-4731:54|-1|1|1","param_spellings":["4731:67-4731:73","4731:94-4731:102"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":87,"usr":5992259220884919048,"detailed_name":"GLFWscrollfun glfwSetScrollCallback(GLFWwindow *window, GLFWscrollfun callback)","short_name_offset":14,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the scroll callback.\n\nThis function sets the scroll callback of the specified window, which is\ncalled when a scrolling device is used, such as a mouse wheel or scrolling\narea of a touchpad.\n\nThe scroll callback receives all scrolling input, like that from a mouse\nwheel or a touchpad scrolling area.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new scroll callback, or `NULL` to remove the\ncurrently set callback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, double xoffset, double yoffset)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWscrollfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref scrolling\n\n@since Added in version 3.0.  Replaces `glfwSetMouseWheelCallback`.\n\n@ingroup input","declarations":[{"spell":"4765:23-4765:44|-1|1|1","param_spellings":["4765:57-4765:63","4765:79-4765:87"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":88,"usr":6939150784075628160,"detailed_name":"GLFWdropfun glfwSetDropCallback(GLFWwindow *window, GLFWdropfun callback)","short_name_offset":12,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the path drop callback.\n\nThis function sets the path drop callback of the specified window, which is\ncalled when one or more dragged paths are dropped on the window.\n\nBecause the path array and its strings may have been generated specifically\nfor that event, they are not guaranteed to be valid after the callback has\nreturned.  If you wish to use them after the callback returns, you need to\nmake a deep copy.\n\n@param[in] window The window whose callback to set.\n@param[in] callback The new file drop callback, or `NULL` to remove the\ncurrently set callback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(GLFWwindow* window, int path_count, const char* paths[])\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWdropfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@remark @wayland File drop is currently unimplemented.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref path_drop\n\n@since Added in version 3.1.\n\n@ingroup input","declarations":[{"spell":"4802:21-4802:40|-1|1|1","param_spellings":["4802:53-4802:59","4802:73-4802:81"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":89,"usr":3384009973754681669,"detailed_name":"int glfwJoystickPresent(int jid)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Returns whether the specified joystick is present.\n\nThis function returns whether the specified joystick is present.\n\nThere is no need to call this function before other functions that accept\na joystick ID, as they all check for presence before performing any other\nwork.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@return `GLFW_TRUE` if the joystick is present, or `GLFW_FALSE` otherwise.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref joystick\n\n@since Added in version 3.0.  Replaces `glfwGetJoystickParam`.\n\n@ingroup input","declarations":[{"spell":"4826:13-4826:32|-1|1|1","param_spellings":["4826:37-4826:40"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":90,"usr":15520279684863535224,"detailed_name":"const float *glfwGetJoystickAxes(int jid, int *count)","short_name_offset":13,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the values of all axes of the specified joystick.\n\nThis function returns the values of all axes of the specified joystick.\nEach element in the array is a value between -1.0 and 1.0.\n\nIf the specified joystick is not present this function will return `NULL`\nbut will not generate an error.  This can be used instead of first calling\n@ref glfwJoystickPresent.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@param[out] count Where to store the number of axis values in the returned\narray.  This is set to zero if the joystick is not present or an error\noccurred.\n@return An array of axis values, or `NULL` if the joystick is not present or\nan [error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The returned array is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified joystick is\ndisconnected or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref joystick_axis\n\n@since Added in version 3.0.  Replaces `glfwGetJoystickPos`.\n\n@ingroup input","declarations":[{"spell":"4859:22-4859:41|-1|1|1","param_spellings":["4859:46-4859:49","4859:56-4859:61"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":91,"usr":4916426069589496476,"detailed_name":"const unsigned char *glfwGetJoystickButtons(int jid, int *count)","short_name_offset":21,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the state of all buttons of the specified joystick.\n\nThis function returns the state of all buttons of the specified joystick.\nEach element in the array is either `GLFW_PRESS` or `GLFW_RELEASE`.\n\nFor backward compatibility with earlier versions that did not have @ref\nglfwGetJoystickHats, the button array also includes all hats, each\nrepresented as four buttons.  The hats are in the same order as returned by\n__glfwGetJoystickHats__ and are in the order _up_, _right_, _down_ and\n_left_.  To disable these extra buttons, set the @ref\nGLFW_JOYSTICK_HAT_BUTTONS init hint before initialization.\n\nIf the specified joystick is not present this function will return `NULL`\nbut will not generate an error.  This can be used instead of first calling\n@ref glfwJoystickPresent.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@param[out] count Where to store the number of button states in the returned\narray.  This is set to zero if the joystick is not present or an error\noccurred.\n@return An array of button states, or `NULL` if the joystick is not present\nor an [error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The returned array is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified joystick is\ndisconnected or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref joystick_button\n\n@since Added in version 2.2.\n@glfw3 Changed to return a dynamic array.\n\n@ingroup input","declarations":[{"spell":"4900:30-4900:52|-1|1|1","param_spellings":["4900:57-4900:60","4900:67-4900:72"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":92,"usr":16260852996291282373,"detailed_name":"const unsigned char *glfwGetJoystickHats(int jid, int *count)","short_name_offset":21,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the state of all hats of the specified joystick.\n\nThis function returns the state of all hats of the specified joystick.\nEach element in the array is one of the following values:\n\nName                  | Value\n----                  | -----\n`GLFW_HAT_CENTERED`   | 0\n`GLFW_HAT_UP`         | 1\n`GLFW_HAT_RIGHT`      | 2\n`GLFW_HAT_DOWN`       | 4\n`GLFW_HAT_LEFT`       | 8\n`GLFW_HAT_RIGHT_UP`   | `GLFW_HAT_RIGHT` \\| `GLFW_HAT_UP`\n`GLFW_HAT_RIGHT_DOWN` | `GLFW_HAT_RIGHT` \\| `GLFW_HAT_DOWN`\n`GLFW_HAT_LEFT_UP`    | `GLFW_HAT_LEFT` \\| `GLFW_HAT_UP`\n`GLFW_HAT_LEFT_DOWN`  | `GLFW_HAT_LEFT` \\| `GLFW_HAT_DOWN`\n\nThe diagonal directions are bitwise combinations of the primary (up, right,\ndown and left) directions and you can test for these individually by ANDing\nit with the corresponding direction.\n\n@code\nif (hats[2] & GLFW_HAT_RIGHT)\n{\n    // State of hat 2 could be right-up, right or right-down\n}\n@endcode\n\nIf the specified joystick is not present this function will return `NULL`\nbut will not generate an error.  This can be used instead of first calling\n@ref glfwJoystickPresent.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@param[out] count Where to store the number of hat states in the returned\narray.  This is set to zero if the joystick is not present or an error\noccurred.\n@return An array of hat states, or `NULL` if the joystick is not present\nor an [error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The returned array is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified joystick is\ndisconnected, this function is called again for that joystick or the library\nis terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref joystick_hat\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"4957:30-4957:49|-1|1|1","param_spellings":["4957:54-4957:57","4957:64-4957:69"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":93,"usr":6511387007583281449,"detailed_name":"const char *glfwGetJoystickName(int jid)","short_name_offset":12,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the name of the specified joystick.\n\nThis function returns the name, encoded as UTF-8, of the specified joystick.\nThe returned string is allocated and freed by GLFW.  You should not free it\nyourself.\n\nIf the specified joystick is not present this function will return `NULL`\nbut will not generate an error.  This can be used instead of first calling\n@ref glfwJoystickPresent.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@return The UTF-8 encoded name of the joystick, or `NULL` if the joystick\nis not present or an [error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The returned string is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified joystick is\ndisconnected or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref joystick_name\n\n@since Added in version 3.0.\n\n@ingroup input","declarations":[{"spell":"4988:21-4988:40|-1|1|1","param_spellings":["4988:45-4988:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":94,"usr":4063214330556684986,"detailed_name":"const char *glfwGetJoystickGUID(int jid)","short_name_offset":12,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the SDL compatible GUID of the specified joystick.\n\nThis function returns the SDL compatible GUID, as a UTF-8 encoded\nhexadecimal string, of the specified joystick.  The returned string is\nallocated and freed by GLFW.  You should not free it yourself.\n\nThe GUID is what connects a joystick to a gamepad mapping.  A connected\njoystick will always have a GUID even if there is no gamepad mapping\nassigned to it.\n\nIf the specified joystick is not present this function will return `NULL`\nbut will not generate an error.  This can be used instead of first calling\n@ref glfwJoystickPresent.\n\nThe GUID uses the format introduced in SDL 2.0.5.  This GUID tries to\nuniquely identify the make and model of a joystick but does not identify\na specific unit, e.g. all wired Xbox 360 controllers will have the same\nGUID on that platform.  The GUID for a unit may vary between platforms\ndepending on what hardware information the platform specific APIs provide.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@return The UTF-8 encoded GUID of the joystick, or `NULL` if the joystick\nis not present or an [error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_INVALID_ENUM and @ref GLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The returned string is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified joystick is\ndisconnected or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref gamepad\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"5029:21-5029:40|-1|1|1","param_spellings":["5029:45-5029:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":95,"usr":9951054831425375121,"detailed_name":"void glfwSetJoystickUserPointer(int jid, void *pointer)","short_name_offset":5,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the user pointer of the specified joystick.\n\nThis function sets the user-defined pointer of the specified joystick.  The\ncurrent value is retained until the joystick is disconnected.  The initial\nvalue is `NULL`.\n\nThis function may be called from the joystick callback, even for a joystick\nthat is being disconnected.\n\n@param[in] jid The joystick whose pointer to set.\n@param[in] pointer The new value.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Access is not\nsynchronized.\n\n@sa @ref joystick_userptr\n@sa @ref glfwGetJoystickUserPointer\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"5055:14-5055:40|-1|1|1","param_spellings":["5055:45-5055:48","5055:56-5055:63"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":96,"usr":873922843077717135,"detailed_name":"void *glfwGetJoystickUserPointer(int jid)","short_name_offset":6,"short_name_size":26,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the user pointer of the specified joystick.\n\nThis function returns the current value of the user-defined pointer of the\nspecified joystick.  The initial value is `NULL`.\n\nThis function may be called from the joystick callback, even for a joystick\nthat is being disconnected.\n\n@param[in] jid The joystick whose pointer to return.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Access is not\nsynchronized.\n\n@sa @ref joystick_userptr\n@sa @ref glfwSetJoystickUserPointer\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"5079:15-5079:41|-1|1|1","param_spellings":["5079:46-5079:49"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":97,"usr":9388846152749206080,"detailed_name":"int glfwJoystickIsGamepad(int jid)","short_name_offset":4,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"@brief Returns whether the specified joystick has a gamepad mapping.\n\nThis function returns whether the specified joystick is both present and has\na gamepad mapping.\n\nIf the specified joystick is present but does not have a gamepad mapping\nthis function will return `GLFW_FALSE` but will not generate an error.  Call\n@ref glfwJoystickPresent to check if a joystick is present regardless of\nwhether it has a mapping.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@return `GLFW_TRUE` if a joystick is both present and has a gamepad mapping,\nor `GLFW_FALSE` otherwise.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_ENUM.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref gamepad\n@sa @ref glfwGetGamepadState\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"5107:13-5107:34|-1|1|1","param_spellings":["5107:39-5107:42"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":98,"usr":17753257917155551941,"detailed_name":"GLFWjoystickfun glfwSetJoystickCallback(GLFWjoystickfun callback)","short_name_offset":16,"short_name_size":23,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the joystick configuration callback.\n\nThis function sets the joystick configuration callback, or removes the\ncurrently set callback.  This is called when a joystick is connected to or\ndisconnected from the system.\n\nFor joystick connection and disconnection events to be delivered on all\nplatforms, you need to call one of the [event processing](@ref events)\nfunctions.  Joystick disconnection may also be detected and the callback\ncalled by joystick functions.  The function will then return whatever it\nreturns if the joystick is not present.\n\n@param[in] callback The new callback, or `NULL` to remove the currently set\ncallback.\n@return The previously set callback, or `NULL` if no callback was set or the\nlibrary had not been [initialized](@ref intro_init).\n\n@callback_signature\n@code\nvoid function_name(int jid, int event)\n@endcode\nFor more information about the callback parameters, see the\n[function pointer type](@ref GLFWjoystickfun).\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref joystick_event\n\n@since Added in version 3.2.\n\n@ingroup input","declarations":[{"spell":"5143:25-5143:48|-1|1|1","param_spellings":["5143:65-5143:73"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":99,"usr":2390894778537979450,"detailed_name":"int glfwUpdateGamepadMappings(const char *string)","short_name_offset":4,"short_name_size":25,"kind":12,"storage":1,"hover":"","comments":"@brief Adds the specified SDL_GameControllerDB gamepad mappings.\n\nThis function parses the specified ASCII encoded string and updates the\ninternal list with any gamepad mappings it finds.  This string may\ncontain either a single gamepad mapping or many mappings separated by\nnewlines.  The parser supports the full format of the `gamecontrollerdb.txt`\nsource file including empty lines and comments.\n\nSee @ref gamepad_mapping for a description of the format.\n\nIf there is already a gamepad mapping for a given GUID in the internal list,\nit will be replaced by the one passed to this function.  If the library is\nterminated and re-initialized the internal list will revert to the built-in\ndefault.\n\n@param[in] string The string containing the gamepad mappings.\n@return `GLFW_TRUE` if successful, or `GLFW_FALSE` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_VALUE.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref gamepad\n@sa @ref glfwJoystickIsGamepad\n@sa @ref glfwGetGamepadName\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"5177:13-5177:38|-1|1|1","param_spellings":["5177:51-5177:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":100,"usr":7617741265000303526,"detailed_name":"const char *glfwGetGamepadName(int jid)","short_name_offset":12,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the human-readable gamepad name for the specified joystick.\n\nThis function returns the human-readable name of the gamepad from the\ngamepad mapping assigned to the specified joystick.\n\nIf the specified joystick is not present or does not have a gamepad mapping\nthis function will return `NULL` but will not generate an error.  Call\n@ref glfwJoystickPresent to check whether it is present regardless of\nwhether it has a mapping.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@return The UTF-8 encoded name of the gamepad, or `NULL` if the\njoystick is not present, does not have a mapping or an\n[error](@ref error_handling) occurred.\n\n@pointer_lifetime The returned string is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the specified joystick is\ndisconnected, the gamepad mappings are updated or the library is terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref gamepad\n@sa @ref glfwJoystickIsGamepad\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"5207:21-5207:39|-1|1|1","param_spellings":["5207:44-5207:47"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":101,"usr":4792623891900749052,"detailed_name":"int glfwGetGamepadState(int jid, GLFWgamepadstate *state)","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Retrieves the state of the specified joystick remapped as a gamepad.\n\nThis function retrieves the state of the specified joystick remapped to\nan Xbox-like gamepad.\n\nIf the specified joystick is not present or does not have a gamepad mapping\nthis function will return `GLFW_FALSE` but will not generate an error.  Call\n@ref glfwJoystickPresent to check whether it is present regardless of\nwhether it has a mapping.\n\nThe Guide button may not be available for input as it is often hooked by the\nsystem or the Steam client.\n\nNot all devices have all the buttons or axes provided by @ref\nGLFWgamepadstate.  Unavailable buttons and axes will always report\n`GLFW_RELEASE` and 0.0 respectively.\n\n@param[in] jid The [joystick](@ref joysticks) to query.\n@param[out] state The gamepad input state of the joystick.\n@return `GLFW_TRUE` if successful, or `GLFW_FALSE` if no joystick is\nconnected, it has no gamepad mapping or an [error](@ref error_handling)\noccurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_ENUM.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref gamepad\n@sa @ref glfwUpdateGamepadMappings\n@sa @ref glfwJoystickIsGamepad\n\n@since Added in version 3.3.\n\n@ingroup input","declarations":[{"spell":"5245:13-5245:32|-1|1|1","param_spellings":["5245:37-5245:40","5245:60-5245:65"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":102,"usr":18209261197980837780,"detailed_name":"void glfwSetClipboardString(GLFWwindow *window, const char *string)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the clipboard to the specified string.\n\nThis function sets the system clipboard to the specified, UTF-8 encoded\nstring.\n\n@param[in] window Deprecated.  Any valid window or `NULL`.\n@param[in] string A UTF-8 encoded string.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The specified string is copied before this function\nreturns.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref clipboard\n@sa @ref glfwGetClipboardString\n\n@since Added in version 3.0.\n\n@ingroup input","declarations":[{"spell":"5270:14-5270:36|-1|1|1","param_spellings":["5270:49-5270:55","5270:69-5270:75"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":103,"usr":10587570842084704755,"detailed_name":"const char *glfwGetClipboardString(GLFWwindow *window)","short_name_offset":12,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the contents of the clipboard as a string.\n\nThis function returns the contents of the system clipboard, if it contains\nor is convertible to a UTF-8 encoded string.  If the clipboard is empty or\nif its contents cannot be converted, `NULL` is returned and a @ref\nGLFW_FORMAT_UNAVAILABLE error is generated.\n\n@param[in] window Deprecated.  Any valid window or `NULL`.\n@return The contents of the clipboard as a UTF-8 encoded string, or `NULL`\nif an [error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_PLATFORM_ERROR.\n\n@pointer_lifetime The returned string is allocated and freed by GLFW.  You\nshould not free it yourself.  It is valid until the next call to @ref\nglfwGetClipboardString or @ref glfwSetClipboardString, or until the library\nis terminated.\n\n@thread_safety This function must only be called from the main thread.\n\n@sa @ref clipboard\n@sa @ref glfwSetClipboardString\n\n@since Added in version 3.0.\n\n@ingroup input","declarations":[{"spell":"5300:21-5300:43|-1|1|1","param_spellings":["5300:56-5300:62"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":104,"usr":1780687576695198975,"detailed_name":"double glfwGetTime()","short_name_offset":7,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the GLFW time.\n\nThis function returns the current GLFW time, in seconds.  Unless the time\nhas been set using @ref glfwSetTime it measures time elapsed since GLFW was\ninitialized.\n\nThis function and @ref glfwSetTime are helper functions on top of @ref\nglfwGetTimerFrequency and @ref glfwGetTimerValue.\n\nThe resolution of the timer is system dependent, but is usually on the order\nof a few micro- or nanoseconds.  It uses the highest-resolution monotonic\ntime source on each supported platform.\n\n@return The current time, in seconds, or zero if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.  Reading and\nwriting of the internal base time is not atomic, so it needs to be\nexternally synchronized with calls to @ref glfwSetTime.\n\n@sa @ref time\n\n@since Added in version 1.0.\n\n@ingroup input","declarations":[{"spell":"5330:16-5330:27|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":105,"usr":9591415892576502778,"detailed_name":"void glfwSetTime(double time)","short_name_offset":5,"short_name_size":11,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the GLFW time.\n\nThis function sets the current GLFW time, in seconds.  The value must be\na positive finite number less than or equal to 18446744073.0, which is\napproximately 584.5 years.\n\nThis function and @ref glfwGetTime are helper functions on top of @ref\nglfwGetTimerFrequency and @ref glfwGetTimerValue.\n\n@param[in] time The new value, in seconds.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_INVALID_VALUE.\n\n@remark The upper limit of GLFW time is calculated as\nfloor((2<sup>64</sup> - 1) / 10<sup>9</sup>) and is due to implementations\nstoring nanoseconds in 64 bits.  The limit may be increased in the future.\n\n@thread_safety This function may be called from any thread.  Reading and\nwriting of the internal base time is not atomic, so it needs to be\nexternally synchronized with calls to @ref glfwGetTime.\n\n@sa @ref time\n\n@since Added in version 2.2.\n\n@ingroup input","declarations":[{"spell":"5360:14-5360:25|-1|1|1","param_spellings":["5360:33-5360:37"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":106,"usr":17078587324266400629,"detailed_name":"uint64_t glfwGetTimerValue()","short_name_offset":9,"short_name_size":17,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the current value of the raw timer.\n\nThis function returns the current value of the raw timer, measured in\n1&nbsp;/&nbsp;frequency seconds.  To get the frequency, call @ref\nglfwGetTimerFrequency.\n\n@return The value of the timer, or zero if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref time\n@sa @ref glfwGetTimerFrequency\n\n@since Added in version 3.2.\n\n@ingroup input","declarations":[{"spell":"5382:18-5382:35|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":107,"usr":11069766723853695088,"detailed_name":"uint64_t glfwGetTimerFrequency()","short_name_offset":9,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the frequency, in Hz, of the raw timer.\n\nThis function returns the frequency, in Hz, of the raw timer.\n\n@return The frequency of the timer, in Hz, or zero if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref time\n@sa @ref glfwGetTimerValue\n\n@since Added in version 3.2.\n\n@ingroup input","declarations":[{"spell":"5402:18-5402:39|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":108,"usr":4376147842464703587,"detailed_name":"void glfwMakeContextCurrent(GLFWwindow *window)","short_name_offset":5,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Makes the context of the specified window current for the calling\nthread.\n\nThis function makes the OpenGL or OpenGL ES context of the specified window\ncurrent on the calling thread.  A context must only be made current on\na single thread at a time and each thread can have only a single current\ncontext at a time.\n\nWhen moving a context between threads, you must make it non-current on the\nold thread before making it current on the new one.\n\nBy default, making a context non-current implicitly forces a pipeline flush.\nOn machines that support `GL_KHR_context_flush_control`, you can control\nwhether a context performs this flush by setting the\n[GLFW_CONTEXT_RELEASE_BEHAVIOR](@ref GLFW_CONTEXT_RELEASE_BEHAVIOR_hint)\nhint.\n\nThe specified window must have an OpenGL or OpenGL ES context.  Specifying\na window without a context will generate a @ref GLFW_NO_WINDOW_CONTEXT\nerror.\n\n@param[in] window The window whose context to make current, or `NULL` to\ndetach the current context.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_NO_WINDOW_CONTEXT and @ref GLFW_PLATFORM_ERROR.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref context_current\n@sa @ref glfwGetCurrentContext\n\n@since Added in version 3.0.\n\n@ingroup context","declarations":[{"spell":"5440:14-5440:36|-1|1|1","param_spellings":["5440:49-5440:55"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":109,"usr":7672151296935501195,"detailed_name":"GLFWwindow *glfwGetCurrentContext()","short_name_offset":12,"short_name_size":21,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the window whose context is current on the calling thread.\n\nThis function returns the window whose OpenGL or OpenGL ES context is\ncurrent on the calling thread.\n\n@return The window whose context is current, or `NULL` if no window's\ncontext is current.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref context_current\n@sa @ref glfwMakeContextCurrent\n\n@since Added in version 3.0.\n\n@ingroup context","declarations":[{"spell":"5461:21-5461:42|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":110,"usr":14715525448776351426,"detailed_name":"void glfwSwapBuffers(GLFWwindow *window)","short_name_offset":5,"short_name_size":15,"kind":12,"storage":1,"hover":"","comments":"@brief Swaps the front and back buffers of the specified window.\n\nThis function swaps the front and back buffers of the specified window when\nrendering with OpenGL or OpenGL ES.  If the swap interval is greater than\nzero, the GPU driver waits the specified number of screen updates before\nswapping the buffers.\n\nThe specified window must have an OpenGL or OpenGL ES context.  Specifying\na window without a context will generate a @ref GLFW_NO_WINDOW_CONTEXT\nerror.\n\nThis function does not apply to Vulkan.  If you are rendering with Vulkan,\nsee `vkQueuePresentKHR` instead.\n\n@param[in] window The window whose buffers to swap.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_NO_WINDOW_CONTEXT and @ref GLFW_PLATFORM_ERROR.\n\n@remark __EGL:__ The context of the specified window must be current on the\ncalling thread.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref buffer_swap\n@sa @ref glfwSwapInterval\n\n@since Added in version 1.0.\n@glfw3 Added window handle parameter.\n\n@ingroup window","declarations":[{"spell":"5495:14-5495:29|-1|1|1","param_spellings":["5495:42-5495:48"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":111,"usr":13815094287122204345,"detailed_name":"void glfwSwapInterval(int interval)","short_name_offset":5,"short_name_size":16,"kind":12,"storage":1,"hover":"","comments":"@brief Sets the swap interval for the current context.\n\nThis function sets the swap interval for the current OpenGL or OpenGL ES\ncontext, i.e. the number of screen updates to wait from the time @ref\nglfwSwapBuffers was called before swapping the buffers and returning.  This\nis sometimes called _vertical synchronization_, _vertical retrace\nsynchronization_ or just _vsync_.\n\nA context that supports either of the `WGL_EXT_swap_control_tear` and\n`GLX_EXT_swap_control_tear` extensions also accepts _negative_ swap\nintervals, which allows the driver to swap immediately even if a frame\narrives a little bit late.  You can check for these extensions with @ref\nglfwExtensionSupported.\n\nA context must be current on the calling thread.  Calling this function\nwithout a current context will cause a @ref GLFW_NO_CURRENT_CONTEXT error.\n\nThis function does not apply to Vulkan.  If you are rendering with Vulkan,\nsee the present mode of your swapchain instead.\n\n@param[in] interval The minimum number of screen updates to wait for\nuntil the buffers are swapped by @ref glfwSwapBuffers.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_NO_CURRENT_CONTEXT and @ref GLFW_PLATFORM_ERROR.\n\n@remark This function is not called during context creation, leaving the\nswap interval set to whatever is the default on that platform.  This is done\nbecause some swap interval extensions used by GLFW do not allow the swap\ninterval to be reset to zero once it has been set to a non-zero value.\n\n@remark Some GPU drivers do not honor the requested swap interval, either\nbecause of a user setting that overrides the application's request or due to\nbugs in the driver.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref buffer_swap\n@sa @ref glfwSwapBuffers\n\n@since Added in version 1.0.\n\n@ingroup context","declarations":[{"spell":"5541:14-5541:30|-1|1|1","param_spellings":["5541:35-5541:43"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":112,"usr":756720811469364681,"detailed_name":"int glfwExtensionSupported(const char *extension)","short_name_offset":4,"short_name_size":22,"kind":12,"storage":1,"hover":"","comments":"@brief Returns whether the specified extension is available.\n\nThis function returns whether the specified\n[API extension](@ref context_glext) is supported by the current OpenGL or\nOpenGL ES context.  It searches both for client API extension and context\ncreation API extensions.\n\nA context must be current on the calling thread.  Calling this function\nwithout a current context will cause a @ref GLFW_NO_CURRENT_CONTEXT error.\n\nAs this functions retrieves and searches one or more extension strings each\ncall, it is recommended that you cache its results if it is going to be used\nfrequently.  The extension strings will not change during the lifetime of\na context, so there is no danger in doing this.\n\nThis function does not apply to Vulkan.  If you are using Vulkan, see @ref\nglfwGetRequiredInstanceExtensions, `vkEnumerateInstanceExtensionProperties`\nand `vkEnumerateDeviceExtensionProperties` instead.\n\n@param[in] extension The ASCII encoded name of the extension.\n@return `GLFW_TRUE` if the extension is available, or `GLFW_FALSE`\notherwise.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_NO_CURRENT_CONTEXT, @ref GLFW_INVALID_VALUE and @ref\nGLFW_PLATFORM_ERROR.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref context_glext\n@sa @ref glfwGetProcAddress\n\n@since Added in version 1.0.\n\n@ingroup context","declarations":[{"spell":"5579:13-5579:35|-1|1|1","param_spellings":["5579:48-5579:57"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":113,"usr":1308707873035431058,"detailed_name":"GLFWglproc glfwGetProcAddress(const char *procname)","short_name_offset":11,"short_name_size":18,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the address of the specified function for the current\ncontext.\n\nThis function returns the address of the specified OpenGL or OpenGL ES\n[core or extension function](@ref context_glext), if it is supported\nby the current context.\n\nA context must be current on the calling thread.  Calling this function\nwithout a current context will cause a @ref GLFW_NO_CURRENT_CONTEXT error.\n\nThis function does not apply to Vulkan.  If you are rendering with Vulkan,\nsee @ref glfwGetInstanceProcAddress, `vkGetInstanceProcAddr` and\n`vkGetDeviceProcAddr` instead.\n\n@param[in] procname The ASCII encoded name of the function.\n@return The address of the function, or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED, @ref\nGLFW_NO_CURRENT_CONTEXT and @ref GLFW_PLATFORM_ERROR.\n\n@remark The address of a given function is not guaranteed to be the same\nbetween contexts.\n\n@remark This function may return a non-`NULL` address despite the\nassociated version or extension not being available.  Always check the\ncontext version or extension string first.\n\n@pointer_lifetime The returned function pointer is valid until the context\nis destroyed or the library is terminated.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref context_glext\n@sa @ref glfwExtensionSupported\n\n@since Added in version 1.0.\n\n@ingroup context","declarations":[{"spell":"5621:20-5621:38|-1|1|1","param_spellings":["5621:51-5621:59"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":114,"usr":9987592100181464834,"detailed_name":"int glfwVulkanSupported()","short_name_offset":4,"short_name_size":19,"kind":12,"storage":1,"hover":"","comments":"@brief Returns whether the Vulkan loader and an ICD have been found.\n\nThis function returns whether the Vulkan loader and any minimally functional\nICD have been found.\n\nThe availability of a Vulkan loader and even an ICD does not by itself\nguarantee that surface creation or even instance creation is possible.\nFor example, on Fermi systems Nvidia will install an ICD that provides no\nactual Vulkan support.  Call @ref glfwGetRequiredInstanceExtensions to check\nwhether the extensions necessary for Vulkan surface creation are available\nand @ref glfwGetPhysicalDevicePresentationSupport to check whether a queue\nfamily of a physical device supports image presentation.\n\n@return `GLFW_TRUE` if Vulkan is minimally available, or `GLFW_FALSE`\notherwise.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref vulkan_support\n\n@since Added in version 3.2.\n\n@ingroup vulkan","declarations":[{"spell":"5649:13-5649:32|-1|1|1","param_spellings":[]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":115,"usr":14025950438176027035,"detailed_name":"const char **glfwGetRequiredInstanceExtensions(uint32_t *count)","short_name_offset":13,"short_name_size":33,"kind":12,"storage":1,"hover":"","comments":"@brief Returns the Vulkan instance extensions required by GLFW.\n\nThis function returns an array of names of Vulkan instance extensions required\nby GLFW for creating Vulkan surfaces for GLFW windows.  If successful, the\nlist will always contain `VK_KHR_surface`, so if you don't require any\nadditional extensions you can pass this list directly to the\n`VkInstanceCreateInfo` struct.\n\nIf Vulkan is not available on the machine, this function returns `NULL` and\ngenerates a @ref GLFW_API_UNAVAILABLE error.  Call @ref glfwVulkanSupported\nto check whether Vulkan is at least minimally available.\n\nIf Vulkan is available but no set of extensions allowing window surface\ncreation was found, this function returns `NULL`.  You may still use Vulkan\nfor off-screen rendering and compute work.\n\n@param[out] count Where to store the number of extensions in the returned\narray.  This is set to zero if an error occurred.\n@return An array of ASCII encoded extension names, or `NULL` if an\n[error](@ref error_handling) occurred.\n\n@errors Possible errors include @ref GLFW_NOT_INITIALIZED and @ref\nGLFW_API_UNAVAILABLE.\n\n@remark Additional extensions may be required by future versions of GLFW.\nYou should check if any extensions you wish to enable are already in the\nreturned array, as it is an error to specify an extension more than once in\nthe `VkInstanceCreateInfo` struct.\n\n@remark @macos This function currently supports either the\n`VK_MVK_macos_surface` extension from MoltenVK or `VK_EXT_metal_surface`\nextension.\n\n@pointer_lifetime The returned array is allocated and freed by GLFW.  You\nshould not free it yourself.  It is guaranteed to be valid only until the\nlibrary is terminated.\n\n@thread_safety This function may be called from any thread.\n\n@sa @ref vulkan_ext\n@sa @ref glfwCreateWindowSurface\n\n@since Added in version 3.2.\n\n@ingroup vulkan","declarations":[{"spell":"5697:22-5697:55|-1|1|1","param_spellings":["5697:66-5697:71"]}],"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":13171824276217114700,"detailed_name":"int GLFWvidmode::width","short_name_offset":17,"short_name_size":5,"hover":"","comments":"The width, in screen coordinates, of the video mode.","declarations":[],"spell":"1633:9-1633:14|29|2|2","extent":"1633:5-1633:14|29|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":1,"usr":16609523034969224585,"detailed_name":"int GLFWvidmode::height","short_name_offset":17,"short_name_size":6,"hover":"","comments":"The height, in screen coordinates, of the video mode.","declarations":[],"spell":"1636:9-1636:15|29|2|2","extent":"1636:5-1636:15|29|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":2,"usr":14139285428944869576,"detailed_name":"int GLFWvidmode::redBits","short_name_offset":17,"short_name_size":7,"hover":"","comments":"The bit depth of the red channel of the video mode.","declarations":[],"spell":"1639:9-1639:16|29|2|2","extent":"1639:5-1639:16|29|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":3,"usr":7776475379795486240,"detailed_name":"int GLFWvidmode::greenBits","short_name_offset":17,"short_name_size":9,"hover":"","comments":"The bit depth of the green channel of the video mode.","declarations":[],"spell":"1642:9-1642:18|29|2|2","extent":"1642:5-1642:18|29|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":4,"usr":6253893227743886042,"detailed_name":"int GLFWvidmode::blueBits","short_name_offset":17,"short_name_size":8,"hover":"","comments":"The bit depth of the blue channel of the video mode.","declarations":[],"spell":"1645:9-1645:17|29|2|2","extent":"1645:5-1645:17|29|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":5,"usr":18235411419322156406,"detailed_name":"int GLFWvidmode::refreshRate","short_name_offset":17,"short_name_size":11,"hover":"","comments":"The refresh rate, in Hz, of the video mode.","declarations":[],"spell":"1648:9-1648:20|29|2|2","extent":"1648:5-1648:20|29|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":6,"usr":13920475954388971955,"detailed_name":"unsigned short *GLFWgammaramp::red","short_name_offset":31,"short_name_size":3,"hover":"","comments":"An array of value describing the response of the red channel.","declarations":[],"spell":"1667:21-1667:24|32|2|2","extent":"1667:5-1667:24|32|2|0","type":34,"uses":[],"kind":8,"storage":0},{"id":7,"usr":5677599613671630636,"detailed_name":"unsigned short *GLFWgammaramp::green","short_name_offset":31,"short_name_size":5,"hover":"","comments":"An array of value describing the response of the green channel.","declarations":[],"spell":"1670:21-1670:26|32|2|2","extent":"1670:5-1670:26|32|2|0","type":34,"uses":[],"kind":8,"storage":0},{"id":8,"usr":12740031459499101358,"detailed_name":"unsigned short *GLFWgammaramp::blue","short_name_offset":31,"short_name_size":4,"hover":"","comments":"An array of value describing the response of the blue channel.","declarations":[],"spell":"1673:21-1673:25|32|2|2","extent":"1673:5-1673:25|32|2|0","type":34,"uses":[],"kind":8,"storage":0},{"id":9,"usr":16083020681203013229,"detailed_name":"unsigned int GLFWgammaramp::size","short_name_offset":28,"short_name_size":4,"hover":"","comments":"The number of elements in each array.","declarations":[],"spell":"1676:18-1676:22|32|2|2","extent":"1676:5-1676:22|32|2|0","type":35,"uses":[],"kind":8,"storage":0},{"id":10,"usr":15986231222571521947,"detailed_name":"int GLFWimage::width","short_name_offset":15,"short_name_size":5,"hover":"","comments":"The width, in pixels, of this image.","declarations":[],"spell":"1696:9-1696:14|36|2|2","extent":"1696:5-1696:14|36|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":11,"usr":9243752464726569688,"detailed_name":"int GLFWimage::height","short_name_offset":15,"short_name_size":6,"hover":"","comments":"The height, in pixels, of this image.","declarations":[],"spell":"1699:9-1699:15|36|2|2","extent":"1699:5-1699:15|36|2|0","type":31,"uses":[],"kind":8,"storage":0},{"id":12,"usr":5718363909791494738,"detailed_name":"unsigned char *GLFWimage::pixels","short_name_offset":26,"short_name_size":6,"hover":"","comments":"The pixel data of this image, arranged left-to-right, top-to-bottom.","declarations":[],"spell":"1702:20-1702:26|36|2|2","extent":"1702:5-1702:26|36|2|0","type":38,"uses":[],"kind":8,"storage":0},{"id":13,"usr":7854593235059339716,"detailed_name":"unsigned char [15] GLFWgamepadstate::buttons","short_name_offset":37,"short_name_size":7,"hover":"","comments":"The states of each [gamepad button](@ref gamepad_buttons), `GLFW_PRESS`\nor `GLFW_RELEASE`.","declarations":[],"spell":"1721:19-1721:26|39|2|2","extent":"1721:5-1721:30|39|2|0","type":38,"uses":[],"kind":8,"storage":0},{"id":14,"usr":11435086835685842441,"detailed_name":"float [6] GLFWgamepadstate::axes","short_name_offset":28,"short_name_size":4,"hover":"","comments":"The states of each [gamepad axis](@ref gamepad_axes), in the range -1.0\nto 1.0 inclusive.","declarations":[],"spell":"1725:11-1725:15|39|2|2","extent":"1725:5-1725:18|39|2|0","type":41,"uses":[],"kind":8,"storage":0},{"id":15,"usr":17505391519689662613,"detailed_name":"_glfw3_h_","short_name_offset":0,"short_name_size":9,"hover":"#define _glfw3_h_","comments":"","declarations":[],"spell":"30:9-30:18|-1|1|2","extent":"30:9-30:18|-1|1|0","uses":[],"kind":255,"storage":0},{"id":16,"usr":6261794743338726312,"detailed_name":"APIENTRY","short_name_offset":0,"short_name_size":8,"hover":"#define APIENTRY","comments":"","declarations":[],"spell":"125:11-125:19|-1|1|2","extent":"125:11-125:19|-1|1|0","uses":[],"kind":255,"storage":0},{"id":17,"usr":11868479818281317088,"detailed_name":"GLFW_APIENTRY_DEFINED","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_APIENTRY_DEFINED","comments":"","declarations":[],"spell":"127:10-127:31|-1|1|2","extent":"127:10-127:31|-1|1|0","uses":[],"kind":255,"storage":0},{"id":18,"usr":836637091925402938,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["196:16-196:33|-1|1|4"],"kind":0,"storage":0},{"id":19,"usr":15446305244061595289,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["239:15-239:23|-1|1|4"],"kind":0,"storage":0},{"id":20,"usr":10065997163911674879,"detailed_name":"GLFWAPI","short_name_offset":0,"short_name_size":7,"hover":"#define GLFWAPI","comments":"","declarations":[],"spell":"244:10-244:17|-1|1|2","extent":"244:10-244:17|-1|1|0","uses":["1765:1-1765:8|-1|1|4","1797:1-1797:8|-1|1|4","1829:1-1829:8|-1|1|4","1856:1-1856:8|-1|1|4","1887:1-1887:8|-1|1|4","1918:1-1918:8|-1|1|4","1964:1-1964:8|-1|1|4","1993:1-1993:8|-1|1|4","2017:1-2017:8|-1|1|4","2042:1-2042:8|-1|1|4","2073:1-2073:8|-1|1|4","2107:1-2107:8|-1|1|4","2139:1-2139:8|-1|1|4","2165:1-2165:8|-1|1|4","2191:1-2191:8|-1|1|4","2215:1-2215:8|-1|1|4","2245:1-2245:8|-1|1|4","2278:1-2278:8|-1|1|4","2306:1-2306:8|-1|1|4","2339:1-2339:8|-1|1|4","2369:1-2369:8|-1|1|4","2410:1-2410:8|-1|1|4","2429:1-2429:8|-1|1|4","2464:1-2464:8|-1|1|4","2502:1-2502:8|-1|1|4","2656:1-2656:8|-1|1|4","2685:1-2685:8|-1|1|4","2705:1-2705:8|-1|1|4","2727:1-2727:8|-1|1|4","2752:1-2752:8|-1|1|4","2799:1-2799:8|-1|1|4","2831:1-2831:8|-1|1|4","2866:1-2866:8|-1|1|4","2896:1-2896:8|-1|1|4","2939:1-2939:8|-1|1|4","2982:1-2982:8|-1|1|4","3023:1-3023:8|-1|1|4","3052:1-3052:8|-1|1|4","3089:1-3089:8|-1|1|4","3122:1-3122:8|-1|1|4","3149:1-3149:8|-1|1|4","3178:1-3178:8|-1|1|4","3209:1-3209:8|-1|1|4","3236:1-3236:8|-1|1|4","3261:1-3261:8|-1|1|4","3288:1-3288:8|-1|1|4","3310:1-3310:8|-1|1|4","3349:1-3349:8|-1|1|4","3376:1-3376:8|-1|1|4","3398:1-3398:8|-1|1|4","3457:1-3457:8|-1|1|4","3491:1-3491:8|-1|1|4","3528:1-3528:8|-1|1|4","3551:1-3551:8|-1|1|4","3572:1-3572:8|-1|1|4","3607:1-3607:8|-1|1|4","3639:1-3639:8|-1|1|4","3679:1-3679:8|-1|1|4","3715:1-3715:8|-1|1|4","3750:1-3750:8|-1|1|4","3783:1-3783:8|-1|1|4","3813:1-3813:8|-1|1|4","3843:1-3843:8|-1|1|4","3874:1-3874:8|-1|1|4","3912:1-3912:8|-1|1|4","3957:1-3957:8|-1|1|4","4006:1-4006:8|-1|1|4","4026:1-4026:8|-1|1|4","4051:1-4051:8|-1|1|4","4113:1-4113:8|-1|1|4","4142:1-4142:8|-1|1|4","4210:1-4210:8|-1|1|4","4234:1-4234:8|-1|1|4","4274:1-4274:8|-1|1|4","4303:1-4303:8|-1|1|4","4341:1-4341:8|-1|1|4","4381:1-4381:8|-1|1|4","4419:1-4419:8|-1|1|4","4442:1-4442:8|-1|1|4","4469:1-4469:8|-1|1|4","4496:1-4496:8|-1|1|4","4546:1-4546:8|-1|1|4","4589:1-4589:8|-1|1|4","4631:1-4631:8|-1|1|4","4668:1-4668:8|-1|1|4","4700:1-4700:8|-1|1|4","4731:1-4731:8|-1|1|4","4765:1-4765:8|-1|1|4","4802:1-4802:8|-1|1|4","4826:1-4826:8|-1|1|4","4859:1-4859:8|-1|1|4","4900:1-4900:8|-1|1|4","4957:1-4957:8|-1|1|4","4988:1-4988:8|-1|1|4","5029:1-5029:8|-1|1|4","5055:1-5055:8|-1|1|4","5079:1-5079:8|-1|1|4","5107:1-5107:8|-1|1|4","5143:1-5143:8|-1|1|4","5177:1-5177:8|-1|1|4","5207:1-5207:8|-1|1|4","5245:1-5245:8|-1|1|4","5270:1-5270:8|-1|1|4","5300:1-5300:8|-1|1|4","5330:1-5330:8|-1|1|4","5360:1-5360:8|-1|1|4","5382:1-5382:8|-1|1|4","5402:1-5402:8|-1|1|4","5440:1-5440:8|-1|1|4","5461:1-5461:8|-1|1|4","5495:1-5495:8|-1|1|4","5541:1-5541:8|-1|1|4","5579:1-5579:8|-1|1|4","5621:1-5621:8|-1|1|4","5649:1-5649:8|-1|1|4","5697:1-5697:8|-1|1|4"],"kind":255,"storage":0},{"id":21,"usr":16790052309848761383,"detailed_name":"GLFW_VERSION_MAJOR","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_VERSION_MAJOR          3","comments":"","declarations":[],"spell":"259:9-259:27|-1|1|2","extent":"259:9-259:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":22,"usr":5006873131195138118,"detailed_name":"GLFW_VERSION_MINOR","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_VERSION_MINOR          3","comments":"","declarations":[],"spell":"266:9-266:27|-1|1|2","extent":"266:9-266:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":23,"usr":6698404995123844422,"detailed_name":"GLFW_VERSION_REVISION","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_VERSION_REVISION       2","comments":"","declarations":[],"spell":"273:9-273:30|-1|1|2","extent":"273:9-273:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":24,"usr":7407428204929505639,"detailed_name":"GLFW_TRUE","short_name_offset":0,"short_name_size":9,"hover":"#define GLFW_TRUE                   1","comments":"","declarations":[],"spell":"284:9-284:18|-1|1|2","extent":"284:9-284:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":25,"usr":14736561427656041165,"detailed_name":"GLFW_FALSE","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_FALSE                  0","comments":"","declarations":[],"spell":"293:9-293:19|-1|1|2","extent":"293:9-293:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":26,"usr":340576561765208762,"detailed_name":"GLFW_RELEASE","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_RELEASE                0","comments":"","declarations":[],"spell":"303:9-303:21|-1|1|2","extent":"303:9-303:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":27,"usr":5351303330512687054,"detailed_name":"GLFW_PRESS","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_PRESS                  1","comments":"","declarations":[],"spell":"310:9-310:19|-1|1|2","extent":"310:9-310:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":28,"usr":6323939733908641090,"detailed_name":"GLFW_REPEAT","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_REPEAT                 2","comments":"","declarations":[],"spell":"317:9-317:20|-1|1|2","extent":"317:9-317:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":29,"usr":10885017438165357582,"detailed_name":"GLFW_HAT_CENTERED","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_HAT_CENTERED           0","comments":"","declarations":[],"spell":"327:9-327:26|-1|1|2","extent":"327:9-327:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":30,"usr":3788906845510007826,"detailed_name":"GLFW_HAT_UP","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_HAT_UP                 1","comments":"","declarations":[],"spell":"328:9-328:20|-1|1|2","extent":"328:9-328:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":31,"usr":9131500787593299036,"detailed_name":"GLFW_HAT_RIGHT","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_HAT_RIGHT              2","comments":"","declarations":[],"spell":"329:9-329:23|-1|1|2","extent":"329:9-329:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":32,"usr":5245798641822625623,"detailed_name":"GLFW_HAT_DOWN","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_HAT_DOWN               4","comments":"","declarations":[],"spell":"330:9-330:22|-1|1|2","extent":"330:9-330:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":33,"usr":13901888103955626217,"detailed_name":"GLFW_HAT_LEFT","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_HAT_LEFT               8","comments":"","declarations":[],"spell":"331:9-331:22|-1|1|2","extent":"331:9-331:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":34,"usr":13083544562722175798,"detailed_name":"GLFW_HAT_RIGHT_UP","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_HAT_RIGHT_UP           (GLFW_HAT_RIGHT | GLFW_HAT_UP)","comments":"","declarations":[],"spell":"332:9-332:26|-1|1|2","extent":"332:9-332:67|-1|1|0","uses":[],"kind":255,"storage":0},{"id":35,"usr":4047744327272329433,"detailed_name":"GLFW_HAT_RIGHT_DOWN","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_HAT_RIGHT_DOWN         (GLFW_HAT_RIGHT | GLFW_HAT_DOWN)","comments":"","declarations":[],"spell":"333:9-333:28|-1|1|2","extent":"333:9-333:69|-1|1|0","uses":[],"kind":255,"storage":0},{"id":36,"usr":12985572892674759400,"detailed_name":"GLFW_HAT_LEFT_UP","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_HAT_LEFT_UP            (GLFW_HAT_LEFT  | GLFW_HAT_UP)","comments":"","declarations":[],"spell":"334:9-334:25|-1|1|2","extent":"334:9-334:67|-1|1|0","uses":[],"kind":255,"storage":0},{"id":37,"usr":5738242961564090692,"detailed_name":"GLFW_HAT_LEFT_DOWN","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_HAT_LEFT_DOWN          (GLFW_HAT_LEFT  | GLFW_HAT_DOWN)","comments":"","declarations":[],"spell":"335:9-335:27|-1|1|2","extent":"335:9-335:69|-1|1|0","uses":[],"kind":255,"storage":0},{"id":38,"usr":10855607072874157890,"detailed_name":"GLFW_KEY_UNKNOWN","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_KEY_UNKNOWN            -1","comments":"","declarations":[],"spell":"363:9-363:25|-1|1|2","extent":"363:9-363:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":39,"usr":5208630509238671929,"detailed_name":"GLFW_KEY_SPACE","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_KEY_SPACE              32","comments":"","declarations":[],"spell":"366:9-366:23|-1|1|2","extent":"366:9-366:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":40,"usr":3418583134061280208,"detailed_name":"GLFW_KEY_APOSTROPHE","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_KEY_APOSTROPHE         39","comments":"","declarations":[],"spell":"367:9-367:28|-1|1|2","extent":"367:9-367:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":41,"usr":8969144319634118121,"detailed_name":"GLFW_KEY_COMMA","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_KEY_COMMA              44","comments":"","declarations":[],"spell":"368:9-368:23|-1|1|2","extent":"368:9-368:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":42,"usr":3082868062474612648,"detailed_name":"GLFW_KEY_MINUS","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_KEY_MINUS              45","comments":"","declarations":[],"spell":"369:9-369:23|-1|1|2","extent":"369:9-369:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":43,"usr":9994746132305293364,"detailed_name":"GLFW_KEY_PERIOD","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_KEY_PERIOD             46","comments":"","declarations":[],"spell":"370:9-370:24|-1|1|2","extent":"370:9-370:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":44,"usr":9355529903649701602,"detailed_name":"GLFW_KEY_SLASH","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_KEY_SLASH              47","comments":"","declarations":[],"spell":"371:9-371:23|-1|1|2","extent":"371:9-371:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":45,"usr":3284043636396430531,"detailed_name":"GLFW_KEY_0","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_0                  48","comments":"","declarations":[],"spell":"372:9-372:19|-1|1|2","extent":"372:9-372:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":46,"usr":16392987586196714725,"detailed_name":"GLFW_KEY_1","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_1                  49","comments":"","declarations":[],"spell":"373:9-373:19|-1|1|2","extent":"373:9-373:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":47,"usr":14391079678912178418,"detailed_name":"GLFW_KEY_2","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_2                  50","comments":"","declarations":[],"spell":"374:9-374:19|-1|1|2","extent":"374:9-374:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":48,"usr":11815301206287595076,"detailed_name":"GLFW_KEY_3","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_3                  51","comments":"","declarations":[],"spell":"375:9-375:19|-1|1|2","extent":"375:9-375:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":49,"usr":3898076682404312784,"detailed_name":"GLFW_KEY_4","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_4                  52","comments":"","declarations":[],"spell":"376:9-376:19|-1|1|2","extent":"376:9-376:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":50,"usr":12038730230904034852,"detailed_name":"GLFW_KEY_5","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_5                  53","comments":"","declarations":[],"spell":"377:9-377:19|-1|1|2","extent":"377:9-377:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":51,"usr":10665137579220258175,"detailed_name":"GLFW_KEY_6","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_6                  54","comments":"","declarations":[],"spell":"378:9-378:19|-1|1|2","extent":"378:9-378:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":52,"usr":14827871013517898358,"detailed_name":"GLFW_KEY_7","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_7                  55","comments":"","declarations":[],"spell":"379:9-379:19|-1|1|2","extent":"379:9-379:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":53,"usr":1414462859958380388,"detailed_name":"GLFW_KEY_8","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_8                  56","comments":"","declarations":[],"spell":"380:9-380:19|-1|1|2","extent":"380:9-380:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":54,"usr":16222324286094753517,"detailed_name":"GLFW_KEY_9","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_9                  57","comments":"","declarations":[],"spell":"381:9-381:19|-1|1|2","extent":"381:9-381:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":55,"usr":1140181107474224338,"detailed_name":"GLFW_KEY_SEMICOLON","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_KEY_SEMICOLON          59","comments":"","declarations":[],"spell":"382:9-382:27|-1|1|2","extent":"382:9-382:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":56,"usr":13739347312518219708,"detailed_name":"GLFW_KEY_EQUAL","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_KEY_EQUAL              61","comments":"","declarations":[],"spell":"383:9-383:23|-1|1|2","extent":"383:9-383:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":57,"usr":2971062954872094948,"detailed_name":"GLFW_KEY_A","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_A                  65","comments":"","declarations":[],"spell":"384:9-384:19|-1|1|2","extent":"384:9-384:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":58,"usr":4722362908358009904,"detailed_name":"GLFW_KEY_B","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_B                  66","comments":"","declarations":[],"spell":"385:9-385:19|-1|1|2","extent":"385:9-385:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":59,"usr":1716405719468462833,"detailed_name":"GLFW_KEY_C","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_C                  67","comments":"","declarations":[],"spell":"386:9-386:19|-1|1|2","extent":"386:9-386:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":60,"usr":11937785321605620754,"detailed_name":"GLFW_KEY_D","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_D                  68","comments":"","declarations":[],"spell":"387:9-387:19|-1|1|2","extent":"387:9-387:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":61,"usr":16814790828705132503,"detailed_name":"GLFW_KEY_E","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_E                  69","comments":"","declarations":[],"spell":"388:9-388:19|-1|1|2","extent":"388:9-388:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":62,"usr":1996444513982429421,"detailed_name":"GLFW_KEY_F","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_F                  70","comments":"","declarations":[],"spell":"389:9-389:19|-1|1|2","extent":"389:9-389:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":63,"usr":9910163244670249751,"detailed_name":"GLFW_KEY_G","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_G                  71","comments":"","declarations":[],"spell":"390:9-390:19|-1|1|2","extent":"390:9-390:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":64,"usr":3332113498884700091,"detailed_name":"GLFW_KEY_H","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_H                  72","comments":"","declarations":[],"spell":"391:9-391:19|-1|1|2","extent":"391:9-391:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":65,"usr":13753463805715050605,"detailed_name":"GLFW_KEY_I","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_I                  73","comments":"","declarations":[],"spell":"392:9-392:19|-1|1|2","extent":"392:9-392:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":66,"usr":10494856068934161883,"detailed_name":"GLFW_KEY_J","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_J                  74","comments":"","declarations":[],"spell":"393:9-393:19|-1|1|2","extent":"393:9-393:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":67,"usr":5512683746303557456,"detailed_name":"GLFW_KEY_K","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_K                  75","comments":"","declarations":[],"spell":"394:9-394:19|-1|1|2","extent":"394:9-394:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":68,"usr":5863024826955278150,"detailed_name":"GLFW_KEY_L","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_L                  76","comments":"","declarations":[],"spell":"395:9-395:19|-1|1|2","extent":"395:9-395:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":69,"usr":15097449100623222529,"detailed_name":"GLFW_KEY_M","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_M                  77","comments":"","declarations":[],"spell":"396:9-396:19|-1|1|2","extent":"396:9-396:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":70,"usr":15604796843625978717,"detailed_name":"GLFW_KEY_N","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_N                  78","comments":"","declarations":[],"spell":"397:9-397:19|-1|1|2","extent":"397:9-397:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":71,"usr":916920806529155500,"detailed_name":"GLFW_KEY_O","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_O                  79","comments":"","declarations":[],"spell":"398:9-398:19|-1|1|2","extent":"398:9-398:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":72,"usr":7408085602652826942,"detailed_name":"GLFW_KEY_P","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_P                  80","comments":"","declarations":[],"spell":"399:9-399:19|-1|1|2","extent":"399:9-399:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":73,"usr":5911993805417100696,"detailed_name":"GLFW_KEY_Q","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_Q                  81","comments":"","declarations":[],"spell":"400:9-400:19|-1|1|2","extent":"400:9-400:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":74,"usr":8732526110999262206,"detailed_name":"GLFW_KEY_R","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_R                  82","comments":"","declarations":[],"spell":"401:9-401:19|-1|1|2","extent":"401:9-401:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":75,"usr":16927231274460223496,"detailed_name":"GLFW_KEY_S","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_S                  83","comments":"","declarations":[],"spell":"402:9-402:19|-1|1|2","extent":"402:9-402:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":76,"usr":2185872327831588180,"detailed_name":"GLFW_KEY_T","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_T                  84","comments":"","declarations":[],"spell":"403:9-403:19|-1|1|2","extent":"403:9-403:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":77,"usr":5552398827558436925,"detailed_name":"GLFW_KEY_U","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_U                  85","comments":"","declarations":[],"spell":"404:9-404:19|-1|1|2","extent":"404:9-404:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":78,"usr":13158537100726139523,"detailed_name":"GLFW_KEY_V","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_V                  86","comments":"","declarations":[],"spell":"405:9-405:19|-1|1|2","extent":"405:9-405:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":79,"usr":8362074011338766071,"detailed_name":"GLFW_KEY_W","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_W                  87","comments":"","declarations":[],"spell":"406:9-406:19|-1|1|2","extent":"406:9-406:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":80,"usr":12967211704729679379,"detailed_name":"GLFW_KEY_X","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_X                  88","comments":"","declarations":[],"spell":"407:9-407:19|-1|1|2","extent":"407:9-407:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":81,"usr":6611179595940485838,"detailed_name":"GLFW_KEY_Y","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_Y                  89","comments":"","declarations":[],"spell":"408:9-408:19|-1|1|2","extent":"408:9-408:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":82,"usr":5504460314545751158,"detailed_name":"GLFW_KEY_Z","short_name_offset":0,"short_name_size":10,"hover":"#define GLFW_KEY_Z                  90","comments":"","declarations":[],"spell":"409:9-409:19|-1|1|2","extent":"409:9-409:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":83,"usr":13817116941089265992,"detailed_name":"GLFW_KEY_LEFT_BRACKET","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_KEY_LEFT_BRACKET       91","comments":"","declarations":[],"spell":"410:9-410:30|-1|1|2","extent":"410:9-410:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":84,"usr":13729309664432934339,"detailed_name":"GLFW_KEY_BACKSLASH","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_KEY_BACKSLASH          92","comments":"","declarations":[],"spell":"411:9-411:27|-1|1|2","extent":"411:9-411:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":85,"usr":7582695874302188621,"detailed_name":"GLFW_KEY_RIGHT_BRACKET","short_name_offset":0,"short_name_size":22,"hover":"#define GLFW_KEY_RIGHT_BRACKET      93","comments":"","declarations":[],"spell":"412:9-412:31|-1|1|2","extent":"412:9-412:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":86,"usr":3058668691296425224,"detailed_name":"GLFW_KEY_GRAVE_ACCENT","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_KEY_GRAVE_ACCENT       96","comments":"","declarations":[],"spell":"413:9-413:30|-1|1|2","extent":"413:9-413:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":87,"usr":3773161278074922271,"detailed_name":"GLFW_KEY_WORLD_1","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_KEY_WORLD_1            161","comments":"","declarations":[],"spell":"414:9-414:25|-1|1|2","extent":"414:9-414:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":88,"usr":14786513108080858805,"detailed_name":"GLFW_KEY_WORLD_2","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_KEY_WORLD_2            162","comments":"","declarations":[],"spell":"415:9-415:25|-1|1|2","extent":"415:9-415:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":89,"usr":15334534246727035708,"detailed_name":"GLFW_KEY_ESCAPE","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_KEY_ESCAPE             256","comments":"","declarations":[],"spell":"418:9-418:24|-1|1|2","extent":"418:9-418:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":90,"usr":12513810934357879488,"detailed_name":"GLFW_KEY_ENTER","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_KEY_ENTER              257","comments":"","declarations":[],"spell":"419:9-419:23|-1|1|2","extent":"419:9-419:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":91,"usr":5123347534025524973,"detailed_name":"GLFW_KEY_TAB","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_TAB                258","comments":"","declarations":[],"spell":"420:9-420:21|-1|1|2","extent":"420:9-420:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":92,"usr":14295316733206233309,"detailed_name":"GLFW_KEY_BACKSPACE","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_KEY_BACKSPACE          259","comments":"","declarations":[],"spell":"421:9-421:27|-1|1|2","extent":"421:9-421:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":93,"usr":13874627558718653940,"detailed_name":"GLFW_KEY_INSERT","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_KEY_INSERT             260","comments":"","declarations":[],"spell":"422:9-422:24|-1|1|2","extent":"422:9-422:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":94,"usr":10575285697853334453,"detailed_name":"GLFW_KEY_DELETE","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_KEY_DELETE             261","comments":"","declarations":[],"spell":"423:9-423:24|-1|1|2","extent":"423:9-423:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":95,"usr":9705301859987146786,"detailed_name":"GLFW_KEY_RIGHT","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_KEY_RIGHT              262","comments":"","declarations":[],"spell":"424:9-424:23|-1|1|2","extent":"424:9-424:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":96,"usr":6280456457287484336,"detailed_name":"GLFW_KEY_LEFT","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_LEFT               263","comments":"","declarations":[],"spell":"425:9-425:22|-1|1|2","extent":"425:9-425:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":97,"usr":761590284205985495,"detailed_name":"GLFW_KEY_DOWN","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_DOWN               264","comments":"","declarations":[],"spell":"426:9-426:22|-1|1|2","extent":"426:9-426:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":98,"usr":14058178518901933427,"detailed_name":"GLFW_KEY_UP","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_UP                 265","comments":"","declarations":[],"spell":"427:9-427:20|-1|1|2","extent":"427:9-427:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":99,"usr":3670337215402769365,"detailed_name":"GLFW_KEY_PAGE_UP","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_KEY_PAGE_UP            266","comments":"","declarations":[],"spell":"428:9-428:25|-1|1|2","extent":"428:9-428:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":100,"usr":10038265639369632850,"detailed_name":"GLFW_KEY_PAGE_DOWN","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_KEY_PAGE_DOWN          267","comments":"","declarations":[],"spell":"429:9-429:27|-1|1|2","extent":"429:9-429:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":101,"usr":12603999108492378071,"detailed_name":"GLFW_KEY_HOME","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_HOME               268","comments":"","declarations":[],"spell":"430:9-430:22|-1|1|2","extent":"430:9-430:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":102,"usr":14925259216075707240,"detailed_name":"GLFW_KEY_END","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_END                269","comments":"","declarations":[],"spell":"431:9-431:21|-1|1|2","extent":"431:9-431:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":103,"usr":10210931990873594244,"detailed_name":"GLFW_KEY_CAPS_LOCK","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_KEY_CAPS_LOCK          280","comments":"","declarations":[],"spell":"432:9-432:27|-1|1|2","extent":"432:9-432:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":104,"usr":7711894976366157361,"detailed_name":"GLFW_KEY_SCROLL_LOCK","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_KEY_SCROLL_LOCK        281","comments":"","declarations":[],"spell":"433:9-433:29|-1|1|2","extent":"433:9-433:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":105,"usr":17033653484864971982,"detailed_name":"GLFW_KEY_NUM_LOCK","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_KEY_NUM_LOCK           282","comments":"","declarations":[],"spell":"434:9-434:26|-1|1|2","extent":"434:9-434:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":106,"usr":4025221325498032131,"detailed_name":"GLFW_KEY_PRINT_SCREEN","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_KEY_PRINT_SCREEN       283","comments":"","declarations":[],"spell":"435:9-435:30|-1|1|2","extent":"435:9-435:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":107,"usr":13184426318109268746,"detailed_name":"GLFW_KEY_PAUSE","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_KEY_PAUSE              284","comments":"","declarations":[],"spell":"436:9-436:23|-1|1|2","extent":"436:9-436:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":108,"usr":9223639035555932997,"detailed_name":"GLFW_KEY_F1","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F1                 290","comments":"","declarations":[],"spell":"437:9-437:20|-1|1|2","extent":"437:9-437:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":109,"usr":13527917440126625017,"detailed_name":"GLFW_KEY_F2","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F2                 291","comments":"","declarations":[],"spell":"438:9-438:20|-1|1|2","extent":"438:9-438:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":110,"usr":4192739778175468547,"detailed_name":"GLFW_KEY_F3","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F3                 292","comments":"","declarations":[],"spell":"439:9-439:20|-1|1|2","extent":"439:9-439:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":111,"usr":13206086781118780756,"detailed_name":"GLFW_KEY_F4","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F4                 293","comments":"","declarations":[],"spell":"440:9-440:20|-1|1|2","extent":"440:9-440:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":112,"usr":15758309652817701512,"detailed_name":"GLFW_KEY_F5","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F5                 294","comments":"","declarations":[],"spell":"441:9-441:20|-1|1|2","extent":"441:9-441:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":113,"usr":14228484167544232952,"detailed_name":"GLFW_KEY_F6","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F6                 295","comments":"","declarations":[],"spell":"442:9-442:20|-1|1|2","extent":"442:9-442:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":114,"usr":1376631434702821457,"detailed_name":"GLFW_KEY_F7","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F7                 296","comments":"","declarations":[],"spell":"443:9-443:20|-1|1|2","extent":"443:9-443:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":115,"usr":6098712728946706854,"detailed_name":"GLFW_KEY_F8","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F8                 297","comments":"","declarations":[],"spell":"444:9-444:20|-1|1|2","extent":"444:9-444:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":116,"usr":12166835690892867570,"detailed_name":"GLFW_KEY_F9","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_KEY_F9                 298","comments":"","declarations":[],"spell":"445:9-445:20|-1|1|2","extent":"445:9-445:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":117,"usr":150410025338849092,"detailed_name":"GLFW_KEY_F10","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F10                299","comments":"","declarations":[],"spell":"446:9-446:21|-1|1|2","extent":"446:9-446:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":118,"usr":10136913062641246176,"detailed_name":"GLFW_KEY_F11","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F11                300","comments":"","declarations":[],"spell":"447:9-447:21|-1|1|2","extent":"447:9-447:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":119,"usr":2951446577582496098,"detailed_name":"GLFW_KEY_F12","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F12                301","comments":"","declarations":[],"spell":"448:9-448:21|-1|1|2","extent":"448:9-448:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":120,"usr":15630143414158719091,"detailed_name":"GLFW_KEY_F13","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F13                302","comments":"","declarations":[],"spell":"449:9-449:21|-1|1|2","extent":"449:9-449:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":121,"usr":2205869841105140375,"detailed_name":"GLFW_KEY_F14","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F14                303","comments":"","declarations":[],"spell":"450:9-450:21|-1|1|2","extent":"450:9-450:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":122,"usr":2935171409414873607,"detailed_name":"GLFW_KEY_F15","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F15                304","comments":"","declarations":[],"spell":"451:9-451:21|-1|1|2","extent":"451:9-451:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":123,"usr":208441621279152441,"detailed_name":"GLFW_KEY_F16","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F16                305","comments":"","declarations":[],"spell":"452:9-452:21|-1|1|2","extent":"452:9-452:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":124,"usr":14913181778822983836,"detailed_name":"GLFW_KEY_F17","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F17                306","comments":"","declarations":[],"spell":"453:9-453:21|-1|1|2","extent":"453:9-453:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":125,"usr":1112858130789392565,"detailed_name":"GLFW_KEY_F18","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F18                307","comments":"","declarations":[],"spell":"454:9-454:21|-1|1|2","extent":"454:9-454:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":126,"usr":4518631238822434761,"detailed_name":"GLFW_KEY_F19","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F19                308","comments":"","declarations":[],"spell":"455:9-455:21|-1|1|2","extent":"455:9-455:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":127,"usr":8498600778075364861,"detailed_name":"GLFW_KEY_F20","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F20                309","comments":"","declarations":[],"spell":"456:9-456:21|-1|1|2","extent":"456:9-456:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":128,"usr":5606868173476201140,"detailed_name":"GLFW_KEY_F21","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F21                310","comments":"","declarations":[],"spell":"457:9-457:21|-1|1|2","extent":"457:9-457:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":129,"usr":10200745201816747005,"detailed_name":"GLFW_KEY_F22","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F22                311","comments":"","declarations":[],"spell":"458:9-458:21|-1|1|2","extent":"458:9-458:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":130,"usr":15464203664446166747,"detailed_name":"GLFW_KEY_F23","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F23                312","comments":"","declarations":[],"spell":"459:9-459:21|-1|1|2","extent":"459:9-459:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":131,"usr":3362878479818643213,"detailed_name":"GLFW_KEY_F24","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F24                313","comments":"","declarations":[],"spell":"460:9-460:21|-1|1|2","extent":"460:9-460:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":132,"usr":17370041162796217722,"detailed_name":"GLFW_KEY_F25","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_KEY_F25                314","comments":"","declarations":[],"spell":"461:9-461:21|-1|1|2","extent":"461:9-461:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":133,"usr":16386808610835408139,"detailed_name":"GLFW_KEY_KP_0","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_0               320","comments":"","declarations":[],"spell":"462:9-462:22|-1|1|2","extent":"462:9-462:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":134,"usr":2590777113995277212,"detailed_name":"GLFW_KEY_KP_1","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_1               321","comments":"","declarations":[],"spell":"463:9-463:22|-1|1|2","extent":"463:9-463:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":135,"usr":13786174116357157174,"detailed_name":"GLFW_KEY_KP_2","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_2               322","comments":"","declarations":[],"spell":"464:9-464:22|-1|1|2","extent":"464:9-464:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":136,"usr":11034528982966000179,"detailed_name":"GLFW_KEY_KP_3","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_3               323","comments":"","declarations":[],"spell":"465:9-465:22|-1|1|2","extent":"465:9-465:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":137,"usr":11164909019944425545,"detailed_name":"GLFW_KEY_KP_4","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_4               324","comments":"","declarations":[],"spell":"466:9-466:22|-1|1|2","extent":"466:9-466:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":138,"usr":3720556973534175642,"detailed_name":"GLFW_KEY_KP_5","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_5               325","comments":"","declarations":[],"spell":"467:9-467:22|-1|1|2","extent":"467:9-467:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":139,"usr":14449789633541179761,"detailed_name":"GLFW_KEY_KP_6","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_6               326","comments":"","declarations":[],"spell":"468:9-468:22|-1|1|2","extent":"468:9-468:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":140,"usr":8070283455345559855,"detailed_name":"GLFW_KEY_KP_7","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_7               327","comments":"","declarations":[],"spell":"469:9-469:22|-1|1|2","extent":"469:9-469:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":141,"usr":8738864196395295293,"detailed_name":"GLFW_KEY_KP_8","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_8               328","comments":"","declarations":[],"spell":"470:9-470:22|-1|1|2","extent":"470:9-470:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":142,"usr":17689878461040104347,"detailed_name":"GLFW_KEY_KP_9","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_KP_9               329","comments":"","declarations":[],"spell":"471:9-471:22|-1|1|2","extent":"471:9-471:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":143,"usr":12931590420318722541,"detailed_name":"GLFW_KEY_KP_DECIMAL","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_KEY_KP_DECIMAL         330","comments":"","declarations":[],"spell":"472:9-472:28|-1|1|2","extent":"472:9-472:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":144,"usr":9806737666819465751,"detailed_name":"GLFW_KEY_KP_DIVIDE","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_KEY_KP_DIVIDE          331","comments":"","declarations":[],"spell":"473:9-473:27|-1|1|2","extent":"473:9-473:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":145,"usr":6695260529869440762,"detailed_name":"GLFW_KEY_KP_MULTIPLY","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_KEY_KP_MULTIPLY        332","comments":"","declarations":[],"spell":"474:9-474:29|-1|1|2","extent":"474:9-474:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":146,"usr":3949122714862819615,"detailed_name":"GLFW_KEY_KP_SUBTRACT","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_KEY_KP_SUBTRACT        333","comments":"","declarations":[],"spell":"475:9-475:29|-1|1|2","extent":"475:9-475:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":147,"usr":3087801371934822995,"detailed_name":"GLFW_KEY_KP_ADD","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_KEY_KP_ADD             334","comments":"","declarations":[],"spell":"476:9-476:24|-1|1|2","extent":"476:9-476:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":148,"usr":12584147713143648051,"detailed_name":"GLFW_KEY_KP_ENTER","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_KEY_KP_ENTER           335","comments":"","declarations":[],"spell":"477:9-477:26|-1|1|2","extent":"477:9-477:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":149,"usr":12465343538453045164,"detailed_name":"GLFW_KEY_KP_EQUAL","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_KEY_KP_EQUAL           336","comments":"","declarations":[],"spell":"478:9-478:26|-1|1|2","extent":"478:9-478:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":150,"usr":15289002840243377502,"detailed_name":"GLFW_KEY_LEFT_SHIFT","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_KEY_LEFT_SHIFT         340","comments":"","declarations":[],"spell":"479:9-479:28|-1|1|2","extent":"479:9-479:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":151,"usr":15735804311941758281,"detailed_name":"GLFW_KEY_LEFT_CONTROL","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_KEY_LEFT_CONTROL       341","comments":"","declarations":[],"spell":"480:9-480:30|-1|1|2","extent":"480:9-480:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":152,"usr":1177419584175343256,"detailed_name":"GLFW_KEY_LEFT_ALT","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_KEY_LEFT_ALT           342","comments":"","declarations":[],"spell":"481:9-481:26|-1|1|2","extent":"481:9-481:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":153,"usr":13540920138805593600,"detailed_name":"GLFW_KEY_LEFT_SUPER","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_KEY_LEFT_SUPER         343","comments":"","declarations":[],"spell":"482:9-482:28|-1|1|2","extent":"482:9-482:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":154,"usr":9988665318750070771,"detailed_name":"GLFW_KEY_RIGHT_SHIFT","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_KEY_RIGHT_SHIFT        344","comments":"","declarations":[],"spell":"483:9-483:29|-1|1|2","extent":"483:9-483:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":155,"usr":9301284483011392987,"detailed_name":"GLFW_KEY_RIGHT_CONTROL","short_name_offset":0,"short_name_size":22,"hover":"#define GLFW_KEY_RIGHT_CONTROL      345","comments":"","declarations":[],"spell":"484:9-484:31|-1|1|2","extent":"484:9-484:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":156,"usr":15838561551983589611,"detailed_name":"GLFW_KEY_RIGHT_ALT","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_KEY_RIGHT_ALT          346","comments":"","declarations":[],"spell":"485:9-485:27|-1|1|2","extent":"485:9-485:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":157,"usr":11883369206414487592,"detailed_name":"GLFW_KEY_RIGHT_SUPER","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_KEY_RIGHT_SUPER        347","comments":"","declarations":[],"spell":"486:9-486:29|-1|1|2","extent":"486:9-486:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":158,"usr":11820795095970096750,"detailed_name":"GLFW_KEY_MENU","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_MENU               348","comments":"","declarations":[],"spell":"487:9-487:22|-1|1|2","extent":"487:9-487:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":159,"usr":8637606956293366916,"detailed_name":"GLFW_KEY_LAST","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_KEY_LAST               GLFW_KEY_MENU","comments":"","declarations":[],"spell":"489:9-489:22|-1|1|2","extent":"489:9-489:50|-1|1|0","uses":[],"kind":255,"storage":0},{"id":160,"usr":11731486721651843831,"detailed_name":"GLFW_MOD_SHIFT","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_MOD_SHIFT           0x0001","comments":"","declarations":[],"spell":"505:9-505:23|-1|1|2","extent":"505:9-505:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":161,"usr":5496124280050890226,"detailed_name":"GLFW_MOD_CONTROL","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_MOD_CONTROL         0x0002","comments":"","declarations":[],"spell":"510:9-510:25|-1|1|2","extent":"510:9-510:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":162,"usr":1386167834794483203,"detailed_name":"GLFW_MOD_ALT","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_MOD_ALT             0x0004","comments":"","declarations":[],"spell":"515:9-515:21|-1|1|2","extent":"515:9-515:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":163,"usr":3655440936668623506,"detailed_name":"GLFW_MOD_SUPER","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_MOD_SUPER           0x0008","comments":"","declarations":[],"spell":"520:9-520:23|-1|1|2","extent":"520:9-520:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":164,"usr":1678946996983733530,"detailed_name":"GLFW_MOD_CAPS_LOCK","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_MOD_CAPS_LOCK       0x0010","comments":"","declarations":[],"spell":"526:9-526:27|-1|1|2","extent":"526:9-526:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":165,"usr":15378507984713408856,"detailed_name":"GLFW_MOD_NUM_LOCK","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_MOD_NUM_LOCK        0x0020","comments":"","declarations":[],"spell":"532:9-532:26|-1|1|2","extent":"532:9-532:40|-1|1|0","uses":[],"kind":255,"storage":0},{"id":166,"usr":8691788369536053877,"detailed_name":"GLFW_MOUSE_BUTTON_1","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_MOUSE_BUTTON_1         0","comments":"","declarations":[],"spell":"543:9-543:28|-1|1|2","extent":"543:9-543:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":167,"usr":11195533480211208094,"detailed_name":"GLFW_MOUSE_BUTTON_2","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_MOUSE_BUTTON_2         1","comments":"","declarations":[],"spell":"544:9-544:28|-1|1|2","extent":"544:9-544:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":168,"usr":117670586760581693,"detailed_name":"GLFW_MOUSE_BUTTON_3","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_MOUSE_BUTTON_3         2","comments":"","declarations":[],"spell":"545:9-545:28|-1|1|2","extent":"545:9-545:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":169,"usr":10608469797565229296,"detailed_name":"GLFW_MOUSE_BUTTON_4","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_MOUSE_BUTTON_4         3","comments":"","declarations":[],"spell":"546:9-546:28|-1|1|2","extent":"546:9-546:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":170,"usr":9373653195542934850,"detailed_name":"GLFW_MOUSE_BUTTON_5","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_MOUSE_BUTTON_5         4","comments":"","declarations":[],"spell":"547:9-547:28|-1|1|2","extent":"547:9-547:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":171,"usr":16653674570942587560,"detailed_name":"GLFW_MOUSE_BUTTON_6","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_MOUSE_BUTTON_6         5","comments":"","declarations":[],"spell":"548:9-548:28|-1|1|2","extent":"548:9-548:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":172,"usr":10952329501074549402,"detailed_name":"GLFW_MOUSE_BUTTON_7","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_MOUSE_BUTTON_7         6","comments":"","declarations":[],"spell":"549:9-549:28|-1|1|2","extent":"549:9-549:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":173,"usr":5826215684126325865,"detailed_name":"GLFW_MOUSE_BUTTON_8","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_MOUSE_BUTTON_8         7","comments":"","declarations":[],"spell":"550:9-550:28|-1|1|2","extent":"550:9-550:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":174,"usr":13531108169348931186,"detailed_name":"GLFW_MOUSE_BUTTON_LAST","short_name_offset":0,"short_name_size":22,"hover":"#define GLFW_MOUSE_BUTTON_LAST      GLFW_MOUSE_BUTTON_8","comments":"","declarations":[],"spell":"551:9-551:31|-1|1|2","extent":"551:9-551:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":175,"usr":8182281451999159902,"detailed_name":"GLFW_MOUSE_BUTTON_LEFT","short_name_offset":0,"short_name_size":22,"hover":"#define GLFW_MOUSE_BUTTON_LEFT      GLFW_MOUSE_BUTTON_1","comments":"","declarations":[],"spell":"552:9-552:31|-1|1|2","extent":"552:9-552:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":176,"usr":11678843958177709093,"detailed_name":"GLFW_MOUSE_BUTTON_RIGHT","short_name_offset":0,"short_name_size":23,"hover":"#define GLFW_MOUSE_BUTTON_RIGHT     GLFW_MOUSE_BUTTON_2","comments":"","declarations":[],"spell":"553:9-553:32|-1|1|2","extent":"553:9-553:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":177,"usr":5529325843322078852,"detailed_name":"GLFW_MOUSE_BUTTON_MIDDLE","short_name_offset":0,"short_name_size":24,"hover":"#define GLFW_MOUSE_BUTTON_MIDDLE    GLFW_MOUSE_BUTTON_3","comments":"","declarations":[],"spell":"554:9-554:33|-1|1|2","extent":"554:9-554:56|-1|1|0","uses":[],"kind":255,"storage":0},{"id":178,"usr":5142968323717173363,"detailed_name":"GLFW_JOYSTICK_1","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_1             0","comments":"","declarations":[],"spell":"564:9-564:24|-1|1|2","extent":"564:9-564:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":179,"usr":1636371658665167919,"detailed_name":"GLFW_JOYSTICK_2","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_2             1","comments":"","declarations":[],"spell":"565:9-565:24|-1|1|2","extent":"565:9-565:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":180,"usr":10857274223217902295,"detailed_name":"GLFW_JOYSTICK_3","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_3             2","comments":"","declarations":[],"spell":"566:9-566:24|-1|1|2","extent":"566:9-566:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":181,"usr":13925086791817422881,"detailed_name":"GLFW_JOYSTICK_4","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_4             3","comments":"","declarations":[],"spell":"567:9-567:24|-1|1|2","extent":"567:9-567:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":182,"usr":15871760590682192089,"detailed_name":"GLFW_JOYSTICK_5","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_5             4","comments":"","declarations":[],"spell":"568:9-568:24|-1|1|2","extent":"568:9-568:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":183,"usr":2058685006435787817,"detailed_name":"GLFW_JOYSTICK_6","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_6             5","comments":"","declarations":[],"spell":"569:9-569:24|-1|1|2","extent":"569:9-569:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":184,"usr":11254532910279083949,"detailed_name":"GLFW_JOYSTICK_7","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_7             6","comments":"","declarations":[],"spell":"570:9-570:24|-1|1|2","extent":"570:9-570:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":185,"usr":5703062106140216866,"detailed_name":"GLFW_JOYSTICK_8","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_8             7","comments":"","declarations":[],"spell":"571:9-571:24|-1|1|2","extent":"571:9-571:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":186,"usr":7188627639894510251,"detailed_name":"GLFW_JOYSTICK_9","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_JOYSTICK_9             8","comments":"","declarations":[],"spell":"572:9-572:24|-1|1|2","extent":"572:9-572:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":187,"usr":12217994970355376321,"detailed_name":"GLFW_JOYSTICK_10","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_JOYSTICK_10            9","comments":"","declarations":[],"spell":"573:9-573:25|-1|1|2","extent":"573:9-573:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":188,"usr":14970278048288165619,"detailed_name":"GLFW_JOYSTICK_11","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_JOYSTICK_11            10","comments":"","declarations":[],"spell":"574:9-574:25|-1|1|2","extent":"574:9-574:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":189,"usr":13724269464340374634,"detailed_name":"GLFW_JOYSTICK_12","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_JOYSTICK_12            11","comments":"","declarations":[],"spell":"575:9-575:25|-1|1|2","extent":"575:9-575:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":190,"usr":9710555775944617515,"detailed_name":"GLFW_JOYSTICK_13","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_JOYSTICK_13            12","comments":"","declarations":[],"spell":"576:9-576:25|-1|1|2","extent":"576:9-576:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":191,"usr":12782180139936261368,"detailed_name":"GLFW_JOYSTICK_14","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_JOYSTICK_14            13","comments":"","declarations":[],"spell":"577:9-577:25|-1|1|2","extent":"577:9-577:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":192,"usr":14698458891904970781,"detailed_name":"GLFW_JOYSTICK_15","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_JOYSTICK_15            14","comments":"","declarations":[],"spell":"578:9-578:25|-1|1|2","extent":"578:9-578:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":193,"usr":9501451790454113743,"detailed_name":"GLFW_JOYSTICK_16","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_JOYSTICK_16            15","comments":"","declarations":[],"spell":"579:9-579:25|-1|1|2","extent":"579:9-579:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":194,"usr":16271909572534507927,"detailed_name":"GLFW_JOYSTICK_LAST","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_JOYSTICK_LAST          GLFW_JOYSTICK_16","comments":"","declarations":[],"spell":"580:9-580:27|-1|1|2","extent":"580:9-580:53|-1|1|0","uses":[],"kind":255,"storage":0},{"id":195,"usr":11789685852782770126,"detailed_name":"GLFW_GAMEPAD_BUTTON_A","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_GAMEPAD_BUTTON_A               0","comments":"","declarations":[],"spell":"590:9-590:30|-1|1|2","extent":"590:9-590:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":196,"usr":6702561334468415606,"detailed_name":"GLFW_GAMEPAD_BUTTON_B","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_GAMEPAD_BUTTON_B               1","comments":"","declarations":[],"spell":"591:9-591:30|-1|1|2","extent":"591:9-591:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":197,"usr":1430229583758990949,"detailed_name":"GLFW_GAMEPAD_BUTTON_X","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_GAMEPAD_BUTTON_X               2","comments":"","declarations":[],"spell":"592:9-592:30|-1|1|2","extent":"592:9-592:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":198,"usr":13318405564197146023,"detailed_name":"GLFW_GAMEPAD_BUTTON_Y","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_GAMEPAD_BUTTON_Y               3","comments":"","declarations":[],"spell":"593:9-593:30|-1|1|2","extent":"593:9-593:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":199,"usr":3155821830691713049,"detailed_name":"GLFW_GAMEPAD_BUTTON_LEFT_BUMPER","short_name_offset":0,"short_name_size":31,"hover":"#define GLFW_GAMEPAD_BUTTON_LEFT_BUMPER     4","comments":"","declarations":[],"spell":"594:9-594:40|-1|1|2","extent":"594:9-594:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":200,"usr":2449867122170774746,"detailed_name":"GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER","short_name_offset":0,"short_name_size":32,"hover":"#define GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER    5","comments":"","declarations":[],"spell":"595:9-595:41|-1|1|2","extent":"595:9-595:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":201,"usr":4610623739848030822,"detailed_name":"GLFW_GAMEPAD_BUTTON_BACK","short_name_offset":0,"short_name_size":24,"hover":"#define GLFW_GAMEPAD_BUTTON_BACK            6","comments":"","declarations":[],"spell":"596:9-596:33|-1|1|2","extent":"596:9-596:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":202,"usr":10619086580024644270,"detailed_name":"GLFW_GAMEPAD_BUTTON_START","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_GAMEPAD_BUTTON_START           7","comments":"","declarations":[],"spell":"597:9-597:34|-1|1|2","extent":"597:9-597:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":203,"usr":16939102479749991243,"detailed_name":"GLFW_GAMEPAD_BUTTON_GUIDE","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_GAMEPAD_BUTTON_GUIDE           8","comments":"","declarations":[],"spell":"598:9-598:34|-1|1|2","extent":"598:9-598:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":204,"usr":1380391875914763356,"detailed_name":"GLFW_GAMEPAD_BUTTON_LEFT_THUMB","short_name_offset":0,"short_name_size":30,"hover":"#define GLFW_GAMEPAD_BUTTON_LEFT_THUMB      9","comments":"","declarations":[],"spell":"599:9-599:39|-1|1|2","extent":"599:9-599:46|-1|1|0","uses":[],"kind":255,"storage":0},{"id":205,"usr":16599769701208179824,"detailed_name":"GLFW_GAMEPAD_BUTTON_RIGHT_THUMB","short_name_offset":0,"short_name_size":31,"hover":"#define GLFW_GAMEPAD_BUTTON_RIGHT_THUMB     10","comments":"","declarations":[],"spell":"600:9-600:40|-1|1|2","extent":"600:9-600:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":206,"usr":17876464278976554406,"detailed_name":"GLFW_GAMEPAD_BUTTON_DPAD_UP","short_name_offset":0,"short_name_size":27,"hover":"#define GLFW_GAMEPAD_BUTTON_DPAD_UP         11","comments":"","declarations":[],"spell":"601:9-601:36|-1|1|2","extent":"601:9-601:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":207,"usr":3977748664681008973,"detailed_name":"GLFW_GAMEPAD_BUTTON_DPAD_RIGHT","short_name_offset":0,"short_name_size":30,"hover":"#define GLFW_GAMEPAD_BUTTON_DPAD_RIGHT      12","comments":"","declarations":[],"spell":"602:9-602:39|-1|1|2","extent":"602:9-602:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":208,"usr":12192238549370883339,"detailed_name":"GLFW_GAMEPAD_BUTTON_DPAD_DOWN","short_name_offset":0,"short_name_size":29,"hover":"#define GLFW_GAMEPAD_BUTTON_DPAD_DOWN       13","comments":"","declarations":[],"spell":"603:9-603:38|-1|1|2","extent":"603:9-603:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":209,"usr":18066846701425003559,"detailed_name":"GLFW_GAMEPAD_BUTTON_DPAD_LEFT","short_name_offset":0,"short_name_size":29,"hover":"#define GLFW_GAMEPAD_BUTTON_DPAD_LEFT       14","comments":"","declarations":[],"spell":"604:9-604:38|-1|1|2","extent":"604:9-604:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":210,"usr":1602996626996631719,"detailed_name":"GLFW_GAMEPAD_BUTTON_LAST","short_name_offset":0,"short_name_size":24,"hover":"#define GLFW_GAMEPAD_BUTTON_LAST            GLFW_GAMEPAD_BUTTON_DPAD_LEFT","comments":"","declarations":[],"spell":"605:9-605:33|-1|1|2","extent":"605:9-605:74|-1|1|0","uses":[],"kind":255,"storage":0},{"id":211,"usr":12741374090436893172,"detailed_name":"GLFW_GAMEPAD_BUTTON_CROSS","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_GAMEPAD_BUTTON_CROSS       GLFW_GAMEPAD_BUTTON_A","comments":"","declarations":[],"spell":"607:9-607:34|-1|1|2","extent":"607:9-607:62|-1|1|0","uses":[],"kind":255,"storage":0},{"id":212,"usr":18339751122776275789,"detailed_name":"GLFW_GAMEPAD_BUTTON_CIRCLE","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_GAMEPAD_BUTTON_CIRCLE      GLFW_GAMEPAD_BUTTON_B","comments":"","declarations":[],"spell":"608:9-608:35|-1|1|2","extent":"608:9-608:62|-1|1|0","uses":[],"kind":255,"storage":0},{"id":213,"usr":13949246620386485086,"detailed_name":"GLFW_GAMEPAD_BUTTON_SQUARE","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_GAMEPAD_BUTTON_SQUARE      GLFW_GAMEPAD_BUTTON_X","comments":"","declarations":[],"spell":"609:9-609:35|-1|1|2","extent":"609:9-609:62|-1|1|0","uses":[],"kind":255,"storage":0},{"id":214,"usr":15058666067101535076,"detailed_name":"GLFW_GAMEPAD_BUTTON_TRIANGLE","short_name_offset":0,"short_name_size":28,"hover":"#define GLFW_GAMEPAD_BUTTON_TRIANGLE    GLFW_GAMEPAD_BUTTON_Y","comments":"","declarations":[],"spell":"610:9-610:37|-1|1|2","extent":"610:9-610:62|-1|1|0","uses":[],"kind":255,"storage":0},{"id":215,"usr":6207201932447448164,"detailed_name":"GLFW_GAMEPAD_AXIS_LEFT_X","short_name_offset":0,"short_name_size":24,"hover":"#define GLFW_GAMEPAD_AXIS_LEFT_X        0","comments":"","declarations":[],"spell":"620:9-620:33|-1|1|2","extent":"620:9-620:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":216,"usr":313742734444523605,"detailed_name":"GLFW_GAMEPAD_AXIS_LEFT_Y","short_name_offset":0,"short_name_size":24,"hover":"#define GLFW_GAMEPAD_AXIS_LEFT_Y        1","comments":"","declarations":[],"spell":"621:9-621:33|-1|1|2","extent":"621:9-621:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":217,"usr":8534287803641244547,"detailed_name":"GLFW_GAMEPAD_AXIS_RIGHT_X","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_GAMEPAD_AXIS_RIGHT_X       2","comments":"","declarations":[],"spell":"622:9-622:34|-1|1|2","extent":"622:9-622:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":218,"usr":12386291938585327892,"detailed_name":"GLFW_GAMEPAD_AXIS_RIGHT_Y","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_GAMEPAD_AXIS_RIGHT_Y       3","comments":"","declarations":[],"spell":"623:9-623:34|-1|1|2","extent":"623:9-623:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":219,"usr":2649588518546635906,"detailed_name":"GLFW_GAMEPAD_AXIS_LEFT_TRIGGER","short_name_offset":0,"short_name_size":30,"hover":"#define GLFW_GAMEPAD_AXIS_LEFT_TRIGGER  4","comments":"","declarations":[],"spell":"624:9-624:39|-1|1|2","extent":"624:9-624:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":220,"usr":12786471906264329974,"detailed_name":"GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER","short_name_offset":0,"short_name_size":31,"hover":"#define GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER 5","comments":"","declarations":[],"spell":"625:9-625:40|-1|1|2","extent":"625:9-625:42|-1|1|0","uses":[],"kind":255,"storage":0},{"id":221,"usr":6274064797392137085,"detailed_name":"GLFW_GAMEPAD_AXIS_LAST","short_name_offset":0,"short_name_size":22,"hover":"#define GLFW_GAMEPAD_AXIS_LAST          GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER","comments":"","declarations":[],"spell":"626:9-626:31|-1|1|2","extent":"626:9-626:72|-1|1|0","uses":[],"kind":255,"storage":0},{"id":222,"usr":15986551480195387654,"detailed_name":"GLFW_NO_ERROR","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_NO_ERROR               0","comments":"","declarations":[],"spell":"642:9-642:22|-1|1|2","extent":"642:9-642:38|-1|1|0","uses":[],"kind":255,"storage":0},{"id":223,"usr":16558854331474957129,"detailed_name":"GLFW_NOT_INITIALIZED","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_NOT_INITIALIZED        0x00010001","comments":"","declarations":[],"spell":"651:9-651:29|-1|1|2","extent":"651:9-651:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":224,"usr":7821274443422741497,"detailed_name":"GLFW_NO_CURRENT_CONTEXT","short_name_offset":0,"short_name_size":23,"hover":"#define GLFW_NO_CURRENT_CONTEXT     0x00010002","comments":"","declarations":[],"spell":"661:9-661:32|-1|1|2","extent":"661:9-661:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":225,"usr":15072679263719462880,"detailed_name":"GLFW_INVALID_ENUM","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_INVALID_ENUM           0x00010003","comments":"","declarations":[],"spell":"669:9-669:26|-1|1|2","extent":"669:9-669:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":226,"usr":18028574211461919546,"detailed_name":"GLFW_INVALID_VALUE","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_INVALID_VALUE          0x00010004","comments":"","declarations":[],"spell":"680:9-680:27|-1|1|2","extent":"680:9-680:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":227,"usr":4073468357534488054,"detailed_name":"GLFW_OUT_OF_MEMORY","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_OUT_OF_MEMORY          0x00010005","comments":"","declarations":[],"spell":"688:9-688:27|-1|1|2","extent":"688:9-688:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":228,"usr":772097032613138322,"detailed_name":"GLFW_API_UNAVAILABLE","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_API_UNAVAILABLE        0x00010006","comments":"","declarations":[],"spell":"704:9-704:29|-1|1|2","extent":"704:9-704:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":229,"usr":7385229918385481844,"detailed_name":"GLFW_VERSION_UNAVAILABLE","short_name_offset":0,"short_name_size":24,"hover":"#define GLFW_VERSION_UNAVAILABLE    0x00010007","comments":"","declarations":[],"spell":"721:9-721:33|-1|1|2","extent":"721:9-721:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":230,"usr":5899819715671594490,"detailed_name":"GLFW_PLATFORM_ERROR","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_PLATFORM_ERROR         0x00010008","comments":"","declarations":[],"spell":"732:9-732:28|-1|1|2","extent":"732:9-732:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":231,"usr":14126034230643493884,"detailed_name":"GLFW_FORMAT_UNAVAILABLE","short_name_offset":0,"short_name_size":23,"hover":"#define GLFW_FORMAT_UNAVAILABLE     0x00010009","comments":"","declarations":[],"spell":"751:9-751:32|-1|1|2","extent":"751:9-751:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":232,"usr":5219732102467224567,"detailed_name":"GLFW_NO_WINDOW_CONTEXT","short_name_offset":0,"short_name_size":22,"hover":"#define GLFW_NO_WINDOW_CONTEXT      0x0001000A","comments":"","declarations":[],"spell":"759:9-759:31|-1|1|2","extent":"759:9-759:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":233,"usr":1878222547062569859,"detailed_name":"GLFW_FOCUSED","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_FOCUSED                0x00020001","comments":"","declarations":[],"spell":"769:9-769:21|-1|1|2","extent":"769:9-769:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":234,"usr":16552525097811556377,"detailed_name":"GLFW_ICONIFIED","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_ICONIFIED              0x00020002","comments":"","declarations":[],"spell":"774:9-774:23|-1|1|2","extent":"774:9-774:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":235,"usr":3427814850882227871,"detailed_name":"GLFW_RESIZABLE","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_RESIZABLE              0x00020003","comments":"","declarations":[],"spell":"780:9-780:23|-1|1|2","extent":"780:9-780:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":236,"usr":3766022854221868615,"detailed_name":"GLFW_VISIBLE","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_VISIBLE                0x00020004","comments":"","declarations":[],"spell":"786:9-786:21|-1|1|2","extent":"786:9-786:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":237,"usr":17210967447409831891,"detailed_name":"GLFW_DECORATED","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_DECORATED              0x00020005","comments":"","declarations":[],"spell":"792:9-792:23|-1|1|2","extent":"792:9-792:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":238,"usr":10958375987239145968,"detailed_name":"GLFW_AUTO_ICONIFY","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_AUTO_ICONIFY           0x00020006","comments":"","declarations":[],"spell":"798:9-798:26|-1|1|2","extent":"798:9-798:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":239,"usr":14352972492761802352,"detailed_name":"GLFW_FLOATING","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_FLOATING               0x00020007","comments":"","declarations":[],"spell":"804:9-804:22|-1|1|2","extent":"804:9-804:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":240,"usr":10240559501354774051,"detailed_name":"GLFW_MAXIMIZED","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_MAXIMIZED              0x00020008","comments":"","declarations":[],"spell":"810:9-810:23|-1|1|2","extent":"810:9-810:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":241,"usr":416422435293057076,"detailed_name":"GLFW_CENTER_CURSOR","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_CENTER_CURSOR          0x00020009","comments":"","declarations":[],"spell":"815:9-815:27|-1|1|2","extent":"815:9-815:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":242,"usr":14042446387371087359,"detailed_name":"GLFW_TRANSPARENT_FRAMEBUFFER","short_name_offset":0,"short_name_size":28,"hover":"#define GLFW_TRANSPARENT_FRAMEBUFFER 0x0002000A","comments":"","declarations":[],"spell":"822:9-822:37|-1|1|2","extent":"822:9-822:48|-1|1|0","uses":[],"kind":255,"storage":0},{"id":243,"usr":4325510800998271042,"detailed_name":"GLFW_HOVERED","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_HOVERED                0x0002000B","comments":"","declarations":[],"spell":"827:9-827:21|-1|1|2","extent":"827:9-827:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":244,"usr":10543910945472777241,"detailed_name":"GLFW_FOCUS_ON_SHOW","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_FOCUS_ON_SHOW          0x0002000C","comments":"","declarations":[],"spell":"833:9-833:27|-1|1|2","extent":"833:9-833:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":245,"usr":10199680576256466662,"detailed_name":"GLFW_RED_BITS","short_name_offset":0,"short_name_size":13,"hover":"#define GLFW_RED_BITS               0x00021001","comments":"","declarations":[],"spell":"839:9-839:22|-1|1|2","extent":"839:9-839:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":246,"usr":12269332601468035271,"detailed_name":"GLFW_GREEN_BITS","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_GREEN_BITS             0x00021002","comments":"","declarations":[],"spell":"844:9-844:24|-1|1|2","extent":"844:9-844:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":247,"usr":1743341296891951895,"detailed_name":"GLFW_BLUE_BITS","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_BLUE_BITS              0x00021003","comments":"","declarations":[],"spell":"849:9-849:23|-1|1|2","extent":"849:9-849:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":248,"usr":13350626593583263211,"detailed_name":"GLFW_ALPHA_BITS","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_ALPHA_BITS             0x00021004","comments":"","declarations":[],"spell":"854:9-854:24|-1|1|2","extent":"854:9-854:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":249,"usr":15155069675073200842,"detailed_name":"GLFW_DEPTH_BITS","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_DEPTH_BITS             0x00021005","comments":"","declarations":[],"spell":"859:9-859:24|-1|1|2","extent":"859:9-859:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":250,"usr":15173045817945475949,"detailed_name":"GLFW_STENCIL_BITS","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_STENCIL_BITS           0x00021006","comments":"","declarations":[],"spell":"864:9-864:26|-1|1|2","extent":"864:9-864:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":251,"usr":15090775177714049132,"detailed_name":"GLFW_ACCUM_RED_BITS","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_ACCUM_RED_BITS         0x00021007","comments":"","declarations":[],"spell":"869:9-869:28|-1|1|2","extent":"869:9-869:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":252,"usr":11352323693813963805,"detailed_name":"GLFW_ACCUM_GREEN_BITS","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_ACCUM_GREEN_BITS       0x00021008","comments":"","declarations":[],"spell":"874:9-874:30|-1|1|2","extent":"874:9-874:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":253,"usr":12471126350161375302,"detailed_name":"GLFW_ACCUM_BLUE_BITS","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_ACCUM_BLUE_BITS        0x00021009","comments":"","declarations":[],"spell":"879:9-879:29|-1|1|2","extent":"879:9-879:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":254,"usr":7147424234322782006,"detailed_name":"GLFW_ACCUM_ALPHA_BITS","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_ACCUM_ALPHA_BITS       0x0002100A","comments":"","declarations":[],"spell":"884:9-884:30|-1|1|2","extent":"884:9-884:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":255,"usr":10982492607945257336,"detailed_name":"GLFW_AUX_BUFFERS","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_AUX_BUFFERS            0x0002100B","comments":"","declarations":[],"spell":"889:9-889:25|-1|1|2","extent":"889:9-889:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":256,"usr":12418450886701447984,"detailed_name":"GLFW_STEREO","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_STEREO                 0x0002100C","comments":"","declarations":[],"spell":"894:9-894:20|-1|1|2","extent":"894:9-894:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":257,"usr":14223984049101693119,"detailed_name":"GLFW_SAMPLES","short_name_offset":0,"short_name_size":12,"hover":"#define GLFW_SAMPLES                0x0002100D","comments":"","declarations":[],"spell":"899:9-899:21|-1|1|2","extent":"899:9-899:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":258,"usr":3294425638654202106,"detailed_name":"GLFW_SRGB_CAPABLE","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_SRGB_CAPABLE           0x0002100E","comments":"","declarations":[],"spell":"904:9-904:26|-1|1|2","extent":"904:9-904:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":259,"usr":8316024848525313600,"detailed_name":"GLFW_REFRESH_RATE","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_REFRESH_RATE           0x0002100F","comments":"","declarations":[],"spell":"909:9-909:26|-1|1|2","extent":"909:9-909:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":260,"usr":17972915187405886867,"detailed_name":"GLFW_DOUBLEBUFFER","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_DOUBLEBUFFER           0x00021010","comments":"","declarations":[],"spell":"914:9-914:26|-1|1|2","extent":"914:9-914:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":261,"usr":9072804425660513531,"detailed_name":"GLFW_CLIENT_API","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_CLIENT_API             0x00022001","comments":"","declarations":[],"spell":"921:9-921:24|-1|1|2","extent":"921:9-921:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":262,"usr":9379892394982324918,"detailed_name":"GLFW_CONTEXT_VERSION_MAJOR","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_CONTEXT_VERSION_MAJOR  0x00022002","comments":"","declarations":[],"spell":"927:9-927:35|-1|1|2","extent":"927:9-927:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":263,"usr":8044241389171427980,"detailed_name":"GLFW_CONTEXT_VERSION_MINOR","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_CONTEXT_VERSION_MINOR  0x00022003","comments":"","declarations":[],"spell":"933:9-933:35|-1|1|2","extent":"933:9-933:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":264,"usr":15336256887140139247,"detailed_name":"GLFW_CONTEXT_REVISION","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_CONTEXT_REVISION       0x00022004","comments":"","declarations":[],"spell":"939:9-939:30|-1|1|2","extent":"939:9-939:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":265,"usr":10129555262006786784,"detailed_name":"GLFW_CONTEXT_ROBUSTNESS","short_name_offset":0,"short_name_size":23,"hover":"#define GLFW_CONTEXT_ROBUSTNESS     0x00022005","comments":"","declarations":[],"spell":"945:9-945:32|-1|1|2","extent":"945:9-945:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":266,"usr":8457035666117223594,"detailed_name":"GLFW_OPENGL_FORWARD_COMPAT","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_OPENGL_FORWARD_COMPAT  0x00022006","comments":"","declarations":[],"spell":"951:9-951:35|-1|1|2","extent":"951:9-951:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":267,"usr":627075364249196465,"detailed_name":"GLFW_OPENGL_DEBUG_CONTEXT","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_OPENGL_DEBUG_CONTEXT   0x00022007","comments":"","declarations":[],"spell":"957:9-957:34|-1|1|2","extent":"957:9-957:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":268,"usr":1023822257486490057,"detailed_name":"GLFW_OPENGL_PROFILE","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_OPENGL_PROFILE         0x00022008","comments":"","declarations":[],"spell":"963:9-963:28|-1|1|2","extent":"963:9-963:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":269,"usr":18225287252856158443,"detailed_name":"GLFW_CONTEXT_RELEASE_BEHAVIOR","short_name_offset":0,"short_name_size":29,"hover":"#define GLFW_CONTEXT_RELEASE_BEHAVIOR 0x00022009","comments":"","declarations":[],"spell":"969:9-969:38|-1|1|2","extent":"969:9-969:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":270,"usr":8514818330904794738,"detailed_name":"GLFW_CONTEXT_NO_ERROR","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_CONTEXT_NO_ERROR       0x0002200A","comments":"","declarations":[],"spell":"975:9-975:30|-1|1|2","extent":"975:9-975:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":271,"usr":16516869763923070358,"detailed_name":"GLFW_CONTEXT_CREATION_API","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_CONTEXT_CREATION_API   0x0002200B","comments":"","declarations":[],"spell":"981:9-981:34|-1|1|2","extent":"981:9-981:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":272,"usr":14748930409320693708,"detailed_name":"GLFW_SCALE_TO_MONITOR","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_SCALE_TO_MONITOR       0x0002200C","comments":"","declarations":[],"spell":"985:9-985:30|-1|1|2","extent":"985:9-985:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":273,"usr":16694721983846724653,"detailed_name":"GLFW_COCOA_RETINA_FRAMEBUFFER","short_name_offset":0,"short_name_size":29,"hover":"#define GLFW_COCOA_RETINA_FRAMEBUFFER 0x00023001","comments":"","declarations":[],"spell":"989:9-989:38|-1|1|2","extent":"989:9-989:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":274,"usr":9911081979550653814,"detailed_name":"GLFW_COCOA_FRAME_NAME","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_COCOA_FRAME_NAME         0x00023002","comments":"","declarations":[],"spell":"993:9-993:30|-1|1|2","extent":"993:9-993:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":275,"usr":2377038082056910890,"detailed_name":"GLFW_COCOA_GRAPHICS_SWITCHING","short_name_offset":0,"short_name_size":29,"hover":"#define GLFW_COCOA_GRAPHICS_SWITCHING 0x00023003","comments":"","declarations":[],"spell":"997:9-997:38|-1|1|2","extent":"997:9-997:49|-1|1|0","uses":[],"kind":255,"storage":0},{"id":276,"usr":3956242806550719782,"detailed_name":"GLFW_X11_CLASS_NAME","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_X11_CLASS_NAME         0x00024001","comments":"","declarations":[],"spell":"1001:9-1001:28|-1|1|2","extent":"1001:9-1001:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":277,"usr":8311418398413026811,"detailed_name":"GLFW_X11_INSTANCE_NAME","short_name_offset":0,"short_name_size":22,"hover":"#define GLFW_X11_INSTANCE_NAME      0x00024002","comments":"","declarations":[],"spell":"1005:9-1005:31|-1|1|2","extent":"1005:9-1005:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":278,"usr":1861322041033918041,"detailed_name":"GLFW_NO_API","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_NO_API                          0","comments":"","declarations":[],"spell":"1008:9-1008:20|-1|1|2","extent":"1008:9-1008:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":279,"usr":7820368237429104324,"detailed_name":"GLFW_OPENGL_API","short_name_offset":0,"short_name_size":15,"hover":"#define GLFW_OPENGL_API             0x00030001","comments":"","declarations":[],"spell":"1009:9-1009:24|-1|1|2","extent":"1009:9-1009:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":280,"usr":3091014975238725629,"detailed_name":"GLFW_OPENGL_ES_API","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_OPENGL_ES_API          0x00030002","comments":"","declarations":[],"spell":"1010:9-1010:27|-1|1|2","extent":"1010:9-1010:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":281,"usr":11748371483618395280,"detailed_name":"GLFW_NO_ROBUSTNESS","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_NO_ROBUSTNESS                   0","comments":"","declarations":[],"spell":"1012:9-1012:27|-1|1|2","extent":"1012:9-1012:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":282,"usr":15685186178783912237,"detailed_name":"GLFW_NO_RESET_NOTIFICATION","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_NO_RESET_NOTIFICATION  0x00031001","comments":"","declarations":[],"spell":"1013:9-1013:35|-1|1|2","extent":"1013:9-1013:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":283,"usr":2350133777289545677,"detailed_name":"GLFW_LOSE_CONTEXT_ON_RESET","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_LOSE_CONTEXT_ON_RESET  0x00031002","comments":"","declarations":[],"spell":"1014:9-1014:35|-1|1|2","extent":"1014:9-1014:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":284,"usr":6222936415658367108,"detailed_name":"GLFW_OPENGL_ANY_PROFILE","short_name_offset":0,"short_name_size":23,"hover":"#define GLFW_OPENGL_ANY_PROFILE              0","comments":"","declarations":[],"spell":"1016:9-1016:32|-1|1|2","extent":"1016:9-1016:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":285,"usr":13351602418850175291,"detailed_name":"GLFW_OPENGL_CORE_PROFILE","short_name_offset":0,"short_name_size":24,"hover":"#define GLFW_OPENGL_CORE_PROFILE    0x00032001","comments":"","declarations":[],"spell":"1017:9-1017:33|-1|1|2","extent":"1017:9-1017:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":286,"usr":10985082310108034193,"detailed_name":"GLFW_OPENGL_COMPAT_PROFILE","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_OPENGL_COMPAT_PROFILE  0x00032002","comments":"","declarations":[],"spell":"1018:9-1018:35|-1|1|2","extent":"1018:9-1018:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":287,"usr":18165219623016036374,"detailed_name":"GLFW_CURSOR","short_name_offset":0,"short_name_size":11,"hover":"#define GLFW_CURSOR                 0x00033001","comments":"","declarations":[],"spell":"1020:9-1020:20|-1|1|2","extent":"1020:9-1020:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":288,"usr":9526719073910796116,"detailed_name":"GLFW_STICKY_KEYS","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_STICKY_KEYS            0x00033002","comments":"","declarations":[],"spell":"1021:9-1021:25|-1|1|2","extent":"1021:9-1021:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":289,"usr":16693304648913594907,"detailed_name":"GLFW_STICKY_MOUSE_BUTTONS","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_STICKY_MOUSE_BUTTONS   0x00033003","comments":"","declarations":[],"spell":"1022:9-1022:34|-1|1|2","extent":"1022:9-1022:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":290,"usr":11961075391025095146,"detailed_name":"GLFW_LOCK_KEY_MODS","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_LOCK_KEY_MODS          0x00033004","comments":"","declarations":[],"spell":"1023:9-1023:27|-1|1|2","extent":"1023:9-1023:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":291,"usr":8641216803687781588,"detailed_name":"GLFW_RAW_MOUSE_MOTION","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_RAW_MOUSE_MOTION       0x00033005","comments":"","declarations":[],"spell":"1024:9-1024:30|-1|1|2","extent":"1024:9-1024:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":292,"usr":2493633845991163237,"detailed_name":"GLFW_CURSOR_NORMAL","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_CURSOR_NORMAL          0x00034001","comments":"","declarations":[],"spell":"1026:9-1026:27|-1|1|2","extent":"1026:9-1026:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":293,"usr":13871411458530075627,"detailed_name":"GLFW_CURSOR_HIDDEN","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_CURSOR_HIDDEN          0x00034002","comments":"","declarations":[],"spell":"1027:9-1027:27|-1|1|2","extent":"1027:9-1027:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":294,"usr":8505164702534268077,"detailed_name":"GLFW_CURSOR_DISABLED","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_CURSOR_DISABLED        0x00034003","comments":"","declarations":[],"spell":"1028:9-1028:29|-1|1|2","extent":"1028:9-1028:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":295,"usr":154453722136125432,"detailed_name":"GLFW_ANY_RELEASE_BEHAVIOR","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_ANY_RELEASE_BEHAVIOR            0","comments":"","declarations":[],"spell":"1030:9-1030:34|-1|1|2","extent":"1030:9-1030:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":296,"usr":5244999133257774068,"detailed_name":"GLFW_RELEASE_BEHAVIOR_FLUSH","short_name_offset":0,"short_name_size":27,"hover":"#define GLFW_RELEASE_BEHAVIOR_FLUSH 0x00035001","comments":"","declarations":[],"spell":"1031:9-1031:36|-1|1|2","extent":"1031:9-1031:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":297,"usr":7712419451846018146,"detailed_name":"GLFW_RELEASE_BEHAVIOR_NONE","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_RELEASE_BEHAVIOR_NONE  0x00035002","comments":"","declarations":[],"spell":"1032:9-1032:35|-1|1|2","extent":"1032:9-1032:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":298,"usr":1789692850118259651,"detailed_name":"GLFW_NATIVE_CONTEXT_API","short_name_offset":0,"short_name_size":23,"hover":"#define GLFW_NATIVE_CONTEXT_API     0x00036001","comments":"","declarations":[],"spell":"1034:9-1034:32|-1|1|2","extent":"1034:9-1034:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":299,"usr":4177826026087104966,"detailed_name":"GLFW_EGL_CONTEXT_API","short_name_offset":0,"short_name_size":20,"hover":"#define GLFW_EGL_CONTEXT_API        0x00036002","comments":"","declarations":[],"spell":"1035:9-1035:29|-1|1|2","extent":"1035:9-1035:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":300,"usr":13550475564937437075,"detailed_name":"GLFW_OSMESA_CONTEXT_API","short_name_offset":0,"short_name_size":23,"hover":"#define GLFW_OSMESA_CONTEXT_API     0x00036003","comments":"","declarations":[],"spell":"1036:9-1036:32|-1|1|2","extent":"1036:9-1036:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":301,"usr":8068579629291577189,"detailed_name":"GLFW_ARROW_CURSOR","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_ARROW_CURSOR           0x00036001","comments":"","declarations":[],"spell":"1050:9-1050:26|-1|1|2","extent":"1050:9-1050:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":302,"usr":10271757677706308643,"detailed_name":"GLFW_IBEAM_CURSOR","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_IBEAM_CURSOR           0x00036002","comments":"","declarations":[],"spell":"1055:9-1055:26|-1|1|2","extent":"1055:9-1055:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":303,"usr":15021713378151577564,"detailed_name":"GLFW_CROSSHAIR_CURSOR","short_name_offset":0,"short_name_size":21,"hover":"#define GLFW_CROSSHAIR_CURSOR       0x00036003","comments":"","declarations":[],"spell":"1060:9-1060:30|-1|1|2","extent":"1060:9-1060:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":304,"usr":5745763726476573292,"detailed_name":"GLFW_HAND_CURSOR","short_name_offset":0,"short_name_size":16,"hover":"#define GLFW_HAND_CURSOR            0x00036004","comments":"","declarations":[],"spell":"1065:9-1065:25|-1|1|2","extent":"1065:9-1065:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":305,"usr":14449901350428597986,"detailed_name":"GLFW_HRESIZE_CURSOR","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_HRESIZE_CURSOR         0x00036005","comments":"","declarations":[],"spell":"1070:9-1070:28|-1|1|2","extent":"1070:9-1070:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":306,"usr":3066470689683027197,"detailed_name":"GLFW_VRESIZE_CURSOR","short_name_offset":0,"short_name_size":19,"hover":"#define GLFW_VRESIZE_CURSOR         0x00036006","comments":"","declarations":[],"spell":"1075:9-1075:28|-1|1|2","extent":"1075:9-1075:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":307,"usr":7980194683154319997,"detailed_name":"GLFW_CONNECTED","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_CONNECTED              0x00040001","comments":"","declarations":[],"spell":"1078:9-1078:23|-1|1|2","extent":"1078:9-1078:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":308,"usr":18440137719380566630,"detailed_name":"GLFW_DISCONNECTED","short_name_offset":0,"short_name_size":17,"hover":"#define GLFW_DISCONNECTED           0x00040002","comments":"","declarations":[],"spell":"1079:9-1079:26|-1|1|2","extent":"1079:9-1079:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":309,"usr":13353870051513640630,"detailed_name":"GLFW_JOYSTICK_HAT_BUTTONS","short_name_offset":0,"short_name_size":25,"hover":"#define GLFW_JOYSTICK_HAT_BUTTONS   0x00050001","comments":"","declarations":[],"spell":"1087:9-1087:34|-1|1|2","extent":"1087:9-1087:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":310,"usr":16487706144368368560,"detailed_name":"GLFW_COCOA_CHDIR_RESOURCES","short_name_offset":0,"short_name_size":26,"hover":"#define GLFW_COCOA_CHDIR_RESOURCES  0x00051001","comments":"","declarations":[],"spell":"1092:9-1092:35|-1|1|2","extent":"1092:9-1092:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":311,"usr":7747914690650549344,"detailed_name":"GLFW_COCOA_MENUBAR","short_name_offset":0,"short_name_size":18,"hover":"#define GLFW_COCOA_MENUBAR          0x00051002","comments":"","declarations":[],"spell":"1097:9-1097:27|-1|1|2","extent":"1097:9-1097:47|-1|1|0","uses":[],"kind":255,"storage":0},{"id":312,"usr":8205040308860704592,"detailed_name":"GLFW_DONT_CARE","short_name_offset":0,"short_name_size":14,"hover":"#define GLFW_DONT_CARE              -1","comments":"","declarations":[],"spell":"1100:9-1100:23|-1|1|2","extent":"1100:9-1100:39|-1|1|0","uses":[],"kind":255,"storage":0},{"id":313,"usr":15844155932747258328,"detailed_name":"GLAPIENTRY","short_name_offset":0,"short_name_size":10,"hover":"#define GLAPIENTRY APIENTRY","comments":"","declarations":[],"spell":"5863:10-5863:20|-1|1|2","extent":"5863:10-5863:29|-1|1|0","uses":[],"kind":255,"storage":0}]}